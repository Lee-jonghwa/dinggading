/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mickey.dinggading.api;

import com.mickey.dinggading.model.ProblemDetail;
import com.mickey.dinggading.model.Vet;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;


import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@Validated

@RestController
public interface VetApi {

    /**
     * POST /vets : Create a Vet
     * Creates a vet .
     *
     * @param vet The vet (required)
     * @return Vet created successfully. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or Vet not found. (status code 404)
     *         or Server error. (status code 500)
     */

    @PostMapping(
        value = "/vets",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<?> addVet( @Valid @RequestBody Vet vet);


    /**
     * DELETE /vets/{vetId} : Delete a vet by ID
     * Returns the vet or a 404 error.
     *
     * @param vetId The ID of the vet. (required)
     * @return Vet details found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or Vet not found. (status code 404)
     *         or Server error. (status code 500)
     */

    @DeleteMapping(
        value = "/vets/{vetId}",
        produces = { "application/json" }
    )
    ResponseEntity<?> deleteVet(@Min(0) @PathVariable("vetId") Integer vetId);


    /**
     * GET /vets/{vetId} : Get a vet by ID
     * Returns the vet or a 404 error.
     *
     * @param vetId The ID of the vet. (required)
     * @return Vet details found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or Vet not found. (status code 404)
     *         or Server error. (status code 500)
     */

    @GetMapping(
        value = "/vets/{vetId}",
        produces = { "application/json" }
    )
    ResponseEntity<?> getVet(@Min(0) @PathVariable("vetId") Integer vetId);


    /**
     * GET /vets : Lists vets
     * Returns an array of vets.
     *
     * @return Vets found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Server error. (status code 500)
     */

    @GetMapping(
        value = "/vets",
        produces = { "application/json" }
    )
    ResponseEntity<?> listVets();


    /**
     * PUT /vets/{vetId} : Update a vet  by ID
     * Returns the vet or a 404 error.
     *
     * @param vetId The ID of the vet. (required)
     * @param vet The vet (required)
     * @return Pet type details found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or Vet not found. (status code 404)
     *         or Server error. (status code 500)
     */

    @PutMapping(
        value = "/vets/{vetId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<?> updateVet(@Min(0) @PathVariable("vetId") Integer vetId, @Valid @RequestBody Vet vet);

}
