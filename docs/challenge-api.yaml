openapi: 3.0.0
info:
  title: 딩가딩 Challenge API
  version: 1.0.0
  description: "딩가딩 서비스의 Challenge Aggregate와 관련된 API를 정의합니다. 회원이 악기별 티어 챌린지, 연습, 방어전 등을 관리하는 API를 포함합니다."

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT 인증 토큰을 사용합니다. 예: Bearer {token}"

  schemas:
    ChallengeDTO:
      type: object
      properties:
        challengeId:
          type: integer
          description: "도전 ID"
          example: 42
        memberId:
          type: string
          format: uuid
          description: "회원 ID"
          example: "123e4567-e89b-12d3-a456-426614174000"
        challengeType:
          type: string
          enum: [FIRST, PRACTICE, CHALLENGE, DEFENSE]
          description: "도전 유형 (첫 배치고사, 연습, 티어 도전, 방어전)"
          example: "CHALLENGE"
        instrument:
          type: string
          enum: [VOCAL, GUITAR, DRUM, BASS]
          description: "악기 유형"
          example: "GUITAR"
        tier:
          type: string
          enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
          description: "도전 티어"
          example: "SILVER"
        songByInstrumentId:
          type: integer
          description: "도전 곡 ID"
          example: 12
        createdAt:
          type: string
          format: date-time
          description: "도전 생성일"
          example: "2024-03-23T14:30:45Z"
      required:
        - challengeId
        - memberId
        - challengeType
        - instrument
        - tier
        - songByInstrumentId
        - createdAt

    ChallengeSubmissionDTO:
      type: object
      properties:
        recordUrl:
          type: string
          description: "녹음 파일 URL"
          example: "https://dingading.com/recordings/123456.mp3"
        beat:
          type: integer
          description: "박자 점수 (0-100)"
          minimum: 0
          maximum: 100
          example: 85
        tune:
          type: integer
          description: "음정 점수 (0-100)"
          minimum: 0
          maximum: 100
          example: 78
        tone:
          type: integer
          description: "음색 점수 (0-100)"
          minimum: 0
          maximum: 100
          example: 92
        totalScore:
          type: integer
          description: "총 점수 (0-100)"
          minimum: 0
          maximum: 100
          example: 85
        result:
          type: string
          enum: [SUCCESS, FAIL]
          description: "도전 결과"
          example: "SUCCESS"
      required:
        - recordUrl
        - beat
        - tune
        - tone
        - totalScore
        - result

    ChallengeResultDTO:
      type: object
      properties:
        challengeId:
          type: integer
          description: "도전 ID"
          example: 42
        memberId:
          type: string
          format: uuid
          description: "회원 ID"
          example: "123e4567-e89b-12d3-a456-426614174000"
        challengeType:
          type: string
          enum: [FIRST, PRACTICE, CHALLENGE, DEFENSE]
          description: "도전 유형"
          example: "CHALLENGE"
        instrument:
          type: string
          enum: [VOCAL, GUITAR, DRUM, BASS]
          description: "악기 유형"
          example: "GUITAR"
        tier:
          type: string
          enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
          description: "도전 티어"
          example: "SILVER"
        songTitle:
          type: string
          description: "도전 곡 제목"
          example: "Wonderwall"
        recordUrl:
          type: string
          description: "녹음 파일 URL"
          example: "https://dingading.com/recordings/123456.mp3"
        beat:
          type: integer
          description: "박자 점수"
          example: 85
        tune:
          type: integer
          description: "음정 점수"
          example: 78
        tone:
          type: integer
          description: "음색 점수"
          example: 92
        totalScore:
          type: integer
          description: "총 점수"
          example: 85
        result:
          type: string
          enum: [SUCCESS, FAIL]
          description: "도전 결과"
          example: "SUCCESS"
        createdAt:
          type: string
          format: date-time
          description: "도전 생성일"
          example: "2024-03-23T14:30:45Z"
        submittedAt:
          type: string
          format: date-time
          description: "결과 제출일"
          example: "2024-03-23T15:15:22Z"
      required:
        - challengeId
        - memberId
        - challengeType
        - instrument
        - tier
        - songTitle
        - recordUrl
        - beat
        - tune
        - tone
        - totalScore
        - result
        - createdAt
        - submittedAt

    ChallengeDetailDTO:
      type: object
      properties:
        challengeId:
          type: integer
          description: "도전 ID"
          example: 42
        memberId:
          type: string
          format: uuid
          description: "회원 ID"
          example: "123e4567-e89b-12d3-a456-426614174000"
        memberNickname:
          type: string
          description: "회원 닉네임"
          example: "기타의신"
        challengeType:
          type: string
          enum: [FIRST, PRACTICE, CHALLENGE, DEFENSE]
          description: "도전 유형"
          example: "CHALLENGE"
        instrument:
          type: string
          enum: [VOCAL, GUITAR, DRUM, BASS]
          description: "악기 유형"
          example: "GUITAR"
        tier:
          type: string
          enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
          description: "도전 티어"
          example: "SILVER"
        targetTier:
          type: string
          enum: [IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
          description: "목표 티어 (CHALLENGE 타입인 경우)"
          example: "GOLD"
        songId:
          type: integer
          description: "노래 ID"
          example: 7
        songTitle:
          type: string
          description: "노래 제목"
          example: "Wonderwall"
        songByInstrumentId:
          type: integer
          description: "악기별 노래 ID"
          example: 12
        youtubeUrl:
          type: string
          description: "노래 유튜브 URL"
          example: "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        status:
          type: string
          enum: [STARTED, SUBMITTED, EVALUATED]
          description: "도전 상태"
          example: "SUBMITTED"
        recordUrl:
          type: string
          description: "녹음 파일 URL (제출된 경우에만)"
          example: "https://dingading.com/recordings/123456.mp3"
        beat:
          type: integer
          description: "박자 점수 (평가된 경우에만)"
          example: 85
        tune:
          type: integer
          description: "음정 점수 (평가된 경우에만)"
          example: 78
        tone:
          type: integer
          description: "음색 점수 (평가된 경우에만)"
          example: 92
        totalScore:
          type: integer
          description: "총 점수 (평가된 경우에만)"
          example: 85
        result:
          type: string
          enum: [SUCCESS, FAIL]
          description: "도전 결과 (평가된 경우에만)"
          example: "SUCCESS"
        createdAt:
          type: string
          format: date-time
          description: "도전 생성일"
          example: "2024-03-23T14:30:45Z"
        submittedAt:
          type: string
          format: date-time
          description: "결과 제출일 (제출된 경우에만)"
          example: "2024-03-23T15:15:22Z"
        evaluatedAt:
          type: string
          format: date-time
          description: "평가 완료일 (평가된 경우에만)"
          example: "2024-03-23T15:16:30Z"
      required:
        - challengeId
        - memberId
        - memberNickname
        - challengeType
        - instrument
        - tier
        - songId
        - songTitle
        - songByInstrumentId
        - youtubeUrl
        - status
        - createdAt

    ChallengeAnalysisDTO:
      type: object
      properties:
        challengeId:
          type: integer
          description: "도전 ID"
          example: 42
        instrument:
          type: string
          enum: [VOCAL, GUITAR, DRUM, BASS]
          description: "악기 유형"
          example: "GUITAR"
        beat:
          type: integer
          description: "박자 점수"
          example: 85
        beatAnalysis:
          type: object
          properties:
            strengths:
              type: array
              items:
                type: string
              description: "박자 강점"
              example: ["리듬 패턴 인식이 뛰어남", "일정한 템포 유지"]
            weaknesses:
              type: array
              items:
                type: string
              description: "박자 약점"
              example: ["리듬 변화에 대응이 부족", "빠른 패시지에서 불안정"]
            improvement:
              type: string
              description: "개선 방향"
              example: "메트로놈을 활용한 연습으로 빠른 패시지의 안정성을 높이세요."
        tune:
          type: integer
          description: "음정 점수"
          example: 78
        tuneAnalysis:
          type: object
          properties:
            strengths:
              type: array
              items:
                type: string
              description: "음정 강점"
              example: ["기본 코드 진행 이해가 뛰어남"]
            weaknesses:
              type: array
              items:
                type: string
              description: "음정 약점"
              example: ["고음에서 음정이 흔들림"]
            improvement:
              type: string
              description: "개선 방향"
              example: "음계 연습을 통해 고음역대 음정 안정성을 높이세요."
        tone:
          type: integer
          description: "음색 점수"
          example: 92
        toneAnalysis:
          type: object
          properties:
            strengths:
              type: array
              items:
                type: string
              description: "음색 강점"
              example: ["풍부한 표현력", "적절한 악센트 사용"]
            weaknesses:
              type: array
              items:
                type: string
              description: "음색 약점"
              example: ["다이내믹 레인지가 좁음"]
            improvement:
              type: string
              description: "개선 방향"
              example: "크레셴도와, 디크레셴도 연습을 통해 다이내믹 레인지를 넓혀보세요."
        totalScore:
          type: integer
          description: "총 점수"
          example: 85
        overallAnalysis:
          type: string
          description: "전체 분석 및 조언"
          example: "전반적으로 안정적인 연주를 보여주었습니다. 박자와 음정에서 더 높은 점수를 위해 메트로놈과 음계 연습을 병행해보세요. 특히 빠른 패시지와 고음역대에서 더 많은 연습이 필요합니다."
      required:
        - challengeId
        - instrument
        - beat
        - tune
        - tone
        - totalScore
        - overallAnalysis

    PageableDTO:
      type: object
      properties:
        page:
          type: integer
          description: "현재 페이지 번호"
          example: 0
        size:
          type: integer
          description: "페이지 크기"
          example: 10
        totalElements:
          type: integer
          description: "전체 요소 수"
          example: 42
        totalPages:
          type: integer
          description: "전체 페이지 수"
          example: 5
      required:
        - page
        - size
        - totalElements
        - totalPages

    PageChallengeDTO:
      type: object
      properties:
        content:
          type: array
          items:
            type: object
            properties:
              challengeId:
                type: integer
                description: "도전 ID"
                example: 42
              challengeType:
                type: string
                enum: [FIRST, PRACTICE, CHALLENGE, DEFENSE]
                description: "도전 유형"
                example: "CHALLENGE"
              instrument:
                type: string
                enum: [VOCAL, GUITAR, DRUM, BASS]
                description: "악기 유형"
                example: "GUITAR"
              tier:
                type: string
                enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
                description: "도전 티어"
                example: "SILVER"
              songTitle:
                type: string
                description: "노래 제목"
                example: "Wonderwall"
              status:
                type: string
                enum: [STARTED, SUBMITTED, EVALUATED]
                description: "도전 상태"
                example: "SUBMITTED"
              result:
                type: string
                enum: [SUCCESS, FAIL]
                description: "도전 결과 (평가된 경우에만)"
                example: "SUCCESS"
              createdAt:
                type: string
                format: date-time
                description: "도전 생성일"
                example: "2024-03-23T14:30:45Z"
            required:
              - challengeId
              - challengeType
              - instrument
              - tier
              - songTitle
              - status
              - createdAt
        pageable:
          $ref: '#/components/schemas/PageableDTO'
      required:
        - content
        - pageable

    ProblemDetail:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: "에러 발생 URI"
          example: "https://dingading.com/errors/validation-error"
        title:
          type: string
          description: "에러 제목"
          example: "리소스를 찾을 수 없습니다."
        status:
          type: integer
          description: "HTTP 상태 코드"
          example: 404
        detail:
          type: string
          description: "상세 에러 메시지"
          example: "요청한 Challenge ID 42를 찾을 수 없습니다."
        instance:
          type: string
          description: "에러 발생 경로"
          example: "/challenges/42"
      required:
        - type
        - title
        - status
        - detail

  parameters:
    ChallengeId:
      name: challengeId
      in: path
      description: "도전 ID"
      required: true
      schema:
        type: integer
        example: 42

    MemberId:
      name: memberId
      in: path
      description: "회원 ID"
      required: true
      schema:
        type: string
        format: uuid
        example: "123e4567-e89b-12d3-a456-426614174000"

    InstrumentParam:
      name: instrument
      in: query
      description: "악기 유형 필터"
      required: false
      schema:
        type: string
        enum: [VOCAL, GUITAR, DRUM, BASS]
        example: "GUITAR"

    ChallengeTypeParam:
      name: challengeType
      in: query
      description: "도전 유형 필터"
      required: false
      schema:
        type: string
        enum: [FIRST, PRACTICE, CHALLENGE, DEFENSE]
        example: "CHALLENGE"

    TierParam:
      name: tier
      in: query
      description: "티어 필터"
      required: false
      schema:
        type: string
        enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
        example: "SILVER"

    StatusParam:
      name: status
      in: query
      description: "도전 상태 필터"
      required: false
      schema:
        type: string
        enum: [STARTED, SUBMITTED, EVALUATED]
        example: "SUBMITTED"

    PageParam:
      name: page
      in: query
      description: "페이지 번호"
      required: false
      schema:
        type: integer
        default: 0
        minimum: 0
        example: 0

    SizeParam:
      name: size
      in: query
      description: "페이지 크기"
      required: false
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 100
        example: 10

  requestBodies:
    CreateChallengeRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              memberId:
                type: string
                format: uuid
                description: "회원 ID"
                example: "123e4567-e89b-12d3-a456-426614174000"
              challengeType:
                type: string
                enum: [FIRST, PRACTICE, CHALLENGE, DEFENSE]
                description: "도전 유형"
                example: "CHALLENGE"
              instrument:
                type: string
                enum: [VOCAL, GUITAR, DRUM, BASS]
                description: "악기 유형"
                example: "GUITAR"
              tier:
                type: string
                enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
                description: "현재 티어"
                example: "SILVER"
              targetTier:
                type: string
                enum: [IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
                description: "목표 티어 (CHALLENGE 타입인 경우 필수)"
                example: "GOLD"
              songByInstrumentId:
                type: integer
                description: "도전 곡 ID"
                example: 12
            required:
              - memberId
              - challengeType
              - instrument
              - tier
              - songByInstrumentId

    ChallengeSubmissionRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChallengeSubmissionDTO'

  responses:
    ChallengeResponse:
      description: "도전 정보 응답"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChallengeDTO'
          example:
            challengeId: 42
            memberId: "123e4567-e89b-12d3-a456-426614174000"
            challengeType: "CHALLENGE"
            instrument: "GUITAR"
            tier: "SILVER"
            songByInstrumentId: 12
            createdAt: "2024-03-23T14:30:45Z"

    ChallengeDetailResponse:
      description: "도전 상세 정보 응답"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChallengeDetailDTO'
          example:
            challengeId: 42
            memberId: "123e4567-e89b-12d3-a456-426614174000"
            memberNickname: "기타의신"
            challengeType: "CHALLENGE"
            instrument: "GUITAR"
            tier: "SILVER"
            targetTier: "GOLD"
            songId: 7
            songTitle: "Wonderwall"
            songByInstrumentId: 12
            youtubeUrl: "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
            status: "SUBMITTED"
            recordUrl: "https://dingading.com/recordings/123456.mp3"
            beat: 85
            tune: 78
            tone: 92
            totalScore: 85
            result: "SUCCESS"
            createdAt: "2024-03-23T14:30:45Z"
            submittedAt: "2024-03-23T15:15:22Z"
            evaluatedAt: "2024-03-23T15:16:30Z"

    ChallengeResultResponse:
      description: "도전 결과 응답"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChallengeResultDTO'
          example:
            challengeId: 42
            memberId: "123e4567-e89b-12d3-a456-426614174000"
            challengeType: "CHALLENGE"
            instrument: "GUITAR"
            tier: "SILVER"
            songTitle: "Wonderwall"
            recordUrl: "https://dingading.com/recordings/123456.mp3"
            beat: 85
            tune: 78
            tone: 92
            totalScore: 85
            result: "SUCCESS"
            createdAt: "2024-03-23T14:30:45Z"
            submittedAt: "2024-03-23T15:15:22Z"

    ChallengeAnalysisResponse:
      description: "도전 분석 데이터 응답"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChallengeAnalysisDTO'
          example:
            challengeId: 42
            instrument: "GUITAR"
            beat: 85
            beatAnalysis:
              strengths: ["리듬 패턴 인식이 뛰어남", "일정한 템포 유지"]
              weaknesses: ["리듬 변화에 대응이 부족", "빠른 패시지에서 불안정"]
              improvement: "메트로놈을 활용한 연습으로 빠른 패시지의 안정성을 높이세요."
            tune: 78
            tuneAnalysis:
              strengths: ["기본 코드 진행 이해가 뛰어남"]
              weaknesses: ["고음에서 음정이 흔들림"]
              improvement: "음계 연습을 통해 고음역대 음정 안정성을 높이세요."
            tone: 92
            toneAnalysis:
              strengths: ["풍부한 표현력", "적절한 악센트 사용"]
              weaknesses: ["다이내믹 레인지가 좁음"]
              improvement: "크레셴도와, 디크레셴도 연습을 통해 다이내믹 레인지를 넓혀보세요."
            totalScore: 85
            overallAnalysis: "전반적으로 안정적인 연주를 보여주었습니다. 박자와 음정에서 더 높은 점수를 위해 메트로놈과 음계 연습을 병행해보세요. 특히 빠른 패시지와 고음역대에서 더 많은 연습이 필요합니다."

    PageChallengeResponse:
      description: "도전 목록 페이지네이션 응답"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PageChallengeDTO'

    BadRequestError:
      description: "잘못된 요청 에러"
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemDetail'
              - type: object
                properties:
                  title:
                    type: string
                    example: "잘못된 요청"
                  status:
                    type: integer
                    example: 400

    UnauthorizedError:
      description: "인증되지 않은 요청 에러"
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemDetail'
              - type: object
                properties:
                  title:
                    type: string
                    example: "인증되지 않음"
                  status:
                    type: integer
                    example: 401

    ForbiddenError:
      description: "접근 권한 없음 에러"
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemDetail'
              - type: object
                properties:
                  title:
                    type: string
                    example: "접근 권한 없음"
                  status:
                    type: integer
                    example: 403

    NotFoundError:
      description: "리소스를 찾을 수 없음 에러"
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemDetail'
              - type: object
                properties:
                  title:
                    type: string
                    example: "리소스를 찾을 수 없음"
                  status:
                    type: integer
                    example: 404

    ConflictError:
      description: "리소스 충돌 에러"
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemDetail'
              - type: object
                properties:
                  title:
                    type: string
                    example: "리소스 충돌"
                  status:
                    type: integer
                    example: 409

security:
  - BearerAuth: []

paths:
  # ==================== 중요도: 상 (핵심 기능) ====================

  # 도전 기록 생성 API
  /challenges:
    post:
      tags:
        - Challenge
      operationId: createChallenge
      summary: "도전 기록 생성"
      description: "회원이 새로운 도전을 시작할 때 사용합니다. 배치고사, 티어 도전, 방어전 등의 도전 유형을 지정할 수 있습니다."
      requestBody:
        $ref: '#/components/requestBodies/CreateChallengeRequest'
      responses:
        '201':
          $ref: '#/components/responses/ChallengeResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '409':
          $ref: '#/components/responses/ConflictError'

    # 모든 도전 목록 조회
    get:
      tags:
        - Challenge
      operationId: getChallenges
      summary: "도전 목록 조회"
      description: "모든 도전 목록을 조회합니다. 회원 ID, 악기, 티어 등으로 필터링할 수 있습니다. 페이지네이션은 page와 size 쿼리 파라미터를 사용하여 구현됩니다. (예: ?page=0&size=10)"
      parameters:
        - $ref: '#/components/parameters/InstrumentParam'
        - $ref: '#/components/parameters/ChallengeTypeParam'
        - $ref: '#/components/parameters/TierParam'
        - $ref: '#/components/parameters/StatusParam'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
      x-spring-paginated: true
      responses:
        '200':
          $ref: '#/components/responses/PageChallengeResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # 도전 결과 제출 API
  /challenges/{challengeId}/submit:
    post:
      tags:
        - Challenge
      operationId: submitChallengeResult
      summary: "도전 결과 제출"
      description: "도전을 마친 후 결과를 제출합니다. 녹음된 연주 파일과 AI가 산출한 점수를 포함합니다."
      parameters:
        - $ref: '#/components/parameters/ChallengeId'
      requestBody:
        $ref: '#/components/requestBodies/ChallengeSubmissionRequest'
      responses:
        '200':
          $ref: '#/components/responses/ChallengeResultResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'

  # ==================== 중요도: 중 (주요 기능) ====================

  # 특정 도전 조회 API
  /challenges/{challengeId}:
    get:
      tags:
        - Challenge
      operationId: getChallenge
      summary: "특정 도전 조회"
      description: "특정 도전의 상세 정보를 조회합니다. 도전 유형, 악기, 티어, 노래 정보, 결과 등을 확인할 수 있습니다."
      parameters:
        - $ref: '#/components/parameters/ChallengeId'
      responses:
        '200':
          $ref: '#/components/responses/ChallengeDetailResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      deprecated: true

  # 회원별 도전 목록 조회
  /members/{memberId}/challenges:
    get:
      tags:
        - Challenge
      operationId: getMemberChallenges
      summary: "회원별 도전 목록 조회"
      description: "특정 회원의 모든 도전 목록을 조회합니다. 악기, 티어, 도전 유형 등으로 필터링할 수 있습니다. 페이지네이션은 page와 size 쿼리 파라미터를 사용하여 구현됩니다. (예: ?page=0&size=10)"
      parameters:
        - $ref: '#/components/parameters/MemberId'
        - $ref: '#/components/parameters/InstrumentParam'
        - $ref: '#/components/parameters/ChallengeTypeParam'
        - $ref: '#/components/parameters/TierParam'
        - $ref: '#/components/parameters/StatusParam'
      x-spring-paginated: true
      responses:
        '200':
          $ref: '#/components/responses/PageChallengeResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      deprecated: true

  # 연습 도전 생성 API
  /challenges/practice:
    post:
      tags:
        - Challenge
      operationId: createPracticeChallenge
      summary: "연습 도전 생성"
      description: "회원이 실력 향상을 위해 연습 도전을 시작할 때 사용합니다. 결과는 티어에 영향을 미치지 않습니다."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                memberId:
                  type: string
                  format: uuid
                  description: "회원 ID"
                  example: "123e4567-e89b-12d3-a456-426614174000"
                instrument:
                  type: string
                  enum: [VOCAL, GUITAR, DRUM, BASS]
                  description: "악기 유형"
                  example: "GUITAR"
                tier:
                  type: string
                  enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
                  description: "현재 티어"
                  example: "SILVER"
                songByInstrumentId:
                  type: integer
                  description: "연습할 곡 ID"
                  example: 12
              required:
                - memberId
                - instrument
                - tier
                - songByInstrumentId
      responses:
        '201':
          $ref: '#/components/responses/ChallengeResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      deprecated: true

  # ==================== 중요도: 하 (부가 기능) ====================

  # 도전 분석 데이터 조회 API
  /challenges/{challengeId}/analysis:
    get:
      tags:
        - Challenge
      operationId: getChallengeAnalysis
      summary: "도전 분석 데이터 조회"
      description: "특정 도전에 대한 상세 분석 데이터를 조회합니다. 박자, 음정, 음색 등의 세부 점수와 개선점 등을 확인할 수 있습니다."
      parameters:
        - $ref: '#/components/parameters/ChallengeId'
      responses:
        '200':
          $ref: '#/components/responses/ChallengeAnalysisResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      deprecated: true

  # 도전 취소 API
  /challenges/{challengeId}/cancel:
    post:
      tags:
        - Challenge
      operationId: cancelChallenge
      summary: "도전 취소"
      description: "이미 시작된 도전을 취소합니다."
      parameters:
        - $ref: '#/components/parameters/ChallengeId'
      responses:
        '204':
          description: "도전 취소 성공"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      deprecated: true