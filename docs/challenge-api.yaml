openapi: 3.0.0
info:
  title: 딩가딩 RankMatching API
  version: 1.0.0
  description: "랭크 매칭, 시도 기록, 티어 정보 관련 API 명세서"
  contact:
    email: qkrwnsgh71w@gmail.com

servers:
  - url: http://localhost:8080
    description: 스프링 서버
  - url: http://localhost:8081
    description: 목 서버
    
tags:
  - name: Attempt
    description: 연주 시도 기록 관련 API - 개발 완료
  - name: Analysis
    description: 연주 분석 관련 API - 개발전
  - name: Instrument
    description: 악기 정보 관련 API - 개발전
  - name: MemberRank
    description: 회원 랭크 정보 관련 API - 개발 완료
  - name: MemberTierLog
    description: 회원 티어 변동 이력 관련 API - 개발전
  - name: RankMatching
    description: 랭크 매칭 관련 API - 개발 완료
  - name: Song
    description: 곡 관리 관련 API - 개발 완료
  - name: SongByInstrument
    description: 악기별 곡 관련 API - 개발전
  - name: SongInstrumentPack
    description: 곡 팩 관련 API - 개발전
  - name: Tier
    description: 티어 시스템 관련 API - 개발전

components:
  schemas:
    ProblemDetail:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: "문제 유형을 식별하는 URI"
        title:
          type: string
          description: "문제에 대한 간단한 제목"
        status:
          type: integer
          description: "HTTP 상태 코드"
        detail:
          type: string
          description: "문제에 대한 자세한 설명"
        instance:
          type: string
          format: uri
          description: "문제가 발생한 특정 URI"

    MemberRankDTO:
      type: object
      properties:
        memberRankId:
          type: integer
          format: int64
          description: "회원 랭크 고유 식별자"
        memberId:
          type: string
          format: uuid
          description: "회원 ID"
        rankMatchingId:
          type: integer
          format: int64
          description: "랭크 매칭 ID"
        instrument:
          type: string
          enum: [VOCAL, GUITAR, DRUM, BASS]
          description: "악기 종류"
        tier:
          type: string
          enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
          description: "현재 티어"
        beatScore:
          type: integer
          description: "박자 점수"
        tuneScore:
          type: integer
          description: "음정 점수"
        toneScore:
          type: integer
          description: "톤 점수"
        rankSuccessCount:
          type: integer
          description: "랭크 매칭 성공 횟수"
        lastAttemptTier:
          type: string
          enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
          description: "마지막으로 도전한 티어"
        defenceExpireDate:
          type: string
          format: date
          description: "방어 만료일"
        lastAttemptDate:
          type: string
          format: date
          description: "마지막 도전일"
      required:
        - memberRankId
        - memberId
        - instrument
        - tier
        - rankSuccessCount
      example:
        memberRankId: 123
        memberId: "123e4567-e89b-12d3-a456-426614174000"
        rankMatchingId: 456
        instrument: "VOCAL"
        tier: "SILVER"
        beatScore: 85
        tuneScore: 78
        toneScore: 90
        rankSuccessCount: 3
        lastAttemptTier: "GOLD"
        defenceExpireDate: "2023-12-31"
        lastAttemptDate: "2023-11-15"

    MemberTierLogDTO:
      type: object
      properties:
        tierLogId:
          type: integer
          format: int64
          description: "티어 로그 고유 식별자"
        memberRankId:
          type: integer
          format: int64
          description: "회원 랭크 ID"
        beforeTier:
          type: string
          enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
          description: "이전 티어"
        afterTier:
          type: string
          enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
          description: "변경 후 티어"
        changedDate:
          type: string
          format: date
          description: "변경 일자"
      required:
        - tierLogId
        - memberRankId
        - beforeTier
        - afterTier
        - changedDate
      example:
        tierLogId: 123
        memberRankId: 456
        beforeTier: "BRONZE"
        afterTier: "SILVER"
        changedDate: "2023-11-15"

    RankMatchingDTO:
      type: object
      properties:
        rankMatchingId:
          type: integer
          format: int64
          description: "랭크 매칭 고유 식별자"
        status:
          type: string
          enum: [IN_PROGRESS, COMPLETED, EXPIRED, FAILED]
          description: "매칭 상태"
        songInstrumentPackId:
          type: integer
          format: int64
          description: "곡 팩 ID"
        expireDate:
          type: string
          format: date
          description: "만료일"
        startedAt:
          type: string
          format: date
          description: "시작일"
        attemptCount:
          type: integer
          description: "도전 횟수"
        successCount:
          type: integer
          description: "성공 횟수"
        instrument:
          type: string
          enum: [VOCAL, GUITAR, DRUM, BASS]
          description: "악기 종류"
        rankType:
          type: string
          enum: [FIRST, CHALLENGE, DEFENCE]
          description: "랭크 유형"
        targetTier:
          type: string
          enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
          description: "목표 티어"
        songInstrumentPack:
          $ref: '#/components/schemas/SongInstrumentPackDTO'
        attempts:
          type: array
          items:
            $ref: '#/components/schemas/AttemptDTO'
      required:
        - rankMatchingId
        - status
        - songInstrumentPackId
        - expireDate
        - startedAt
        - attemptCount
        - successCount
        - instrument
        - rankType
        - targetTier
      example:
        rankMatchingId: 1
        status: "IN_PROGRESS"
        songInstrumentPackId: 1
        expireDate: "2025-04-03"
        startedAt: "2025-03-27"
        attemptCount: 5
        successCount: 3
        instrument: "VOCAL"
        rankType: "CHALLENGE"
        targetTier: "GOLD"
        songInstrumentPack:
          songInstrumentPackId: 1
          packName: "Vocal Beginners Pack"
          songPackTier: "IRON"
          songPackInstrument: "VOCAL"
          songs:
            - songByInstrumentId: 1
              songId: 1
              songInstrumentPackId: 1
              instrumentUrl: "https://storage.vocals/smells_like_teen_spirit_iron.mp3"
              instrument: "VOCAL"
              tier: "IRON"
              song: null
            - songByInstrumentId: 2
              songId: 2
              songInstrumentPackId: 1
              instrumentUrl: "https://storage.vocals/dynamite_iron.mp3"
              instrument: "VOCAL"
              tier: "IRON"
              song: null
            - songByInstrumentId: 3
              songId: 3
              songInstrumentPackId: 1
              instrumentUrl: "https://storage.vocals/take_five_iron.mp3"
              instrument: "VOCAL"
              tier: "IRON"
              song: null
            - songByInstrumentId: 4
              songId: 4
              songInstrumentPackId: 1
              instrumentUrl: "https://storage.vocals/lose_yourself_iron.mp3"
              instrument: "VOCAL"
              tier: "IRON"
              song: null
            - songByInstrumentId: 5
              songId: 5
              songInstrumentPackId: 1
              instrumentUrl: "https://storage.vocals/gangnam_style_iron.mp3"
              instrument: "VOCAL"
              tier: "IRON"
              song: null
        attempts:
          - attemptId: 101
            rankMatchingId: 1
            songByInstrumentId: 1
            tuneScore: 83
            toneScore: 79
            beatScore: 91
            totalScore: 84
            status: "SUCCESS"
            gameType: "RANK"
            rankType: "CHALLENGE"
            createdAt: "2025-03-27T14:30:00Z"
            songByInstrument: 
              songByInstrumentId: 1
              songId: 1
              songInstrumentPackId: 1
              instrumentUrl: "https://storage.vocals/smells_like_teen_spirit_iron.mp3"
              instrument: "VOCAL"
              tier: "IRON"
              song: null
          - attemptId: 102
            rankMatchingId: 1
            songByInstrumentId: 2
            tuneScore: 75
            toneScore: 68
            beatScore: 82
            totalScore: 75
            status: "SUCCESS"
            gameType: "RANK"
            rankType: "CHALLENGE"
            createdAt: "2025-03-28T09:15:00Z"
            songByInstrument:
              songByInstrumentId: 2
              songId: 2
              songInstrumentPackId: 1
              instrumentUrl: "https://storage.vocals/dynamite_iron.mp3"
              instrument: "VOCAL"
              tier: "IRON"
              song: null
          - attemptId: 103
            rankMatchingId: 1
            songByInstrumentId: 3
            tuneScore: 62
            toneScore: 71
            beatScore: 68
            totalScore: 67
            status: "FAIL"
            gameType: "RANK"
            rankType: "CHALLENGE"
            createdAt: "2025-03-28T16:45:00Z"
            songByInstrument:
              songByInstrumentId: 3
              songId: 3
              songInstrumentPackId: 1
              instrumentUrl: "https://storage.vocals/take_five_iron.mp3"
              instrument: "VOCAL"
              tier: "IRON"
              song: null
          - attemptId: 104
            rankMatchingId: 1
            songByInstrumentId: 4
            tuneScore: 85
            toneScore: 88
            beatScore: 92
            totalScore: 88
            status: "SUCCESS"
            gameType: "RANK"
            rankType: "CHALLENGE"
            createdAt: "2025-03-29T11:20:00Z"
            songByInstrument:
              songByInstrumentId: 4
              songId: 4
              songInstrumentPackId: 1
              instrumentUrl: "https://storage.vocals/lose_yourself_iron.mp3"
              instrument: "VOCAL"
              tier: "IRON"
              song: null
          - attemptId: 105
            rankMatchingId: 1
            songByInstrumentId: 5
            tuneScore: 64
            toneScore: 59
            beatScore: 73
            totalScore: 65
            status: "FAIL"
            gameType: "RANK"
            rankType: "CHALLENGE"
            createdAt: "2025-03-30T15:10:00Z"
            songByInstrument:
              songByInstrumentId: 5
              songId: 5
              songInstrumentPackId: 1
              instrumentUrl: "https://storage.vocals/gangnam_style_iron.mp3"
              instrument: "VOCAL"
              tier: "IRON"
              song: null
    AttemptDTO:
      type: object
      properties:
        attemptId:
          type: integer
          format: int64
          description: "시도 고유 식별자"
        rankMatchingId:
          type: integer
          format: int64
          description: "랭크 매칭 ID"
        songByInstrumentId:
          type: integer
          format: int64
          description: "악기별 곡 ID"
        tuneScore:
          type: integer
          description: "음정 점수"
        toneScore:
          type: integer
          description: "톤 점수"
        beatScore:
          type: integer
          description: "박자 점수"
        totalScore:
          type: integer
          description: "총 점수"
        status:
          type: string
          enum: [SUCCESS, FAIL]
          description: "성공 여부"
        gameType:
          type: string
          enum: [PRACTICE, RANK]
          description: "게임 유형"
        rankType:
          type: string
          enum: [FIRST, CHALLENGE, DEFENCE]
          description: "랭크 유형"
        createdAt:
          type: string
          format: date-time
          description: "생성 일시"
        songByInstrument:
          $ref: '#/components/schemas/SongByInstrumentDTO'
      required:
        - attemptId
        - songByInstrumentId
        - totalScore
        - status
        - gameType
        - createdAt
      example:
        attemptId: 123
        rankMatchingId: 456
        songByInstrumentId: 789
        tuneScore: 85
        toneScore: 78
        beatScore: 92
        totalScore: 85
        status: "SUCCESS"
        gameType: "RANK"
        rankType: "CHALLENGE"
        createdAt: "2023-12-15T14:30:00Z"

    SongDTO:
      type: object
      properties:
        songId:
          type: integer
          format: int64
          description: "곡 고유 식별자"
        title:
          type: string
          description: "곡 제목"
        artist:
          type: string
          description: "아티스트"
        description:
          type: string
          description: "곡 설명"
        youtubeUrl:
          type: string
          description: "유튜브 링크"
        instruments:
          type: array
          items:
            $ref: '#/components/schemas/SongByInstrumentDTO'
      required:
        - songId
        - artist
        - title
        - youtubeUrl
      example:
        songId: 123
        title: "Shape of You"
        artist: "Ed Sheeran"
        description: "2017년 Ed Sheeran의 히트곡"
        youtubeUrl: "https://www.youtube.com/watch?v=JGwWNGJdvx8"

    SongInstrumentPackDTO:
      type: object
      properties:
        songInstrumentPackId:
          type: integer
          format: int64
          description: "곡 팩 고유 식별자"
        packName:
          type: string
          description: "팩 이름"
        songPackTier:
          type: string
          enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
          description: "팩 티어"
        songPackInstrument:
          type: string
          enum: [VOCAL, GUITAR, DRUM, BASS]
          description: "팩 악기"
        songs:
          type: array
          items:
            $ref: '#/components/schemas/SongByInstrumentDTO'
      required:
        - songInstrumentPackId
        - packName
        - songPackTier
        - songPackInstrument
      example:
        songInstrumentPackId: 123
        packName: "실버 보컬 팩"
        songPackTier: "SILVER"
        songPackInstrument: "VOCAL"

    SongByInstrumentDTO:
      type: object
      properties:
        songByInstrumentId:
          type: integer
          format: int64
          description: "악기별 곡 고유 식별자"
        songId:
          type: integer
          format: int64
          description: "곡 ID"
        songInstrumentPackId:
          type: integer
          format: int64
          description: "곡 팩 ID"
        instrumentUrl:
          type: string
          description: "악기별 연주 URL"
        instrument:
          type: string
          enum: [VOCAL, GUITAR, DRUM, BASS]
          description: "악기 종류"
        tier:
          type: string
          enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
          description: "티어 난이도"
        song:
          $ref: '#/components/schemas/SongBasicDTO'
      required:
        - songByInstrumentId
        - songId
        - songInstrumentPackId
        - instrumentUrl
        - instrument
        - tier
      example:
        songByInstrumentId: 123
        songId: 456
        songInstrumentPackId: 789
        instrumentUrl: "https://storage.example.com/songs/vocal_123.mp3"
        instrument: "VOCAL"
        tier: "SILVER"

    SongBasicDTO:
      type: object
      properties:
        songId:
          type: integer
          format: int64
          description: "곡 고유 식별자"
        title:
          type: string
          description: "곡 제목"
        youtubeUrl:
          type: string
          description: "유튜브 링크"
      required:
        - songId
        - title
        - youtubeUrl
      example:
        songId: 456
        title: "Shape of You"
        youtubeUrl: "https://www.youtube.com/watch?v=JGwWNGJdvx8"

    TierSystemDTO:
      type: object
      properties:
        tiers:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
              minScore:
                type: integer
              maxScore:
                type: integer
              description:
                type: string
        defencePeriodDays:
          type: integer
          description: "티어 방어 기간(일)"
        attemptLimit:
          type: integer
          description: "도전 최대 횟수"
        winCondition:
          type: integer
          description: "승리에 필요한 성공 횟수"
      required:
        - tiers
        - defencePeriodDays
        - attemptLimit
        - winCondition
      example:
        tiers:
          - name: "IRON"
            minScore: 0
            maxScore: 49
            description: "입문자 레벨"
          - name: "BRONZE"
            minScore: 50
            maxScore: 59
            description: "초보자 레벨"
          - name: "SILVER"
            minScore: 60
            maxScore: 69
            description: "중급자 레벨"
          - name: "GOLD"
            minScore: 70
            maxScore: 79
            description: "상급자 레벨"
          - name: "PLATINUM"
            minScore: 80
            maxScore: 89
            description: "전문가 레벨"
          - name: "DIAMOND"
            minScore: 90
            maxScore: 100
            description: "마스터 레벨"
        defencePeriodDays: 30
        attemptLimit: 5
        winCondition: 3

    DefencePeriodDTO:
      type: object
      properties:
        memberId:
          type: string
          format: uuid
          description: "회원 ID"
        instrument:
          type: string
          enum: [VOCAL, GUITAR, DRUM, BASS]
          description: "악기 종류"
        tier:
          type: string
          enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
          description: "현재 티어"
        defenceExpireDate:
          type: string
          format: date
          description: "방어 만료일"
        isInDefencePeriod:
          type: boolean
          description: "방어 기간 여부"
        daysLeft:
          type: integer
          description: "남은 방어 기간(일)"
      required:
        - memberId
        - instrument
        - tier
        - isInDefencePeriod
      example:
        memberId: "123e4567-e89b-12d3-a456-426614174000"
        instrument: "VOCAL"
        tier: "GOLD"
        defenceExpireDate: "2023-12-31"
        isInDefencePeriod: true
        daysLeft: 15

    AnalysisRequestDTO:
      type: object
      properties:
        songByInstrumentId:
          type: integer
          format: int64
          description: "악기별 곡 ID"
        audioFileUrl:
          type: string
          description: "녹음 파일 URL"
        rankMatchingId:
          type: integer
          format: int64
          description: "랭크 매칭 ID (랭크 모드인 경우)"
        gameType:
          type: string
          enum: [PRACTICE, RANK]
          description: "게임 유형"
      required:
        - songByInstrumentId
        - audioFileUrl
        - gameType
      example:
        songByInstrumentId: 123
        audioFileUrl: "https://storage.example.com/recordings/user123_song456.mp3"
        rankMatchingId: 789
        gameType: "RANK"

    AnalysisResultDTO:
      type: object
      properties:
        attemptId:
          type: integer
          format: int64
          description: "시도 ID"
        beatScore:
          type: integer
          description: "박자 점수"
        tuneScore:
          type: integer
          description: "음정 점수"
        toneScore:
          type: integer
          description: "톤 점수"
        totalScore:
          type: integer
          description: "총 점수"
        status:
          type: string
          enum: [SUCCESS, FAIL]
          description: "성공 여부"
        feedback:
          type: string
          description: "피드백 메시지"
        timestamp:
          type: string
          format: date-time
          description: "분석 시간"
      required:
        - attemptId
        - totalScore
        - status
        - timestamp
      example:
        attemptId: 123
        beatScore: 85
        tuneScore: 78
        toneScore: 92
        totalScore: 85
        status: "SUCCESS"
        feedback: "음정 조절이 필요합니다. 박자 감각은 뛰어납니다."
        timestamp: "2023-12-15T14:35:00Z"

    InstrumentDTO:
      type: object
      properties:
        code:
          type: string
          enum: [VOCAL, GUITAR, DRUM, BASS]
          description: "악기 코드"
        name:
          type: string
          description: "악기 이름"
        description:
          type: string
          description: "악기 설명"
      required:
        - code
        - name
      example:
        code: "VOCAL"
        name: "보컬"
        description: "노래를 부르는 역할"

    CreateRankMatchingRequestDTO:
      type: object
      properties:
        songInstrumentPackId:
          type: integer
          format: int64
          description: "선택한 곡 팩 ID"
        instrument:
          type: string
          enum: [VOCAL, GUITAR, DRUM, BASS]
          description: "선택한 악기"
        rankType:
          type: string
          enum: [FIRST, CHALLENGE, DEFENCE]
          description: "랭크 유형 (FIRST: 배치고사, CHALLENGE: 티어 도전, DEFENCE: 티어 방어)"
        targetTier:
          type: string
          enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
          description: "목표 티어 (도전 모드일 경우에만 필요)"
      required:
        - songInstrumentPackId
        - instrument
        - rankType
      example:
        songInstrumentPackId: 123
        instrument: "VOCAL"
        rankType: "CHALLENGE"
        targetTier: "GOLD"

    CreateSongRequestDTO:
      type: object
      properties:
        title:
          type: string
          description: "곡 제목"
        artist:
          type: string
          description: "아티스트"
        description:
          type: string
          description: "곡 설명"
        youtubeUrl:
          type: string
          description: "유튜브 링크"
        instruments:
          type: array
          items:
            type: object
            properties:
              instrumentUrl:
                type: string
                description: "악기별 연주 URL"
              instrument:
                type: string
                enum: [VOCAL, GUITAR, DRUM, BASS]
                description: "악기 종류"
              tier:
                type: string
                enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
                description: "티어 난이도"
              songInstrumentPackId:
                type: integer
                format: int64
                description: "곡 팩 ID"
      required:
        - title
        - youtubeUrl
        - instruments
      example:
        title: "Shape of You"
        description: "2017년 Ed Sheeran의 히트곡"
        youtubeUrl: "https://www.youtube.com/watch?v=JGwWNGJdvx8"
        instruments:
          - instrumentUrl: "https://storage.example.com/songs/vocal_123.mp3"
            instrument: "VOCAL"
            tier: "SILVER"
            songInstrumentPackId: 456
          - instrumentUrl: "https://storage.example.com/songs/guitar_123.mp3"
            instrument: "GUITAR"
            tier: "GOLD"
            songInstrumentPackId: 457
    TierAvailabilityDTO:
      type: object
      properties:
        availableChallenge:
          type: boolean
          description: "티어 도전 가능 여부"
        availableDefence:
          type: boolean
          description: "티어 방어 가능 여부"
        availableFirst:
          type: boolean
          description: "배치고사 가능 여부"
      required:
        - availableChallenge
        - availableDefence
        - availableFirst
      example:
        availableChallenge: true
        availableDefence: false
        availableFirst: false

    OngoingMatchingDTO:
      type: object
      properties:
        tier:
          type: string
          enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
          description: "목표 티어 또는 방어 중인 티어"
        type:
          type: string
          enum: [FIRST, CHALLENGE, DEFENCE]
          description: "랭크 매칭 유형"
        startedAt:
          type: string
          format: date
          description: "랭크 매칭 시작일"
        expireDate:
          type: string
          format: date
          description: "랭크 매칭 만료일"
        attemptCount:
          type: integer
          description: "현재까지 시도 횟수"
        successCount:
          type: integer
          description: "현재까지 성공 횟수"
      required:
        - tier
        - type
        - startedAt
        - expireDate
        - attemptCount
        - successCount
      example:
        tier: "GOLD"
        type: "CHALLENGE"
        startedAt: "2025-03-20"
        expireDate: "2025-03-27"
        attemptCount: 2
        successCount: 1            
    TierAvailabilitiesResponseDTO:
      type: object
      properties:
        currentTier:
          type: string
          enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
          description: "현재 티어"
        ongoingMatching:
          $ref: '#/components/schemas/OngoingMatchingDTO'
        IRON:
          $ref: '#/components/schemas/TierAvailabilityDTO'
        BRONZE:
          $ref: '#/components/schemas/TierAvailabilityDTO'
        SILVER:
          $ref: '#/components/schemas/TierAvailabilityDTO'
        GOLD:
          $ref: '#/components/schemas/TierAvailabilityDTO'
        PLATINUM:
          $ref: '#/components/schemas/TierAvailabilityDTO'
        DIAMOND:
          $ref: '#/components/schemas/TierAvailabilityDTO'
      required:
        - currentTier
      example:
        currentTier: "SILVER"
        ongoingMatching:
          tier: "GOLD"
          type: "CHALLENGE"
          startedAt: "2025-03-20"
          expireDate: "2025-03-27"
          attemptCount: 2
          successCount: 1
        IRON:
          availableChallenge: false
          availableDefence: false
          availableFirst: false
        BRONZE:
          availableChallenge: false
          availableDefence: false
          availableFirst: false
        SILVER:
          availableChallenge: false
          availableDefence: false
          availableFirst: false
        GOLD:
          availableChallenge: false
          availableDefence: false
          availableFirst: false
        PLATINUM:
          availableChallenge: false
          availableDefence: false
          availableFirst: false
        DIAMOND:
          availableChallenge: false
          availableDefence: false
          availableFirst: false
  parameters:
    MemberId:
      name: memberId
      in: path
      description: "회원 ID"
      required: true
      schema:
        type: string
        format: uuid
    SongId:
      name: songId
      in: path
      description: "곡 ID"
      required: true
      schema:
        type: integer
        format: int64
      example: 42

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT 인증 토큰을 사용합니다. 예: Bearer {token}"

  responses:
    TierAvailabilitiesResponse:
      description: "악기별 티어 도전/방어 가능 정보 응답"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TierAvailabilitiesResponseDTO'
    MemberRanksResponse:
      description: "회원 악기별 랭크 정보 응답"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/MemberRankDTO'
          example:
            - memberRankId: 124
              memberId: "123e4567-e89b-12d3-a456-426614174000"
              instrument: "GUITAR"
              tier: "BRONZE"
              beatScore: 75
              tuneScore: 72
              toneScore: 68
              rankSuccessCount: 1
              lastAttemptTier: "BRONZE"
              defenceExpireDate: "2023-12-15"
              lastAttemptDate: "2023-11-01"
            - memberRankId: 125
              memberId: "123e4567-e89b-12d3-a456-426614174000"
              instrument: "DRUM"
              tier: "GOLD"
              beatScore: 92
              tuneScore: 85
              toneScore: 79
              rankSuccessCount: 5
              lastAttemptTier: "PLATINUM"
              defenceExpireDate: "2023-12-25"
              lastAttemptDate: "2023-11-10"
            - memberRankId: 126
              memberId: "123e4567-e89b-12d3-a456-426614174000"
              instrument: "BASS"
              tier: "IRON"
              beatScore: 48
              tuneScore: 52
              toneScore: 45
              rankSuccessCount: 0
              lastAttemptTier: "BRONZE"
              defenceExpireDate: "2023-10-05"
              lastAttemptDate: "2023-10-05"
            - memberRankId: 127
              memberId: "123e4567-e89b-12d3-a456-426614174001"
              instrument: "VOCAL"
              tier: "PLATINUM"
              beatScore: 95
              tuneScore: 88
              toneScore: 92
              rankSuccessCount: 8
              lastAttemptTier: "DIAMOND"
              defenceExpireDate: "2023-12-20"
              lastAttemptDate: "2023-11-12"

    MemberRankDetailResponse:
      description: "회원 악기별 랭크 상세 정보 응답"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MemberRankDTO'

    PageMemberTierLogResponse:
      description: "회원 티어 변동 이력 페이지 응답"
      content:
        application/json:
          schema:
            type: object
            properties:
              content:
                type: array
                items:
                  $ref: '#/components/schemas/MemberTierLogDTO'
              pageable:
                type: object
                properties:
                  page:
                    type: integer
                    description: 현재 페이지 번호
                  size:
                    type: integer
                    description: 페이지 크기
                  totalElements:
                    type: integer
                    description: 전체 요소 수
                  totalPages:
                    type: integer
                    description: 전체 페이지 수
                required:
                  - page
                  - size
                  - totalElements
                  - totalPages
            required:
              - content
              - pageable
          example:
            content:
              - tierLogId: 123
                memberRankId: 456
                beforeTier: "BRONZE"
                afterTier: "SILVER"
                changedDate: "2023-11-15"
              - tierLogId: 124
                memberRankId: 456
                beforeTier: "UNRANKED"
                afterTier: "BRONZE"
                changedDate: "2023-10-05"
              - tierLogId: 125
                memberRankId: 456
                beforeTier: "SILVER"
                afterTier: "GOLD"
                changedDate: "2023-12-10"
              - tierLogId: 126
                memberRankId: 456
                beforeTier: "GOLD"
                afterTier: "SILVER"
                changedDate: "2024-01-05"
              - tierLogId: 127
                memberRankId: 456
                beforeTier: "SILVER"
                afterTier: "GOLD"
                changedDate: "2024-02-20"
            pageable:
              page: 0
              size: 5
              totalElements: 5
              totalPages: 1
              
    PageRankMatchingResponse:
      description: "랭크 매칭 목록 페이지 응답"
      content:
        application/json:
          schema:
            type: object
            properties:
              content:
                type: array
                items:
                  $ref: '#/components/schemas/RankMatchingDTO'
              pageable:
                type: object
                properties:
                  page:
                    type: integer
                    description: 현재 페이지 번호
                  size:
                    type: integer
                    description: 페이지 크기
                  totalElements:
                    type: integer
                    description: 전체 요소 수
                  totalPages:
                    type: integer
                    description: 전체 페이지 수
                required:
                  - page
                  - size
                  - totalElements
                  - totalPages
            required:
              - content
              - pageable

    RankMatchingResponse:
      description: "랭크 매칭 응답"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RankMatchingDTO'

    RankMatchingDetailResponse:
      description: "랭크 매칭 상세 정보 응답"
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/RankMatchingDTO'
              - type: object
                properties:
                  attempts:
                    type: array
                    items:
                      $ref: '#/components/schemas/AttemptDTO'

    AvailableRankMatchingsResponse:
      description: "도전 가능한 랭크 매칭 응답"
      content:
        application/json:
          schema:
            type: object
            properties:
              availableChallenge:
                type: boolean
                description: "티어 도전 가능 여부"
              availableDefence:
                type: boolean
                description: "티어 방어 가능 여부"
              availableFirst:
                type: boolean
                description: "배치고사 가능 여부"
              currentTier:
                type: string
                enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
                description: "현재 티어"

            required:
              - availableChallenge
              - availableDefence
              - availableFirst
              - currentTier
          example:
            availableChallenge: true
            availableDefence: false
            availableFirst: false
            currentTier: "SILVER"

    AttemptDetailResponse:
      description: "시도 기록 상세 정보 응답"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AttemptDTO'

    PageAttemptResponse:
          description: "시도 기록 목록 페이지 응답"
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/AttemptDTO'
                  pageable:
                    type: object
                    properties:
                      page:
                        type: integer
                        description: 현재 페이지 번호
                      size:
                        type: integer
                        description: 페이지 크기
                      totalElements:
                        type: integer
                        description: 전체 요소 수
                      totalPages:
                        type: integer
                        description: 전체 페이지 수
                    required:
                      - page
                      - size
                      - totalElements
                      - totalPages
                required:
                  - content
                  - pageable
              example:
                content:
                  - attemptId: 101
                    rankMatchingId: 1
                    songByInstrumentId: 1
                    tuneScore: 83
                    toneScore: 79
                    beatScore: 91
                    totalScore: 84
                    status: "SUCCESS"
                    gameType: "RANK"
                    rankType: "CHALLENGE"
                    createdAt: "2025-03-27T14:30:00Z"
                  - attemptId: 102
                    rankMatchingId: 1
                    songByInstrumentId: 2
                    tuneScore: 75
                    toneScore: 68
                    beatScore: 82
                    totalScore: 75
                    status: "SUCCESS"
                    gameType: "RANK"
                    rankType: "CHALLENGE"
                    createdAt: "2025-03-28T09:15:00Z"
                  - attemptId: 103
                    rankMatchingId: 1
                    songByInstrumentId: 3
                    tuneScore: 62
                    toneScore: 71
                    beatScore: 68
                    totalScore: 67
                    status: "FAIL"
                    gameType: "RANK"
                    rankType: "CHALLENGE"
                    createdAt: "2025-03-28T16:45:00Z"
                  - attemptId: 104
                    rankMatchingId: 1
                    songByInstrumentId: 4
                    tuneScore: 85
                    toneScore: 88
                    beatScore: 92
                    totalScore: 88
                    status: "SUCCESS"
                    gameType: "RANK"
                    rankType: "CHALLENGE"
                    createdAt: "2025-03-29T11:20:00Z"
                  - attemptId: 105
                    rankMatchingId: 1
                    songByInstrumentId: 5
                    tuneScore: 64
                    toneScore: 59
                    beatScore: 73
                    totalScore: 65
                    status: "FAIL"
                    gameType: "RANK"
                    rankType: "CHALLENGE"
                    createdAt: "2025-03-30T15:10:00Z"
                pageable:
                  page: 0
                  size: 5
                  totalElements: 5
                  totalPages: 1
    PageSongResponse:
      description: "곡 목록 페이지 응답"
      content:
        application/json:
          schema:
            type: object
            properties:
              content:
                type: array
                items:
                  $ref: '#/components/schemas/SongDTO'
              pageable:
                type: object
                properties:
                  page:
                    type: integer
                    description: 현재 페이지 번호
                  size:
                    type: integer
                    description: 페이지 크기
                  totalElements:
                    type: integer
                    description: 전체 요소 수
                  totalPages:
                    type: integer
                    description: 전체 페이지 수
                required:
                  - page
                  - size
                  - totalElements
                  - totalPages
            required:
              - content
              - pageable

    SongResponse:
      description: "곡 응답"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SongDTO'

    SongDetailResponse:
      description: "곡 상세 정보 응답"
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SongDTO'
              - type: object
                properties:
                  instruments:
                    type: array
                    items:
                      $ref: '#/components/schemas/SongByInstrumentDTO'

    SongByInstrumentsResponse:
      description: "악기별 곡 목록 응답"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/SongByInstrumentDTO'

    PageSongPackResponse:
      description: "곡 팩 목록 페이지 응답"
      content:
        application/json:
          schema:
            type: object
            properties:
              content:
                type: array
                items:
                  $ref: '#/components/schemas/SongInstrumentPackDTO'
              pageable:
                type: object
                properties:
                  page:
                    type: integer
                    description: 현재 페이지 번호
                  size:
                    type: integer
                    description: 페이지 크기
                  totalElements:
                    type: integer
                    description: 전체 요소 수
                  totalPages:
                    type: integer
                    description: 전체 페이지 수
                required:
                  - page
                  - size
                  - totalElements
                  - totalPages
            required:
              - content
              - pageable

    SongPackDetailResponse:
      description: "곡 팩 상세 정보 응답"
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SongInstrumentPackDTO'
              - type: object
                properties:
                  songs:
                    type: array
                    items:
                      $ref: '#/components/schemas/SongByInstrumentDTO'

    SongByInstrumentResponse:
      description: "악기별 곡 상세 정보 응답"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SongByInstrumentDTO'

    SongInstrumentsResponse:
      description: "곡의 악기별 버전 목록 응답"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/SongByInstrumentDTO'
          example:
            - songByInstrumentId: 123
              songId: 456
              songInstrumentPackId: 789
              instrumentUrl: "https://storage.example.com/songs/vocal_456.mp3"
              instrument: "VOCAL"
              tier: "SILVER"
            - songByInstrumentId: 124
              songId: 456
              songInstrumentPackId: 790
              instrumentUrl: "https://storage.example.com/songs/guitar_456.mp3"
              instrument: "GUITAR"
              tier: "GOLD"
            - songByInstrumentId: 125
              songId: 456
              songInstrumentPackId: 791
              instrumentUrl: "https://storage.example.com/songs/drum_456.mp3"
              instrument: "DRUM"
              tier: "BRONZE"
            - songByInstrumentId: 126
              songId: 456
              songInstrumentPackId: 792
              instrumentUrl: "https://storage.example.com/songs/bass_456.mp3"
              instrument: "BASS"
              tier: "SILVER"
            - songByInstrumentId: 127
              songId: 456
              songInstrumentPackId: 793
              instrumentUrl: "https://storage.example.com/songs/keyboard_456.mp3"
              instrument: "VOCAL"
              tier: "PLATINUM"

    TierSystemResponse:
      description: "티어 시스템 기본 정보 응답"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TierSystemDTO'

    DefencePeriodResponse:
      description: "티어 방어 기간 정보 응답"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DefencePeriodDTO'

    AnalysisRequestedResponse:
      description: "음성 분석 요청 성공 응답"
      content:
        application/json:
          schema:
            type: object
            properties:
              attemptId:
                type: integer
                format: int64
                description: "생성된 시도 ID"
              message:
                type: string
                description: "요청 처리 메시지"
              estimatedTime:
                type: integer
                description: "예상 처리 시간(초)"
            required:
              - attemptId
              - message
          example:
            attemptId: 123
            message: "음성 분석이 요청되었습니다. 곧 결과가 제공됩니다."
            estimatedTime: 30

    AnalysisResultResponse:
      description: "음성 분석 결과 응답"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AnalysisResultDTO'

    InstrumentsResponse:
      description: "지원되는 악기 목록 응답"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/InstrumentDTO'
          example:
            - code: "VOCAL"
              name: "보컬"
              description: "노래를 부르는 역할"
            - code: "GUITAR"
              name: "기타"
              description: "리듬과 멜로디를 연주하는 현악기"
            - code: "DRUM"
              name: "드럼"
              description: "리듬을 담당하는 타악기"
            - code: "BASS"
              name: "베이스"
              description: "저음을 담당하는 현악기"
    NotFoundError:
      description: "요청한 리소스를 찾을 수 없습니다."
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemDetail'
              - type: object
                properties:
                  title:
                    type: string
                    example: "리소스를 찾을 수 없습니다."

    UnauthorizedError:
      description: "인증되지 않은 요청입니다."
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemDetail'
              - type: object
                properties:
                  title:
                    type: string
                    example: "인증되지 않은 요청입니다."

    ForbiddenError:
      description: "권한이 없는 요청입니다."
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemDetail'
              - type: object
                properties:
                  title:
                    type: string
                    example: "권한이 없는 요청입니다."

    BadRequestError:
      description: "잘못된 요청입니다."
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemDetail'
              - type: object
                properties:
                  title:
                    type: string
                    example: "잘못된 요청입니다."

  requestBodies:

    CreateSongByInstrumentRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              instrument:
                type: string
                enum: [ VOCAL, GUITAR, DRUM, BASS ]
                description: "악기 유형"
                example: "GUITAR"
              mediaUrl:
                type: string
                description: "악기별 연주 음원 URL"
                example: "https://dingading.com/media/songs/42/guitar.mp3"
            required:
              - instrument
              - mediaUrl

    CreateRankMatchingRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateRankMatchingRequestDTO'
          example:
            songInstrumentPackId: 123
            instrument: "VOCAL"
            rankType: "CHALLENGE"
            targetTier: "GOLD"

    CreateSongRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateSongRequestDTO'

    AnalysisRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AnalysisRequestDTO'
          example:
            songByInstrumentId: 123
            audioFileUrl: "https://storage.example.com/recordings/user123_song456.mp3"
            rankMatchingId: 789
            gameType: "RANK"
            
paths:
  /api/members/{memberId}/ranks:
    get:
      tags:
        - MemberRank
      operationId: getMemberRanks
      summary: "회원 악기별 랭크 정보 조회"
      description: "특정 회원의 악기별 랭크 정보를 조회합니다."
      deprecated: false
      parameters:
        - $ref: '#/components/parameters/MemberId'
      responses:
        '200':
          $ref: '#/components/responses/MemberRanksResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/members/me/ranks:
    get:
      tags:
        - MemberRank
      operationId: getMyRanks
      summary: "내 악기별 랭크 정보 조회"
      description: "현재 로그인한 회원의 악기별 랭크 정보를 조회합니다."
      security:
        - BearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/MemberRanksResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/members/me/ranks/{instrument}:
    get:
      tags:
        - MemberRank
      operationId: getMyRankByInstrument
      summary: "내 특정 악기 랭크 상세 정보 조회"
      description: "현재 로그인한 회원의 특정 악기에 대한 랭크 상세 정보를 조회합니다."
      security:
        - BearerAuth: []
      parameters:
        - name: instrument
          in: path
          description: "악기 종류 (VOCAL, GUITAR, DRUM, BASS)"
          required: true
          schema:
            type: string
            enum: [VOCAL, GUITAR, DRUM, BASS]
      responses:
        '200':
          $ref: '#/components/responses/MemberRankDetailResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/members/{memberId}/tier-history:
    get:
      tags:
        - MemberTierLog
      operationId: getMemberTierHistory
      summary: "회원 티어 변동 이력 조회"
      description: "특정 회원의 티어 변동 이력을 조회합니다. size, page를 쿼리 파라미터로 전달하여 페이징 처리가 가능합니다."
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/MemberId'
        - name: instrument
          in: query
          description: "악기 종류 필터링 (VOCAL, GUITAR, DRUM, BASS)"
          required: false
          schema:
            type: string
            enum: [VOCAL, GUITAR, DRUM, BASS]
      x-spring-paginated: true
      responses:
        '200':
          $ref: '#/components/responses/PageMemberTierLogResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/rank-matchings:
    get:
      tags:
        - RankMatching
      operationId: getRankMatchings
      summary: "랭크 매칭 목록 조회"
      description: "전체 랭크 매칭 목록을 조회합니다. size, page를 쿼리 파라미터로 전달하여 페이징 처리가 가능합니다."
      deprecated: false
      x-spring-paginated: true
      responses:
        '200':
          $ref: '#/components/responses/PageRankMatchingResponse'

    post:
      tags:
        - RankMatching
      operationId: createRankMatching
      summary: "새로운 랭크 매칭 생성"
      description: "새로운 랭크 매칭을 생성합니다. 티어 도전, 방어, 배치 모드를 지정하여 생성할 수 있습니다."
      security:
        - BearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CreateRankMatchingRequest'
      responses:
        '201':
          $ref: '#/components/responses/RankMatchingResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: "지정한 곡 팩을 찾을 수 없습니다."
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ProblemDetail'
                  - type: object
                    properties:
                      title:
                        type: string
                        example: "지정한 곡 팩을 찾을 수 없습니다."

  /api/rank-matchings/{rank_matching_id}:
    get:
      tags:
        - RankMatching
      operationId: getRankMatching
      summary: "랭크 매칭 상세 정보 조회"
      description: "특정 랭크 매칭의 상세 정보를 조회합니다."
      parameters:
        - name: rank_matching_id
          in: path
          description: "랭크 매칭 ID"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          $ref: '#/components/responses/RankMatchingDetailResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/rank-matchings/{instrument}/available:
    get:
      tags:
        - RankMatching
      operationId: getAvailableRankMatchings
      summary: "도전 가능한 랭크 매칭 조회"
      description: "현재 로그인한 회원이 도전 가능한 랭크 매칭 정보를 조회합니다."
      security:
        - BearerAuth: []
      parameters:
        - name: instrument
          in: path
          description: "악기 종류 필터링 (VOCAL, GUITAR, DRUM, BASS)"
          required: true
          schema:
            type: string
            enum: [VOCAL, GUITAR, DRUM, BASS]
      responses:
        '200':
          $ref: '#/components/responses/AvailableRankMatchingsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/rank-matchings/{instrument}/tier-available:
    get:
      tags:
        - RankMatching
      operationId: getTierAvailableRankMatchings
      summary: "악기별 티어 도전/방어 가능 정보 조회"
      description: >
              현재 로그인한 회원이 각 티어별로 도전, 방어, 배치고사가 가능한지 여부와 
              진행 중인 랭크 매칭 정보를 조회합니다. 'availableFirst'는 배치고사 가능 여부, 
              'availableChallenge'는 상위 티어 도전 가능 여부, 'availableDefence'는 
              현재 티어 방어 가능 여부를 나타냅니다. 'ongoingMatching'은 현재 진행 중인 
              도전/방어 정보로, 목표 티어, 유형, 시작일, 만료일, 시도 횟수, 성공 횟수를 
              포함합니다.
      security:
        - BearerAuth: []
      parameters:
        - name: instrument
          in: path
          description: "악기 종류 (VOCAL, GUITAR, DRUM, BASS)"
          required: true
          schema:
            type: string
            enum: [VOCAL, GUITAR, DRUM, BASS]
      responses:
        '200':
          $ref: '#/components/responses/TierAvailabilitiesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'
  /api/rank-matchings/history:
    get:
      tags:
        - RankMatching
      operationId: getRankMatchingHistory
      summary: "회원 랭크 매칭 이력 조회"
      description: "현재 로그인한 회원의 랭크 매칭 이력을 조회합니다. size, page를 쿼리 파라미터로 전달하여 페이징 처리가 가능합니다."
      deprecated: true
      security:
        - BearerAuth: []
      x-spring-paginated: true
      responses:
        '200':
          $ref: '#/components/responses/PageRankMatchingResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/attempts/{attempt_id}:
    get:
      tags:
        - Attempt
      operationId: getAttempt
      summary: "시도 기록 상세 조회"
      description: "특정 시도 기록의 상세 정보를 조회합니다."
      parameters:
        - name: attempt_id
          in: path
          description: "시도 ID"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          $ref: '#/components/responses/AttemptDetailResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/attempts/practice:
    get:
      tags:
        - Attempt
      operationId: getPracticeAttempts
      summary: "연습 모드 시도 기록 조회"
      description: "현재 로그인한 회원의 연습 모드 시도 기록을 조회합니다. size, page를 쿼리 파라미터로 전달하여 페이징 처리가 가능합니다."
      security:
        - BearerAuth: []
      parameters:
        - name: instrument
          in: query
          description: "악기 종류 필터링 (VOCAL, GUITAR, DRUM, BASS)"
          required: false
          schema:
            type: string
            enum: [VOCAL, GUITAR, DRUM, BASS]
      x-spring-paginated: true
      responses:
        '200':
          $ref: '#/components/responses/PageAttemptResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/attempts/rank:
    get:
      tags:
        - Attempt
      operationId: getRankAttempts
      summary: "랭크 모드 시도 기록 조회"
      description: "현재 로그인한 회원의 랭크 모드 시도 기록을 조회합니다. size, page를 쿼리 파라미터로 전달하여 페이징 처리가 가능합니다."
      security:
        - BearerAuth: []
      parameters:
        - name: instrument
          in: query
          description: "악기 종류 필터링 (VOCAL, GUITAR, DRUM, BASS)"
          required: false
          schema:
            type: string
            enum: [VOCAL, GUITAR, DRUM, BASS]
        - name: rankType
          in: query
          description: "랭크 유형 필터링 (FIRST, CHALLENGE, DEFENCE)"
          required: false
          schema:
            type: string
            enum: [FIRST, CHALLENGE, DEFENCE]
      x-spring-paginated: true
      responses:
        '200':
          $ref: '#/components/responses/PageAttemptResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/songs:
    get:
      tags:
        - Song
      operationId: getSongs
      summary: "곡 목록 조회"
      description: "전체 곡 목록을 조회합니다. size, page를 쿼리 파라미터로 전달하여 페이징 처리가 가능합니다."
      x-spring-paginated: true
      responses:
        '200':
          $ref: '#/components/responses/PageSongResponse'

    post:
      tags:
        - Song
      operationId: createSong
      summary: "새로운 곡 등록"
      description: "새로운 곡을 등록합니다."
      deprecated: true
      security:
        - BearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CreateSongRequest'
      responses:
        '201':
          $ref: '#/components/responses/SongResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /songs/{songId}/instruments:
    get:
      tags:
        - Song
      operationId: getSongInstruments
      summary: "특정 곡의 악기별 연주 정보 조회"
      description: "특정 곡의 악기별 연주 정보를 조회합니다."
      security: [ ]
      parameters:
        - $ref: '#/components/parameters/SongId'
      responses:
        '200':
          $ref: '#/components/responses/SongByInstrumentsResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

    post:
      tags:
        - Song
      operationId: addSongInstrument
      summary: "특정 곡에 악기별 연주 정보 추가"
      description: "기존 곡에 새로운 악기별 연주 정보를 추가합니다."
      parameters:
        - $ref: '#/components/parameters/SongId'
      requestBody:
        $ref: '#/components/requestBodies/CreateSongByInstrumentRequest'
      responses:
        '201':
          $ref: '#/components/responses/SongByInstrumentResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/songs/{song_id}:
    get:
      tags:
        - Song
      operationId: getSong
      summary: "곡 상세 정보 조회"
      description: "특정 곡의 상세 정보를 조회합니다."
      parameters:
        - name: song_id
          in: path
          description: "곡 ID"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          $ref: '#/components/responses/SongDetailResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/songs/by-instrument/{instrument}:
    get:
      tags:
        - Song
      operationId: getSongsByInstrument
      summary: "악기별 곡 목록 조회"
      description: "특정 악기에 해당하는 곡 목록을 조회합니다. size, page를 쿼리 파라미터로 전달하여 페이징 처리가 가능합니다."
      parameters:
        - name: instrument
          in: path
          description: "악기 종류 (VOCAL, GUITAR, DRUM, BASS)"
          required: true
          schema:
            type: string
            enum: [VOCAL, GUITAR, DRUM, BASS]
      x-spring-paginated: true
      responses:
        '200':
          $ref: '#/components/responses/PageSongResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /api/songs/by-tier/{tier}:
    get:
      tags:
        - Song
      operationId: getSongsByTier
      summary: "티어별 곡 목록 조회"
      description: "특정 티어에 해당하는 곡 목록을 조회합니다. size, page를 쿼리 파라미터로 전달하여 페이징 처리가 가능합니다."
      parameters:
        - name: tier
          in: path
          description: "티어 등급 (UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND)"
          required: true
          schema:
            type: string
            enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
      x-spring-paginated: true
      responses:
        '200':
          $ref: '#/components/responses/PageSongResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /api/song-packs:
    get:
      tags:
        - SongInstrumentPack
      operationId: getSongPacks
      summary: "곡 팩 목록 조회"
      description: "전체 곡 팩 목록을 조회합니다. size, page를 쿼리 파라미터로 전달하여 페이징 처리가 가능합니다."
      deprecated: true
      x-spring-paginated: true
      responses:
        '200':
          $ref: '#/components/responses/PageSongPackResponse'

  /api/song-packs/{song_instrument_pack_id}:
    get:
      tags:
        - SongInstrumentPack
      operationId: getSongPack
      summary: "곡 팩 상세 정보 조회"
      description: "특정 곡 팩의 상세 정보를 조회합니다."
      parameters:
        - name: song_instrument_pack_id
          in: path
          description: "곡 팩 ID"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          $ref: '#/components/responses/SongPackDetailResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/song-packs/by-tier/{tier}:
    get:
      tags:
        - SongInstrumentPack
      operationId: getSongPacksByTier
      summary: "티어별 곡 팩 목록 조회"
      description: "특정 티어에 해당하는 곡 팩 목록을 조회합니다. size, page를 쿼리 파라미터로 전달하여 페이징 처리가 가능합니다."
      parameters:
        - name: tier
          in: path
          description: "티어 등급 (UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND)"
          required: true
          schema:
            type: string
            enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
      x-spring-paginated: true
      responses:
        '200':
          $ref: '#/components/responses/PageSongPackResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /api/song-packs/by-instrument/{instrument}:
    get:
      tags:
        - SongInstrumentPack
      operationId: getSongPacksByInstrument
      summary: "악기별 곡 팩 목록 조회"
      description: "특정 악기에 해당하는 곡 팩 목록을 조회합니다. size, page를 쿼리 파라미터로 전달하여 페이징 처리가 가능합니다."
      parameters:
        - name: instrument
          in: path
          description: "악기 종류 (VOCAL, GUITAR, DRUM, BASS)"
          required: true
          schema:
            type: string
            enum: [VOCAL, GUITAR, DRUM, BASS]
      x-spring-paginated: true
      responses:
        '200':
          $ref: '#/components/responses/PageSongPackResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /api/songs/instruments/{song_by_instrument_id}:
    get:
      tags:
        - SongByInstrument
      operationId: getSongByInstrument
      summary: "악기별 곡 상세 정보 조회"
      description: "특정 악기별 곡의 상세 정보를 조회합니다."
      parameters:
        - name: song_by_instrument_id
          in: path
          description: "악기별 곡 ID"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          $ref: '#/components/responses/SongByInstrumentResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/songs/{song_id}/instruments:
    get:
      tags:
        - SongByInstrument
      operationId: getSongInstruments
      summary: "곡의 악기별 버전 목록 조회"
      description: "특정 곡의 악기별 버전 목록을 조회합니다."
      parameters:
        - name: song_id
          in: path
          description: "곡 ID"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          $ref: '#/components/responses/SongInstrumentsResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/tiers:
    get:
      tags:
        - Tier
      operationId: getTierInfo
      summary: "티어 시스템 기본 정보 조회"
      description: "티어 시스템에 대한 기본 정보를 조회합니다. 티어별 승급/강등 조건, 점수 기준 등이 포함됩니다."
      responses:
        '200':
          $ref: '#/components/responses/TierSystemResponse'

  /api/tiers/defence-period:
    get:
      tags:
        - Tier
      operationId: getDefencePeriod
      summary: "티어 방어 기간 정보 조회"
      description: "현재 로그인한 회원의 티어 방어 기간 정보를 조회합니다."
      security:
        - BearerAuth: []
      parameters:
        - name: instrument
          in: query
          description: "악기 종류 (VOCAL, GUITAR, DRUM, BASS)"
          required: true
          schema:
            type: string
            enum: [VOCAL, GUITAR, DRUM, BASS]
      responses:
        '200':
          $ref: '#/components/responses/DefencePeriodResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /api/analysis/record:
    post:
      tags:
        - Analysis
      operationId: analyzeRecord
      summary: "연주 녹음 분석 요청"
      description: "연주 녹음을 제출하고 분석을 요청합니다."
      deprecated: true
      security:
        - BearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/AnalysisRequest'
      responses:
        '202':
          $ref: '#/components/responses/AnalysisRequestedResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/analysis/result/{attempt_id}:
    get:
      tags:
        - Analysis
      operationId: getAnalysisResult
      summary: "음성 분석 결과 조회"
      description: "특정 시도에 대한 음성 분석 결과를 조회합니다."
      deprecated: true
      parameters:
        - name: attempt_id
          in: path
          description: "시도 ID"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          $ref: '#/components/responses/AnalysisResultResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/instruments:
    get:
      tags:
        - Instrument
      operationId: getInstruments
      summary: "지원되는 악기 목록 조회"
      description: "지원되는 악기 목록 정보를 조회합니다."
      deprecated: true
      responses:
        '200':
          $ref: '#/components/responses/InstrumentsResponse'

security:
  - BearerAuth: []