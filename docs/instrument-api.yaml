openapi: 3.0.0
info:
  title: Band API
  description: 밴드 관련 API
  version: 1.0.0
  contact:
    name: 딩가딩
servers:
  - url: http://localhost:8080/api/
    description: Local development server

tags:
  - name: Instrument
    description: 악기 관련 API


paths:
  /members/{memberId}/instruments:
    get:
      tags:
        - Instrument
      deprecated: false
      operationId: getInstruments
      summary: 회원의 악기 목록 조회
      description: 회원이 다룰 수 있는 악기 목록과 티어 정보를 조회합니다.
      parameters:
        - $ref: '#/components/parameters/MemberId'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 악기 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberInstrumentTier'
        '404':
          description: 회원을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

    post:
      tags:
        - Instrument
      operationId: addInstrument
      summary: 회원의 악기 정보 추가
      description: 회원이 다룰 수 있는 악기 정보를 추가합니다.
      parameters:
        - $ref: '#/components/parameters/MemberId'
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddInstrumentRequest'
      responses:
        '201':
          description: 악기 정보 추가 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberInstrumentTier'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '404':
          description: 회원을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '409':
          description: 이미 등록된 악기
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

  /members/{memberId}/instruments/{instrumentType}:
    put:
      tags:
        - Instrument
      deprecated: true
      operationId: updateInstrument
      summary: 회원의 특정 악기 정보 업데이트
      description: 특정 악기에 대한 정보를 업데이트합니다.
      parameters:
        - $ref: '#/components/parameters/MemberId'
        - $ref: '#/components/parameters/InstrumentType'
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInstrumentRequest'
      responses:
        '200':
          description: 악기 정보 업데이트 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberInstrumentTier'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '404':
          description: 회원 또는 악기 정보를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

    delete:
      tags:
        - Instrument
      deprecated: true
      operationId: deleteInstrument
      summary: 회원의 특정 악기 정보 삭제
      description: 특정 악기 정보를 삭제합니다.
      parameters:
        - $ref: '#/components/parameters/MemberId'
        - $ref: '#/components/parameters/InstrumentType'
      security:
        - BearerAuth: []
      responses:
        '204':
          description: 악기 정보 삭제 성공
        '404':
          description: 회원 또는 악기 정보를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

  /members/{memberId}/instruments/{instrumentType}/challenge:
    post:
      tags:
        - Instrument
      deprecated: false
      operationId: startInstrumentChallenge
      summary: 회원의 악기 티어 도전 시작
      description: 회원의 특정 악기에 대한 티어 도전을 시작합니다. 도전 횟수, 배치고사 여부 등을 처리합니다.
      parameters:
        - $ref: '#/components/parameters/MemberId'
        - $ref: '#/components/parameters/InstrumentType'
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChallengeRequest'
      responses:
        '201':
          description: 티어 도전 시작 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  challengeId:
                    type: integer
                    format: int64
                    description: 생성된 챌린지 ID
                  message:
                    type: string
                    description: 도전 시작 메시지
        '400':
          description: 잘못된 요청 (도전 횟수 부족 등)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '404':
          description: 회원 또는 악기 정보를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

  /members/{memberId}/instruments/{instrumentType}/tier-history:
    get:
      tags:
        - Instrument
      deprecated: false
      operationId: getInstrumentTierHistory
      summary: 회원의 악기 티어 변경 이력 조회
      description: 특정 악기에 대한 티어 변경 이력을 조회합니다.
      parameters:
        - $ref: '#/components/parameters/MemberId'
        - $ref: '#/components/parameters/InstrumentType'
        - name: page
          in: query
          description: 페이지 번호 (0부터 시작)
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          description: 페이지 크기
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 티어 변경 이력 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/TierLog'
                  pageable:
                    type: object
                    properties:
                      page:
                        type: integer
                        description: 현재 페이지 번호
                      size:
                        type: integer
                        description: 페이지 크기
                      totalElements:
                        type: integer
                        description: 전체 항목 수
                      totalPages:
                        type: integer
                        description: 전체 페이지 수
                    required:
                      - page
                      - size
                      - totalElements
                      - totalPages
                required:
                  - content
                  - pageable
        '404':
          description: 회원 또는 악기 정보를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

  /members/{memberId}/instruments/{instrumentType}/skill:
    get:
      tags:
        - Instrument
      deprecated: false
      operationId: getInstrumentSkill
      summary: 회원의 악기 스킬 정보 조회
      description: 특정 악기에 대한 상세 기술(박자, 음정, 음색) 정보를 조회합니다.
      parameters:
        - $ref: '#/components/parameters/MemberId'
        - $ref: '#/components/parameters/InstrumentType'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 악기 스킬 정보 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstrumentSkill'
        '404':
          description: 회원 또는 악기 정보를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'JWT 인증 토큰을 사용합니다. 예: Bearer {token}'

  parameters:
    MemberId:
      name: memberId
      in: path
      description: UUID 형식의 회원 ID
      required: true
      schema:
        type: string
        format: uuid
        example: "7466B6F3-5192-44D1-AA80-375767C166C5"

    InstrumentType:
      name: instrumentType
      in: path
      description: 악기 타입
      required: true
      schema:
        type: string
        enum: [VOCAL, GUITAR, DRUM, BASS]
        example: "GUITAR"

  schemas:
    MemberInstrumentTier:
      type: object
      properties:
        memberId:
          type: string
          format: uuid
          description: 회원 ID
        instrument:
          type: string
          enum: [VOCAL, GUITAR, DRUM, BASS]
          description: 악기 타입
        tier:
          type: string
          enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
          description: 악기 티어 등급
        lastChallenged:
          type: string
          format: date
          description: 마지막 도전 날짜
        challengeCount:
          type: integer
          description: 남은 챌린지 횟수
          default: 5
          minimum: 0
          maximum: 5
        successCount:
          type: integer
          description: 해당 티어에서의 성공 횟수
          minimum: 0
        firstChallenge:
          type: boolean
          description: 배치고사 진행 여부
      required:
        - memberId
        - instrument
        - tier
        - challengeCount
        - successCount

    InstrumentSkill:
      type: object
      properties:
        instrumentSkillId:
          type: integer
          format: int64
          description: 악기 기술 ID
        memberId:
          type: string
          format: uuid
          description: 회원 ID
        instrumentType:
          type: string
          enum: [VOCAL, GUITAR, DRUM, BASS]
          description: 악기 타입
        beat:
          type: integer
          description: 박자 점수
          minimum: 0
          maximum: 100
        tune:
          type: integer
          description: 음정 점수
          minimum: 0
          maximum: 100
        tone:
          type: integer
          description: 음색 점수
          minimum: 0
          maximum: 100
      required:
        - memberId
        - instrumentType

    TierLog:
      type: object
      properties:
        tierLogId:
          type: integer
          format: int64
          description: 티어 로그 ID
        memberId:
          type: string
          format: uuid
          description: 회원 ID
        tier:
          type: string
          enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
          description: 변경된 티어 등급
        changedDate:
          type: string
          format: date
          description: 티어 변경 날짜
        instrument:
          type: string
          enum: [VOCAL, GUITAR, DRUM, BASS]
          description: 악기 타입
      required:
        - memberId
        - tier
        - changedDate
        - instrument

    ChallengeRequest:
      type: object
      properties:
        songByInstrumentId:
          type: integer
          format: int64
          description: 도전할 곡의 악기별 ID
        challengeType:
          type: string
          enum: [FIRST, PRACTICE, CHALLENGE, DEFENSE]
          description: 챌린지 타입
          default: CHALLENGE
      required:
        - songByInstrumentId

    UpdateInstrumentSkillRequest:
      type: object
      properties:
        beat:
          type: integer
          description: 박자 점수
          minimum: 0
          maximum: 100
        tune:
          type: integer
          description: 음정 점수
          minimum: 0
          maximum: 100
        tone:
          type: integer
          description: 음색 점수
          minimum: 0
          maximum: 100

    AddInstrumentRequest:
      type: object
      properties:
        instrument:
          type: string
          enum: [VOCAL, GUITAR, DRUM, BASS]
          description: 악기 타입
        tier:
          type: string
          enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
          description: 초기 티어 등급
          default: UNRANKED
      required:
        - instrument

    UpdateInstrumentRequest:
      type: object
      properties:
        tier:
          type: string
          enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
          description: 변경할 티어 등급
        challengeCount:
          type: integer
          description: 챌린지 횟수 조정
          minimum: 0
          maximum: 5
        successCount:
          type: integer
          description: 성공 횟수 조정
          minimum: 0
      required:
        - tier

    ProblemDetail:
      title: Problem Detail
      description: 모든 에러 응답의 스키마
      type: object
      properties:
        type:
          title: Type
          description: 에러 응답 원인 URL
          type: string
          format: uri
          example: 'http://localhost:8080/api/members/instruments'
        title:
          title: Title
          description: 에러 타이틀
          type: string
          example: 'ResourceNotFoundException'
        status:
          title: Status
          description: HTTP 상태 코드
          type: integer
          format: int32
          minimum: 400
          maximum: 600
          exclusiveMaximum: true
          example: 404
        detail:
          title: Detail
          description: 상세 에러 메시지
          type: string
          example: 'Member with ID 123 not found'
        timestamp:
          title: Timestamp
          description: 에러 발생 시간
          type: string
          format: date-time
          example: '2024-03-21T14:59:21.3820407Z'
      required:
        - type
        - title
        - status
        - detail
        - timestamp
