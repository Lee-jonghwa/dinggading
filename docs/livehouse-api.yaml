openapi: 3.0.0
info:
  title: 딩가딩 LiveHouse API
  version: 1.0.0
  description: "라이브하우스 관련 API 명세서"
  
servers:
  - url: https://localhost:8080
    description: 스프링 서버
  - url: https://localhost:8081
    description: 목 서버
#
tags:
  - name: LiveHouse
    description: 라이브 하우스 관리 관련 API - 개발전
  - name: Performer
    description: 공연자 관리 관련 API - 개발전
  - name: Recording
    description: 녹음 및 녹화 관리 관련 API - 개발전
  - name: Chat
    description: 채팅 관련 API - 개발전

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT 인증 토큰을 사용합니다. 예: Bearer {token}"

  parameters:
    # 경로 파라미터 모음
    LivehouseId:
      name: livehouseId
      in: path
      description: "라이브하우스 ID"
      required: true
      schema:
        type: integer
        format: int64

    MemberId:
      name: memberId
      in: path
      description: "회원 ID"
      required: true
      schema:
        type: string
        format: uuid

    RecordingId:
      name: recordingId
      in: path
      description: "녹음 ID"
      required: true
      schema:
        type: integer
        format: int64

    MessageId:
      name: messageId
      in: path
      description: "메시지 ID"
      required: true
      schema:
        type: integer
        format: int64

    # 쿼리 파라미터 모음
    OrderByParam:
      name: orderBy
      in: query
      description: "정렬 기준"
      required: false
      schema:
        type: string
        enum: [popularity, recent]
        default: recent

    SearchKeywordParam:
      name: keyword
      in: query
      description: "검색 키워드"
      required: false
      schema:
        type: string

    SearchCategoryParam:
      name: category
      in: query
      description: "검색 카테고리"
      required: false
      schema:
        type: string
        enum: [title, master, tags]

    LimitParam:
      name: limit
      in: query
      description: "조회할 항목 수"
      required: false
      schema:
        type: integer
        default: 20

  schemas:
    # 에러 응답 스키마
    ProblemDetail:
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        instance:
          type: string

    # 열거형 정의
    RoleEnum:
      type: string
      enum: [MASTER, VICE_MASTER, PERFORMER, PARTICIPANT]
      description: "참가자 역할"

    InstrumentEnum:
      type: string
      enum: [VOCAL, GUITAR, DRUM, BASS]
      description: "악기 유형"

    TierEnum:
      type: string
      enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
      description: "티어 등급"

    # 기본 DTO 스키마
    LiveHouseDTO:
      type: object
      properties:
        liveHouseId:
          type: integer
          format: int64
          description: "라이브하우스 ID"
        masterId:
          type: string
          format: uuid
          description: "방장 ID"
        masterNickname:
          type: string
          description: "방장 닉네임"
        viceId:
          type: string
          format: uuid
          description: "부방장 ID"
        viceNickname:
          type: string
          description: "부방장 닉네임"
        title:
          type: string
          description: "라이브하우스 제목"
        description:
          type: string
          description: "설명"
        tags:
          type: string
          description: "태그 목록"
        isPublic:
          type: boolean
          description: "공개 여부"
        password:
          type: string
          description: "비밀번호 (비공개 방인 경우)"
        inviteUrl:
          type: string
          description: "초대 URL"
        pinnedMessage:
          type: string
          description: "고정된 메시지"
        maxSize:
          type: integer
          description: "최대 인원 수"
        currentSize:
          type: integer
          description: "현재 인원 수"
        profileImageUrl:
          type: string
          description: "프로필 이미지 URL"
        createdAt:
          type: string
          format: date-time
          description: "생성 시간"
        updatedAt:
          type: string
          format: date-time
          description: "수정 시간"
      required:
        - liveHouseId
        - masterId
        - title
        - isPublic
        - maxSize

    LiveHouseParticipantDTO:
      type: object
      properties:
        liveHouseParticipantId:
          type: integer
          format: int64
          description: "참가자 ID"
        liveHouseId:
          type: integer
          format: int64
          description: "라이브하우스 ID"
        participantId:
          type: string
          format: uuid
          description: "회원 ID"
        nickname:
          type: string
          description: "회원 닉네임"
        profileImgUrl:
          type: string
          description: "회원 프로필 이미지"
        role:
          $ref: '#/components/schemas/RoleEnum'
        joinedAt:
          type: string
          format: date-time
          description: "참가 시간"
      required:
        - liveHouseParticipantId
        - liveHouseId
        - participantId
        - role

    PerformerDTO:
      type: object
      properties:
        performerId:
          type: integer
          format: int64
          description: "연주자 ID"
        liveHouseId:
          type: integer
          format: int64
          description: "라이브하우스 ID"
        memberId:
          type: string
          format: uuid
          description: "회원 ID"
        nickname:
          type: string
          description: "회원 닉네임"
        profileImgUrl:
          type: string
          description: "회원 프로필 이미지"
        instrument:
          $ref: '#/components/schemas/InstrumentEnum'
        tier:
          $ref: '#/components/schemas/TierEnum'
        assignedAt:
          type: string
          format: date-time
          description: "배정 시간"
      required:
        - performerId
        - liveHouseId
        - memberId
        - instrument

    RecordingDTO:
      type: object
      properties:
        recordId:
          type: integer
          format: int64
          description: "녹음 ID"
        liveHouseId:
          type: integer
          format: int64
          description: "라이브하우스 ID"
        title:
          type: string
          description: "녹음 제목"
        recordUrl:
          type: string
          description: "녹음 파일 URL"
        duration:
          type: integer
          description: "녹음 길이 (초)"
        recordedBy:
          type: string
          format: uuid
          description: "녹음한 회원 ID"
        recorderNickname:
          type: string
          description: "녹음한 회원 닉네임"
        startedAt:
          type: string
          format: date-time
          description: "녹음 시작 시간"
        endedAt:
          type: string
          format: date-time
          description: "녹음 종료 시간"
      required:
        - recordId
        - liveHouseId
        - title
        - recordUrl
        - startedAt
        - endedAt

    ChatMessageDTO:
      type: object
      properties:
        messageId:
          type: integer
          format: int64
          description: "메시지 ID"
        liveHouseId:
          type: integer
          format: int64
          description: "라이브하우스 ID"
        senderId:
          type: string
          format: uuid
          description: "발신자 ID"
        senderNickname:
          type: string
          description: "발신자 닉네임"
        senderProfileUrl:
          type: string
          description: "발신자 프로필 이미지"
        content:
          type: string
          description: "메시지 내용"
        sentAt:
          type: string
          format: date-time
          description: "발송 시간"
        isPinned:
          type: boolean
          description: "고정 여부"
      required:
        - messageId
        - liveHouseId
        - senderId
        - content
        - sentAt

    # 페이지네이션 관련 스키마
    PageableDTO:
      type: object
      properties:
        page:
          type: integer
          description: "현재 페이지 번호"
        size:
          type: integer
          description: "페이지 크기"
        totalElements:
          type: integer
          description: "전체 요소 수"
        totalPages:
          type: integer
          description: "전체 페이지 수"
      required:
        - page
        - size
        - totalElements
        - totalPages

    # 페이지네이션된 응답 스키마
    PageLiveHouseDTO:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/LiveHouseDTO'
        pageable:
          $ref: '#/components/schemas/PageableDTO'
      required:
        - content
        - pageable
      x-spring-paginated: true

    # 복합 응답 스키마
    LiveHouseDetailDTO:
      type: object
      properties:
        liveHouse:
          $ref: '#/components/schemas/LiveHouseDTO'
        participants:
          type: array
          items:
            $ref: '#/components/schemas/LiveHouseParticipantDTO'
        performers:
          type: array
          items:
            $ref: '#/components/schemas/PerformerDTO'
        userRole:
          $ref: '#/components/schemas/RoleEnum'
      required:
        - liveHouse
        - participants
        - performers
        - userRole

  requestBodies:
    CreateLiveHouseRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                description: "라이브하우스 제목"
              description:
                type: string
                description: "설명"
              tags:
                type: string
                description: "태그 목록"
              isPublic:
                type: boolean
                description: "공개 여부"
              password:
                type: string
                description: "비밀번호 (비공개 방인 경우)"
              maxSize:
                type: integer
                description: "최대 인원 수"
              profileImageUrl:
                type: string
                description: "프로필 이미지 URL"
            required:
              - title
              - isPublic
              - maxSize

    UpdateLiveHouseRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                description: "라이브하우스 제목"
              description:
                type: string
                description: "설명"
              tags:
                type: string
                description: "태그 목록"
              isPublic:
                type: boolean
                description: "공개 여부"
              password:
                type: string
                description: "비밀번호 (비공개 방인 경우)"
              maxSize:
                type: integer
                description: "최대 인원 수"
              profileImageUrl:
                type: string
                description: "프로필 이미지 URL"

    InviteRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              memberIds:
                type: array
                items:
                  type: string
                  format: uuid
                description: "초대할 회원 ID 목록"
            required:
              - memberIds

    KickMemberRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              memberId:
                type: string
                format: uuid
                description: "강퇴할 회원 ID"
              reason:
                type: string
                description: "강퇴 사유"
              addToBlacklist:
                type: boolean
                description: "블랙리스트 추가 여부"
                default: false
            required:
              - memberId

    UpdateRoleRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              memberId:
                type: string
                format: uuid
                description: "회원 ID"
              role:
                type: string
                enum: [VICE_MASTER, PERFORMER, PARTICIPANT]
                description: "변경할 역할"
            required:
              - memberId
              - role

    TransferOwnerRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              newOwnerId:
                type: string
                format: uuid
                description: "새 방장 ID"
            required:
              - newOwnerId

    AddPerformerRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              memberId:
                type: string
                format: uuid
                description: "회원 ID"
              instrument:
                $ref: '#/components/schemas/InstrumentEnum'
            required:
              - memberId
              - instrument

    StartRecordingRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                description: "녹음 제목"
            required:
              - title

    SendChatRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              content:
                type: string
                description: "메시지 내용"
            required:
              - content

    PinMessageRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              messageId:
                type: integer
                format: int64
                description: "고정할 메시지 ID"
            required:
              - messageId

  responses:
    # 성공 응답
    SuccessNoContent:
      description: "성공적으로 처리되었습니다."
      content: {}

    # 비즈니스 응답
    LiveHouseResponse:
      description: "라이브하우스 정보"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LiveHouseDTO'

    LiveHouseListResponse:
      description: "라이브하우스 목록"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PageLiveHouseDTO'

    LiveHouseDetailResponse:
      description: "라이브하우스 상세 정보"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LiveHouseDetailDTO'

    ParticipantResponse:
      description: "참가자 정보"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LiveHouseParticipantDTO'

    ParticipantListResponse:
      description: "참가자 목록"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/LiveHouseParticipantDTO'

    PerformerResponse:
      description: "연주자 정보"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PerformerDTO'

    PerformerListResponse:
      description: "연주자 목록"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PerformerDTO'

    RecordingResponse:
      description: "녹음 정보"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RecordingDTO'

    RecordingListResponse:
      description: "녹음 목록"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/RecordingDTO'

    ChatMessageResponse:
      description: "채팅 메시지 정보"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChatMessageDTO'

    ChatMessageListResponse:
      description: "채팅 메시지 목록"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ChatMessageDTO'

    InviteUrlResponse:
      description: "초대 URL"
      content:
        application/json:
          schema:
            type: object
            properties:
              inviteUrl:
                type: string
                description: "초대 URL"
            required:
              - inviteUrl

    RecordingStartResponse:
      description: "녹음 시작 정보"
      content:
        application/json:
          schema:
            type: object
            properties:
              recordingId:
                type: integer
                format: int64
                description: "녹음 ID"
              startTime:
                type: string
                format: date-time
                description: "녹음 시작 시간"
            required:
              - recordingId
              - startTime

    # 에러 응답
    NotFoundException:
      description: "요청한 리소스를 찾을 수 없습니다."
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemDetail'
              - type: object
                properties:
                  title:
                    type: string
                    example: "리소스를 찾을 수 없습니다."

    BadRequestException:
      description: "잘못된 요청입니다."
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemDetail'
              - type: object
                properties:
                  title:
                    type: string
                    example: "잘못된 요청입니다."

    UnauthorizedException:
      description: "인증되지 않은 요청입니다."
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemDetail'
              - type: object
                properties:
                  title:
                    type: string
                    example: "인증되지 않은 요청입니다."

    ForbiddenException:
      description: "접근 권한이 없습니다."
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemDetail'
              - type: object
                properties:
                  title:
                    type: string
                    example: "접근 권한이 없습니다."

security:
  - BearerAuth: []

paths:
  /livehouses:
    get:
      tags:
        - LiveHouse
      operationId: getLiveHouses
      summary: "라이브하우스 목록 조회"
      description: "라이브하우스 전체 목록을 조회합니다. 인기순, 최신순 등 정렬 옵션을 지원하며, 즐겨찾기/팔로우한 사용자가 있는 라이브하우스를 우선 정렬합니다. 페이징 처리된 결과를 반환합니다."
      parameters:
        - $ref: '#/components/parameters/OrderByParam'
      x-spring-paginated: true
      responses:
        '200':
          $ref: '#/components/responses/LiveHouseListResponse'

    post:
      tags:
        - LiveHouse
      operationId: createLiveHouse
      summary: "라이브하우스 방 개설"
      description: "라이브하우스 방을 개설합니다. 제목, 설명, 최대 인원, 태그, 프로필 이미지 등을 설정하고, 생성 시 방장 권한이 자동으로 부여됩니다."
      security:
        - BearerAuth: [ ]
      requestBody:
        $ref: '#/components/requestBodies/CreateLiveHouseRequest'
      responses:
        '201':
          $ref: '#/components/responses/LiveHouseResponse'
        '400':
          $ref: '#/components/responses/BadRequestException'

  /livehouses/search:
    get:
      tags:
        - LiveHouse
      operationId: searchLiveHouses
      summary: "라이브하우스 검색"
      description: "카테고리(제목, 방장, 태그 등)와 키워드로 라이브하우스를 검색합니다. 페이징 처리된 결과를 반환합니다."
      parameters:
        - $ref: '#/components/parameters/SearchKeywordParam'
        - $ref: '#/components/parameters/SearchCategoryParam'
      x-spring-paginated: true
      responses:
        '200':
          $ref: '#/components/responses/LiveHouseListResponse'

  /livehouses/{livehouseId}:
    get:
      tags:
        - LiveHouse
      operationId: getLiveHouse
      summary: "라이브하우스 상세 정보 조회"
      description: "라이브하우스 입장 및 상세 정보를 조회합니다. 참여자 목록, 방 정보, 권한 정보 등을 제공합니다."
      parameters:
        - $ref: '#/components/parameters/LivehouseId'
      responses:
        '200':
          $ref: '#/components/responses/LiveHouseDetailResponse'
        '404':
          $ref: '#/components/responses/NotFoundException'

    patch:
      tags:
        - LiveHouse
      operationId: updateLiveHouse
      summary: "라이브하우스 설정 변경"
      description: "라이브하우스 설정을 변경합니다. 제목, 설명, 태그, 최대 인원, 공개 여부 등을 수정할 수 있습니다."
      security:
        - BearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/LivehouseId'
      requestBody:
        $ref: '#/components/requestBodies/UpdateLiveHouseRequest'
      responses:
        '200':
          $ref: '#/components/responses/LiveHouseResponse'
        '400':
          $ref: '#/components/responses/BadRequestException'
        '403':
          $ref: '#/components/responses/ForbiddenException'
        '404':
          $ref: '#/components/responses/NotFoundException'

  /livehouses/{livehouseId}/leave:
    get:
      tags:
        - LiveHouse
      operationId: leaveLiveHouse
      summary: "라이브하우스 방 나가기"
      description: "라이브하우스 방을 나갑니다. 방장인 경우 부방장에게 권한을 위임하거나 방을 종료 처리합니다."
      parameters:
        - $ref: '#/components/parameters/LivehouseId'
      responses:
        '204':
          $ref: '#/components/responses/SuccessNoContent'
        '400':
          $ref: '#/components/responses/BadRequestException'
        '404':
          $ref: '#/components/responses/NotFoundException'

  /livehouses/{livehouseId}/invite:
    post:
      tags:
        - LiveHouse
      operationId: inviteToLiveHouse
      summary: "다른 사용자 초대"
      description: "다른 사용자를 라이브하우스에 초대합니다. 초대 URL을 생성하거나 알림을 발송합니다."
      parameters:
        - $ref: '#/components/parameters/LivehouseId'
      requestBody:
        $ref: '#/components/requestBodies/InviteRequest'
      responses:
        '200':
          $ref: '#/components/responses/InviteUrlResponse'
        '400':
          $ref: '#/components/responses/BadRequestException'
        '403':
          $ref: '#/components/responses/ForbiddenException'
        '404':
          $ref: '#/components/responses/NotFoundException'

  /livehouses/{livehouseId}/kick:
    delete:
      tags:
        - LiveHouse
      operationId: kickMember
      summary: "사용자 강퇴"
      description: "사용자를 라이브하우스에서 강퇴합니다. 강퇴 사유를 설정하고 블랙리스트에 추가할 수 있습니다."
      security:
        - BearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/LivehouseId'
      requestBody:
        $ref: '#/components/requestBodies/KickMemberRequest'
      responses:
        '204':
          $ref: '#/components/responses/SuccessNoContent'
        '400':
          $ref: '#/components/responses/BadRequestException'
        '403':
          $ref: '#/components/responses/ForbiddenException'
        '404':
          $ref: '#/components/responses/NotFoundException'

  /livehouses/{livehouseId}/settings:
    patch:
      tags:
        - LiveHouse
      operationId: updateLiveHouseSettings
      summary: "라이브하우스 권한 설정"
      description: "라이브하우스의 참가자 역할을 설정합니다. 방장, 부방장, 연주자, 일반 참여자 등의 역할을 설정할 수 있습니다."
      security:
        - BearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/LivehouseId'
      requestBody:
        $ref: '#/components/requestBodies/UpdateRoleRequest'
      responses:
        '200':
          $ref: '#/components/responses/ParticipantResponse'
        '400':
          $ref: '#/components/responses/BadRequestException'
        '403':
          $ref: '#/components/responses/ForbiddenException'
        '404':
          $ref: '#/components/responses/NotFoundException'

  /livehouses/{livehouseId}/transfer-owner:
    post:
      tags:
        - LiveHouse
      operationId: transferOwner
      summary: "방장 권한 이전"
      description: "다른 참여자에게 방장 권한을 이전합니다."
      security:
        - BearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/LivehouseId'
      requestBody:
        $ref: '#/components/requestBodies/TransferOwnerRequest'
      responses:
        '200':
          $ref: '#/components/responses/LiveHouseResponse'
        '400':
          $ref: '#/components/responses/BadRequestException'
        '403':
          $ref: '#/components/responses/ForbiddenException'
        '404':
          $ref: '#/components/responses/NotFoundException'

  /livehouses/{livehouseId}/performers:
    post:
      tags:
        - Performer
      operationId: addPerformer
      summary: "연주자 추가"
      description: "특정 참여자에게 연주 권한을 부여합니다."
      security:
        - BearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/LivehouseId'
      requestBody:
        $ref: '#/components/requestBodies/AddPerformerRequest'
      responses:
        '201':
          $ref: '#/components/responses/PerformerResponse'
        '400':
          $ref: '#/components/responses/BadRequestException'
        '403':
          $ref: '#/components/responses/ForbiddenException'
        '404':
          $ref: '#/components/responses/NotFoundException'

  /livehouses/{livehouseId}/performers/{memberId}:
    delete:
      tags:
        - Performer
      operationId: removePerformer
      summary: "연주자 제거"
      description: "특정 참여자의 연주 권한을 제거합니다."
      security:
        - BearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/LivehouseId'
        - $ref: '#/components/parameters/MemberId'
      responses:
        '204':
          $ref: '#/components/responses/SuccessNoContent'
        '403':
          $ref: '#/components/responses/ForbiddenException'
        '404':
          $ref: '#/components/responses/NotFoundException'

  /livehouses/{livehouseId}/recordings/start:
    post:
      tags:
        - Recording
      operationId: startRecording
      summary: "라이브 연주 녹음 시작"
      description: "현재 진행 중인 연주 세션 녹음을 시작합니다."
      security:
        - BearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/LivehouseId'
      requestBody:
        $ref: '#/components/requestBodies/StartRecordingRequest'
      responses:
        '201':
          $ref: '#/components/responses/RecordingStartResponse'
        '400':
          $ref: '#/components/responses/BadRequestException'
        '403':
          $ref: '#/components/responses/ForbiddenException'
        '404':
          $ref: '#/components/responses/NotFoundException'

  /livehouses/{livehouseId}/recordings/stop:
    post:
      tags:
        - Recording
      operationId: stopRecording
      summary: "라이브 연주 녹음 종료"
      description: "녹음을 종료하고 저장합니다."
      security:
        - BearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/LivehouseId'
      responses:
        '200':
          $ref: '#/components/responses/RecordingResponse'
        '400':
          $ref: '#/components/responses/BadRequestException'
        '403':
          $ref: '#/components/responses/ForbiddenException'
        '404':
          $ref: '#/components/responses/NotFoundException'

  /livehouses/{livehouseId}/recordings:
    get:
      tags:
        - Recording
      operationId: getLiveHouseRecordings
      summary: "라이브하우스 녹음 조회"
      description: "해당 라이브에서 저장된 녹음을 조회합니다."
      security:
        - BearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/LivehouseId'
      responses:
        '200':
          $ref: '#/components/responses/RecordingListResponse'
        '403':
          $ref: '#/components/responses/ForbiddenException'
        '404':
          $ref: '#/components/responses/NotFoundException'

  /livehouses/{livehouseId}/chat:
    get:
      tags:
        - Chat
      operationId: getLiveHouseChat
      summary: "라이브하우스 채팅 내역 조회"
      description: "해당 방의 채팅 메시지 내역을 조회합니다."
      parameters:
        - $ref: '#/components/parameters/LivehouseId'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          $ref: '#/components/responses/ChatMessageListResponse'
        '403':
          $ref: '#/components/responses/ForbiddenException'
        '404':
          $ref: '#/components/responses/NotFoundException'

    post:
      tags:
        - Chat
      operationId: sendLiveHouseChat
      summary: "채팅 메시지 전송"
      description: "라이브하우스 내 채팅 메시지를 전송합니다."
      parameters:
        - $ref: '#/components/parameters/LivehouseId'
      requestBody:
        $ref: '#/components/requestBodies/SendChatRequest'
      responses:
        '201':
          $ref: '#/components/responses/ChatMessageResponse'
        '400':
          $ref: '#/components/responses/BadRequestException'
        '403':
          $ref: '#/components/responses/ForbiddenException'
        '404':
          $ref: '#/components/responses/NotFoundException'

  /livehouses/{livehouseId}/pin-message:
    post:
      tags:
        - Chat
      operationId: pinMessage
      summary: "메시지 고정"
      description: "중요 공지나 안내사항을 상단에 고정합니다."
      security:
        - BearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/LivehouseId'
      requestBody:
        $ref: '#/components/requestBodies/PinMessageRequest'
      responses:
        '200':
          $ref: '#/components/responses/ChatMessageResponse'
        '400':
          $ref: '#/components/responses/BadRequestException'
        '403':
          $ref: '#/components/responses/ForbiddenException'
        '404':
          $ref: '#/components/responses/NotFoundException'