openapi: 3.0.0
info:
  title: 딩가딩 Member API
  version: 1.0.0
  description: "딩가딩 서비스의 Member Aggregate와 관련된 API를 정의합니다. 회원 정보, 악기별 티어, 스킬, 활동 내역 등을 관리하는 API를 포함합니다."

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT 인증 토큰을 사용합니다. 예: Bearer {token}"

  schemas:
    MemberDTO:
      type: object
      properties:
        memberId:
          type: string
          format: uuid
          description: "회원 고유 식별자"
        username:
          type: string
          description: "로그인 아이디"
        nickname:
          type: string
          description: "닉네임"
        email:
          type: string
          format: email
          description: "이메일 주소"
        profileImgUrl:
          type: string
          description: "프로필 이미지 URL"
        gender:
          type: string
          enum: [MALE, FEMALE, OTHER]
          description: "성별"
        age:
          type: integer
          description: "나이"
        createdAt:
          type: string
          format: date
          description: "가입일 (이 날짜로부터 7일 이내에 배치고사 완료하지 않으면 아이언)"
      required:
        - memberId
        - username
        - nickname
        - profileImgUrl

    MemberInstrumentTierDTO:
      type: object
      properties:
        instrument:
          type: string
          enum: [VOCAL, GUITAR, DRUM, BASS]
          description: "악기 유형"
        tier:
          type: string
          enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
          description: "티어 등급"
        lastChallenged:
          type: string
          format: date
          description: "마지막 도전 날짜"
        challengeCount:
          type: integer
          description: "남은 도전 횟수"
        successCount:
          type: integer
          description: "성공한 도전 횟수"
        firstChallenge:
          type: boolean
          description: "배치고사 진행 여부"
      required:
        - instrument
        - tier

    InstrumentSkillDTO:
      type: object
      properties:
        instrumentType:
          type: string
          enum: [VOCAL, GUITAR, DRUM, BASS]
          description: "악기 유형"
        beat:
          type: integer
          description: "박자 능력치"
        tune:
          type: integer
          description: "음정 능력치"
        tone:
          type: integer
          description: "음색 능력치"
      required:
        - instrumentType

    ChallengeDTO:
      type: object
      properties:
        challengeId:
          type: integer
          description: "도전 ID"
        memberId:
          type: string
          format: uuid
          description: "회원 ID"
        challengeType:
          type: string
          enum: [FIRST, PRACTICE, CHALLENGE, DEFENSE]
          description: "도전 유형"
        instrument:
          type: string
          enum: [VOCAL, GUITAR, DRUM, BASS]
          description: "악기 유형"
        tier:
          type: string
          enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
          description: "도전 티어"
        songByInstrumentId:
          type: integer
          description: "도전 곡 ID"
        createdAt:
          type: string
          format: date
          description: "도전 생성일"
      required:
        - challengeId
        - memberId
        - challengeType
        - instrument
        - tier
        - songByInstrumentId
        - createdAt

    RecordDTO:
      type: object
      properties:
        recordId:
          type: integer
          description: "녹음 기록 ID"
        title:
          type: string
          description: "녹음 제목"
        dtype:
          type: string
          enum: [FIRST, PRACTICE, CHALLENGE, DEFENSE]
          description: "녹음 유형"
        recordUrl:
          type: string
          description: "녹음 파일 URL"
        createdAt:
          type: string
          format: date
          description: "녹음 생성일"
        songTitle:
          type: string
          description: "노래 제목"
        instrument:
          type: string
          enum: [VOCAL, GUITAR, DRUM, BASS]
          description: "악기 유형"
      required:
        - recordId
        - title
        - dtype
        - recordUrl

    TierLogDTO:
      type: object
      properties:
        tierLogId:
          type: integer
          description: "티어 로그 ID"
        memberId:
          type: string
          format: uuid
          description: "회원 ID"
        tier:
          type: string
          enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
          description: "변경된 티어"
        changedDate:
          type: string
          format: date
          description: "변경일"
        instrument:
          type: string
          enum: [VOCAL, GUITAR, DRUM, BASS]
          description: "악기 유형"
        previousTier:
          type: string
          enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
          description: "이전 티어"
      required:
        - tierLogId
        - memberId
        - tier
        - changedDate
        - instrument

    BandMemberDTO:
      type: object
      properties:
        bandId:
          type: integer
          description: "밴드 ID"
        name:
          type: string
          description: "밴드 이름"
        description:
          type: string
          description: "밴드 설명"
        profileUrl:
          type: string
          description: "밴드 프로필 이미지 URL"
        instrument:
          type: string
          enum: [VOCAL, GUITAR, DRUM, BASS]
          description: "회원이 담당하는 악기"
        genre:
          type: string
          description: "밴드 장르"
        sigun:
          type: string
          description: "활동 지역"
      required:
        - bandId
        - name
        - instrument

    FollowDTO:
      type: object
      properties:
        followId:
          type: integer
          description: "팔로우 ID"
        followingUserId:
          type: string
          format: uuid
          description: "팔로우하는 회원 ID"
        followedUserId:
          type: string
          format: uuid
          description: "팔로우받는 회원 ID"
        followedEachother:
          type: boolean
          description: "서로 팔로우 여부"
      required:
        - followId
        - followingUserId
        - followedUserId
        - followedEachother

    FollowUserDTO:
      type: object
      properties:
        memberId:
          type: string
          format: uuid
          description: "회원 ID"
        nickname:
          type: string
          description: "닉네임"
        profileImgUrl:
          type: string
          description: "프로필 이미지 URL"
        followedEachother:
          type: boolean
          description: "서로 팔로우 여부"
      required:
        - memberId
        - nickname
        - profileImgUrl

    FavoriteBandDTO:
      type: object
      properties:
        bandId:
          type: integer
          description: "밴드 ID"
        name:
          type: string
          description: "밴드 이름"
        description:
          type: string
          description: "밴드 설명"
        profileUrl:
          type: string
          description: "밴드 프로필 이미지 URL"
        genre:
          type: string
          description: "밴드 장르"
        sigun:
          type: string
          description: "활동 지역"
        jobOpening:
          type: boolean
          description: "구인 중 여부"
      required:
        - bandId
        - name

    PageableDTO:
      type: object
      properties:
        page:
          type: integer
          description: "현재 페이지 번호"
        size:
          type: integer
          description: "페이지 크기"
        totalElements:
          type: integer
          description: "전체 요소 수"
        totalPages:
          type: integer
          description: "전체 페이지 수"
      required:
        - page
        - size
        - totalElements
        - totalPages

    ProblemDetail:
      title: Problem Detail
      description: 모든 에러 응답에 대한 스키마
      type: object
      properties:
        type:
          title: Type
          description: 에러 응답을 발생시킨 전체 URL
          type: string
          format: uri
          example: 'http://localhost:8080/api/members/123/notifications'
        title:
          title: Title
          description: 짧은 에러 제목
          type: string
          example: 'ResourceNotFoundException'
        status:
          title: Status
          description: HTTP 상태 코드
          type: integer
          format: int32
          minimum: 400
          maximum: 600
          exclusiveMaximum: true
          example: 404
        detail:
          title: Detail
          description: 상세 에러 메시지
          type: string
          example: 'Notification with ID 42 not found'
        timestamp:
          title: Timestamp
          description: 에러 발생 시간
          type: string
          format: date-time
          example: '2024-03-21T14:59:21.3820407Z'
        schemaValidationErrors:
          title: Schema validation errors
          description: OpenAPI 스키마에 대한 유효성 검사 오류
          type: array
          items:
            $ref: '#/components/schemas/ValidationMessage'
      required:
        - type
        - title
        - status
        - detail
        - timestamp

    ValidationMessage:
      title: Validation message
      description: 유효성 검사 오류를 설명하는 메시지
      type: object
      properties:
        message:
          title: Message
          description: 유효성 검사 메시지
          type: string
          example: "[Path '/message'] Instance type (null) does not match any allowed primitive type (allowed: ['string'])"
      required:
        - message

  parameters:
    MemberId:
      name: memberId
      in: path
      description: "회원 ID"
      required: true
      schema:
        type: string
        format: uuid

    InstrumentParam:
      name: instrument
      in: path
      description: "악기 유형"
      required: true
      schema:
        type: string
        enum: [VOCAL, GUITAR, DRUM, BASS]

    BandId:
      name: bandId
      in: path
      description: "밴드 ID"
      required: true
      schema:
        type: integer

    TargetMemberId:
      name: targetMemberId
      in: path
      description: "대상 회원 ID"
      required: true
      schema:
        type: string
        format: uuid

    PageParam:
      name: page
      in: query
      description: "페이지 번호"
      required: false
      schema:
        type: integer
        default: 0

    SizeParam:
      name: size
      in: query
      description: "페이지 크기"
      required: false
      schema:
        type: integer
        default: 10

  requestBodies:
    RegisterMemberRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
                description: "로그인 아이디"
              password:
                type: string
                description: "비밀번호"
                format: password
              nickname:
                type: string
                description: "닉네임"
              email:
                type: string
                format: email
                description: "이메일 주소"
              gender:
                type: string
                enum: [MALE, FEMALE, OTHER]
                description: "성별"
              age:
                type: integer
                description: "나이"
            required:
              - username
              - password
              - nickname
              - email

    LoginRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
                description: "로그인 아이디"
              password:
                type: string
                description: "비밀번호"
                format: password
            required:
              - username
              - password

    UpdateMemberRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              nickname:
                type: string
                description: "닉네임"
              profileImgUrl:
                type: string
                description: "프로필 이미지 URL"
              age:
                type: integer
                description: "나이"
              gender:
                type: string
                enum: [MALE, FEMALE, OTHER]
                description: "성별"

    FirstChallengeRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              songByInstrumentId:
                type: integer
                description: "도전할 곡 ID"
            required:
              - songByInstrumentId

    TierChallengeRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              songByInstrumentId:
                type: integer
                description: "도전할 곡 ID"
              targetTier:
                type: string
                enum: [IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
                description: "도전할 티어"
            required:
              - songByInstrumentId
              - targetTier

    DefenseChallengeRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              songByInstrumentId:
                type: integer
                description: "도전할 곡 ID"
            required:
              - songByInstrumentId

    InstrumentSkillRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              instrumentType:
                type: string
                enum: [VOCAL, GUITAR, DRUM, BASS]
                description: "악기 유형"
              beat:
                type: integer
                description: "박자 능력치"
                minimum: 0
                maximum: 100
              tune:
                type: integer
                description: "음정 능력치"
                minimum: 0
                maximum: 100
              tone:
                type: integer
                description: "음색 능력치"
                minimum: 0
                maximum: 100
            required:
              - instrumentType

    UpdateInstrumentSkillRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              beat:
                type: integer
                description: "박자 능력치"
                minimum: 0
                maximum: 100
              tune:
                type: integer
                description: "음정 능력치"
                minimum: 0
                maximum: 100
              tone:
                type: integer
                description: "음색 능력치"
                minimum: 0
                maximum: 100
            required:
              - beat
              - tune
              - tone

    AddFavoriteBandRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              bandId:
                type: integer
                description: "밴드 ID"
            required:
              - bandId

    PasswordResetRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                description: "이메일 주소"
            required:
              - email

  responses:
    MemberResponse:
      description: "회원 정보 응답"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MemberDTO'

    MemberDetailResponse:
      description: "회원 상세 정보 응답"
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/MemberDTO'
              - type: object
                properties:
                  email:
                    type: string
                    format: email

    LoginResponse:
      description: "로그인 성공 응답"
      content:
        application/json:
          schema:
            type: object
            properties:
              accessToken:
                type: string
                description: "액세스 토큰"
              refreshToken:
                type: string
                description: "리프레시 토큰"
              memberId:
                type: string
                format: uuid
                description: "회원 ID"
              nickname:
                type: string
                description: "닉네임"
            required:
              - accessToken
              - refreshToken
              - memberId
              - nickname

    MemberInstrumentTiersResponse:
      description: "회원의 악기별 티어 정보 응답"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/MemberInstrumentTierDTO'

    MemberInstrumentTierResponse:
      description: "회원의 특정 악기 티어 정보 응답"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MemberInstrumentTierDTO'

    ChallengeResponse:
      description: "도전 정보 응답"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChallengeDTO'

    ChallengeListResponse:
      description: "회원의 도전 이력 응답"
      content:
        application/json:
          schema:
            type: object
            properties:
              content:
                type: array
                items:
                  type: object
                  properties:
                    challengeId:
                      type: integer
                      description: "도전 ID"
                    challengeType:
                      type: string
                      enum: [FIRST, PRACTICE, CHALLENGE, DEFENSE]
                      description: "도전 유형"
                    instrument:
                      type: string
                      enum: [VOCAL, GUITAR, DRUM, BASS]
                      description: "악기 유형"
                    tier:
                      type: string
                      enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
                      description: "티어"
                    songTitle:
                      type: string
                      description: "노래 제목"
                    createdAt:
                      type: string
                      format: date
                      description: "생성일"
                    result:
                      type: string
                      enum: [SUCCESS, FAIL]
                      description: "결과"
                    recordUrl:
                      type: string
                      description: "녹음 파일 URL"
              pageable:
                $ref: '#/components/schemas/PageableDTO'
            required:
              - content
              - pageable

    RecordListResponse:
      description: "회원의 연주 기록 응답"
      content:
        application/json:
          schema:
            type: object
            properties:
              content:
                type: array
                items:
                  $ref: '#/components/schemas/RecordDTO'
              pageable:
                $ref: '#/components/schemas/PageableDTO'
            required:
              - content
              - pageable

    InstrumentSkillResponse:
      description: "악기 스킬 정보 응답"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InstrumentSkillDTO'

    InstrumentSkillsResponse:
      description: "회원의 모든 악기 스킬 정보 응답"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/InstrumentSkillDTO'

    BandMembersResponse:
      description: "회원이 속한 밴드 목록 응답"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/BandMemberDTO'

    FollowResponse:
      description: "팔로우 정보 응답"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FollowDTO'

    FollowsResponse:
      description: "팔로워/팔로잉 목록 응답"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/FollowUserDTO'

    FavoriteBandsResponse:
      description: "즐겨찾기 밴드 목록 응답"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/FavoriteBandDTO'

    FavoriteBandResponse:
      description: "즐겨찾기 밴드 추가 응답"
      content:
        application/json:
          schema:
            type: object
            properties:
              favoriteId:
                type: integer
                description: "즐겨찾기 ID"
              memberId:
                type: string
                format: uuid
                description: "회원 ID"
              bandId:
                type: integer
                description: "밴드 ID"
            required:
              - favoriteId
              - memberId
              - bandId

    TierLogsResponse:
      description: "티어 변경 이력 응답"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TierLogDTO'

    BadRequestError:
      description: "잘못된 요청"
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemDetail'
              - type: object
                properties:
                  title:
                    type: string
                    example: "잘못된 요청"
                  status:
                    type: integer
                    example: 400
                  detail:
                    type: string
                    example: "요청 형식이 올바르지 않습니다."


    UnauthorizedError:
      description: "인증 실패"
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemDetail'
              - type: object
                properties:
                  title:
                    type: string
                    example: "인증 실패"
                  status:
                    type: integer
                    example: 401
                  detail:
                    type: string
                    example: "인증 정보가 유효하지 않습니다."

    ForbiddenError:
      description: "접근 권한 없음"
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemDetail'
              - type: object
                properties:
                  title:
                    type: string
                    example: "접근 권한 없음"
                  status:
                    type: integer
                    example: 403
                  detail:
                    type: string
                    example: "해당 리소스에 접근할 권한이 없습니다."

    NotFoundError:
      description: "리소스를 찾을 수 없음"
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemDetail'
              - type: object
                properties:
                  title:
                    type: string
                    example: "리소스를 찾을 수 없음"
                  status:
                    type: integer
                    example: 404
                  detail:
                    type: string
                    example: "요청한 리소스를 찾을 수 없습니다."

    ConflictError:
      description: "리소스 충돌"
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemDetail'
              - type: object
                properties:
                  title:
                    type: string
                    example: "리소스 충돌"
                  status:
                    type: integer
                    example: 409
                  detail:
                    type: string
                    example: "이미 존재하는 리소스입니다."


security:
  - BearerAuth: []

paths:
  # ==================== 중요도: 상 (핵심 기능) ====================

  /oauth2/authorization/google:
    post:
      tags:
        - Member
      operationId: registerMember
      summary: "회원 등록"
      description: "새로운 회원을 등록합니다."
      responses:
        '201':
          description: "회원 등록 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  memberId:
                    type: string
                    format: uuid
                    description: "UUID 형식의 멤버 아이디"
                    example: "7466B6F3-5192-44D1-AA80-375767C166C5"
                  nickname:
                    type: string
                    description: "닉네임"
                    example: "잠자는 꼬맹이"
                  accessToken:
                    type: string
                    description: "JWT 액세스 토큰"
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '409':
          $ref: '#/components/responses/ConflictError'

  # 회원 조회
  /members/{memberId}:
    get:
      tags:
        - Member
      operationId: getMember
      summary: "회원 조회"
      description: "특정 회원의 상세 정보를 조회합니다."
      security: []
      parameters:
        - $ref: '#/components/parameters/MemberId'
      responses:
        '200':
          $ref: '#/components/responses/MemberResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
    # 회원 정보 부분 업데이트
    patch:
      tags:
        - Member
      operationId: updateMember
      summary: "회원 정보 부분 업데이트"
      description: "회원 정보를 부분 업데이트합니다."
      parameters:
        - $ref: '#/components/parameters/MemberId'
      requestBody:
        $ref: '#/components/requestBodies/UpdateMemberRequest'
      responses:
        '200':
          $ref: '#/components/responses/MemberResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # 현재 로그인 회원 정보 조회
  /members/me:
    get:
      tags:
        - Member
      operationId: getMyInfo
      summary: "현재 로그인 회원 정보 조회"
      description: "현재 로그인한 회원의 정보를 조회합니다."
      responses:
        '200':
          $ref: '#/components/responses/MemberDetailResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # 회원의 모든 악기별 티어 정보 조회
  /members/{memberId}/tiers:
    get:
      tags:
        - MemberInstrumentTier
      operationId: getMemberInstrumentTiers
      summary: "회원의 모든 악기별 티어 정보 조회"
      description: "회원의 모든 악기별 티어 정보를 조회합니다."
      parameters:
        - $ref: '#/components/parameters/MemberId'
      responses:
        '200':
          $ref: '#/components/responses/MemberInstrumentTiersResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # 첫 배치고사 신청
  /members/{memberId}/tiers/{instrument}/first-challenge:
    post:
      tags:
        - MemberInstrumentTier
      operationId: requestFirstChallenge
      summary: "첫 배치고사 신청"
      description: "특정 악기에 대한 첫 배치고사를 신청합니다."
      parameters:
        - $ref: '#/components/parameters/MemberId'
        - $ref: '#/components/parameters/InstrumentParam'
      requestBody:
        $ref: '#/components/requestBodies/FirstChallengeRequest'
      responses:
        '201':
          $ref: '#/components/responses/ChallengeResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'

  # 티어 도전 신청
  /members/{memberId}/tiers/{instrument}/challenge:
    post:
      tags:
        - MemberInstrumentTier
      operationId: requestTierChallenge
      summary: "티어 도전 신청"
      description: "특정 악기에 대한 티어 도전을 신청합니다."
      parameters:
        - $ref: '#/components/parameters/MemberId'
        - $ref: '#/components/parameters/InstrumentParam'
      requestBody:
        $ref: '#/components/requestBodies/TierChallengeRequest'
      responses:
        '201':
          $ref: '#/components/responses/ChallengeResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'

  # 로그인
  /members/login:
    post:
      tags:
        - Member
      operationId: login
      summary: "로그인"
      description: "회원 로그인을 처리하고 인증 토큰을 발급합니다."
      security: []
      requestBody:
        $ref: '#/components/requestBodies/LoginRequest'
      responses:
        '200':
          $ref: '#/components/responses/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # 로그아웃
  /members/logout:
    post:
      tags:
        - Member
      operationId: logout
      summary: "로그아웃"
      description: "회원 로그아웃을 처리합니다."
      responses:
        '204':
          description: "로그아웃 성공"
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # 회원이 속한 밴드 목록 조회
  /members/{memberId}/bands:
    get:
      tags:
        - Member
      operationId: getMemberBands
      summary: "회원이 속한 밴드 목록 조회"
      description: "회원이 속한 밴드 목록을 조회합니다."
      parameters:
        - $ref: '#/components/parameters/MemberId'
      responses:
        '200':
          $ref: '#/components/responses/BandMembersResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # ==================== 중요도: 중 (주요 기능) ====================

  # 회원의 모든 악기별 스킬 정보 조회
  /members/{memberId}/skills:
    get:
      tags:
        - InstrumentSkill
      operationId: getMemberSkills
      summary: "회원의 모든 악기별 스킬 정보 조회"
      description: "회원의 모든 악기별 스킬 정보를 조회합니다."
      parameters:
        - $ref: '#/components/parameters/MemberId'
      responses:
        '200':
          $ref: '#/components/responses/InstrumentSkillsResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

    # 회원의 새로운 악기 스킬 정보 등록
    post:
      tags:
        - InstrumentSkill
      operationId: addMemberSkill
      summary: "회원의 새로운 악기 스킬 정보 등록"
      description: "회원의 새로운 악기 스킬 정보를 등록합니다."
      parameters:
        - $ref: '#/components/parameters/MemberId'
      requestBody:
        $ref: '#/components/requestBodies/InstrumentSkillRequest'
      responses:
        '201':
          $ref: '#/components/responses/InstrumentSkillResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'

  # 팔로워 목록 조회
  /members/{memberId}/followers:
    get:
      tags:
        - Follow
      operationId: getMemberFollowers
      summary: "팔로워 목록 조회"
      description: "회원을 팔로우하는 다른 회원 목록을 조회합니다."
      parameters:
        - $ref: '#/components/parameters/MemberId'
      responses:
        '200':
          $ref: '#/components/responses/FollowsResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # 팔로잉 목록 조회
  /members/{memberId}/followings:
    get:
      tags:
        - Follow
      operationId: getMemberFollowings
      summary: "팔로잉 목록 조회"
      description: "회원이 팔로우하고 있는 다른 회원 목록을 조회합니다."
      parameters:
        - $ref: '#/components/parameters/MemberId'
      responses:
        '200':
          $ref: '#/components/responses/FollowsResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # 팔로우 하기
  /members/{memberId}/follow:
    post:
      tags:
        - Follow
      operationId: followMember
      summary: "팔로우 하기"
      description: "특정 회원을 팔로우합니다."
      parameters:
        - $ref: '#/components/parameters/MemberId'
      responses:
        '201':
          $ref: '#/components/responses/FollowResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'




  # 티어 방어전 신청
  /members/{memberId}/tiers/{instrument}/defense:
    post:
      tags:
        - MemberInstrumentTier
      operationId: requestTierDefense
      summary: "티어 방어전 신청"
      description: "티어 방어전을 신청합니다."
      parameters:
        - $ref: '#/components/parameters/MemberId'
        - $ref: '#/components/parameters/InstrumentParam'
      requestBody:
        $ref: '#/components/requestBodies/DefenseChallengeRequest'
      responses:
        '201':
          $ref: '#/components/responses/ChallengeResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'

  # ==================== 중요도: 하 (부가 기능) ====================

  # 즐겨찾기 밴드 목록 조회
  /members/{memberId}/favorite-bands:
    get:
      tags:
        - FavoriteBand
      operationId: getMemberFavoriteBands
      summary: "즐겨찾기 밴드 목록 조회"
      description: "회원이 즐겨찾기한 밴드 목록을 조회합니다."
      parameters:
        - $ref: '#/components/parameters/MemberId'
      responses:
        '200':
          $ref: '#/components/responses/FavoriteBandsResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
      deprecated: true

    # 즐겨찾기 밴드 추가
    post:
      tags:
        - FavoriteBand
      operationId: addFavoriteBand
      summary: "즐겨찾기 밴드 추가"
      description: "회원의 즐겨찾기 밴드를 추가합니다."
      parameters:
        - $ref: '#/components/parameters/MemberId'
      requestBody:
        $ref: '#/components/requestBodies/AddFavoriteBandRequest'
      responses:
        '201':
          $ref: '#/components/responses/FavoriteBandResponse'
      deprecated: true

  # 즐겨찾기 밴드 제거
  /members/{memberId}/favorite-bands/{bandId}:
    delete:
      tags:
        - FavoriteBand
      operationId: removeFavoriteBand
      summary: "즐겨찾기 밴드 제거"
      description: "특정 밴드를 즐겨찾기에서 제거합니다."
      parameters:
        - $ref: '#/components/parameters/MemberId'
        - $ref: '#/components/parameters/BandId'
      responses:
        '204':
          description: "즐겨찾기 밴드 제거 성공"
      deprecated: true

  # 티어 변경 이력 조회
  /members/{memberId}/tier-logs:
    get:
      tags:
        - TierLog
      operationId: getMemberTierLogs
      summary: "티어 변경 이력 조회"
      description: "회원의 티어 변경 이력을 조회합니다."
      parameters:
        - $ref: '#/components/parameters/MemberId'
      responses:
        '200':
          $ref: '#/components/responses/TierLogsResponse'
      deprecated: true

  # 특정 악기 티어 변경 이력 조회
  /members/{memberId}/tier-logs/{instrument}:
    get:
      tags:
        - TierLog
      operationId: getMemberInstrumentTierLogs
      summary: "특정 악기 티어 변경 이력 조회"
      description: "특정 악기에 대한 티어 변경 이력을 조회합니다."
      parameters:
        - $ref: '#/components/parameters/MemberId'
        - $ref: '#/components/parameters/InstrumentParam'
      responses:
        '200':
          $ref: '#/components/responses/TierLogsResponse'
      deprecated: true

  # 특정 악기 티어 정보 조회
  /members/{memberId}/tiers/{instrument}:
    get:
      tags:
        - MemberInstrumentTier
      operationId: getMemberInstrumentTier
      summary: "특정 악기 티어 정보 조회"
      description: "특정 악기에 대한 회원의 티어 정보를 조회합니다."
      parameters:
        - $ref: '#/components/parameters/MemberId'
        - $ref: '#/components/parameters/InstrumentParam'
      responses:
        '200':
          $ref: '#/components/responses/MemberInstrumentTierResponse'
      deprecated: true

  # 특정 악기 스킬 정보 업데이트
  /members/{memberId}/skills/{instrument}:
    put:
      tags:
        - InstrumentSkill
      operationId: updateMemberSkill
      summary: "특정 악기 스킬 정보 업데이트"
      description: "특정 악기의 스킬 정보를 업데이트합니다."
      parameters:
        - $ref: '#/components/parameters/MemberId'
        - $ref: '#/components/parameters/InstrumentParam'
      requestBody:
        $ref: '#/components/requestBodies/UpdateInstrumentSkillRequest'
      responses:
        '200':
          $ref: '#/components/responses/InstrumentSkillResponse'
      deprecated: true

  # 비밀번호 재설정 요청
  /members/password-reset:
    post:
      tags:
        - Member
      operationId: requestPasswordReset
      summary: "비밀번호 재설정 요청"
      description: "비밀번호 재설정을 요청합니다."
      security: []
      requestBody:
        $ref: '#/components/requestBodies/PasswordResetRequest'
      responses:
        '204':
          description: "비밀번호 재설정 요청 성공"
      deprecated: true

  # 팔로우 취소
  /members/{memberId}/follow/{targetMemberId}:
    delete:
      tags:
        - Follow
      operationId: unfollowMember
      summary: "팔로우 취소"
      description: "특정 회원 팔로우를 취소합니다."
      parameters:
        - $ref: '#/components/parameters/MemberId'
        - $ref: '#/components/parameters/TargetMemberId'
      responses:
        '204':
          description: "팔로우 취소 성공"
      deprecated: true