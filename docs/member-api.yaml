openapi: 3.0.3
info:
  title: 딩가딩 Member API
  version: 1.0.0
  description: '회원, 팔로우, 알림 관련 API 명세서'
  contact:
    email: qkrwnsgh71w@gmail.com

servers:
  - url: http://localhost:8080
    description: 스프링 서버
  - url: http://localhost:8081
    description: 목 서버

tags:
  - name: Auth
    description: 사용자 인증 관련 API - 개발전
  - name: Member
    description: 회원 정보 관리 관련 API - 개발전
  - name: Follow
    description: 팔로우 관계 관리 관련 API - 개발전
  - name: Notification
    description: 알림 관리 관련 API - 개발전

components:
  schemas:
    ProblemDetail:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: "문제 유형을 식별하는 URI"
        title:
          type: string
          description: "문제에 대한 간단한 제목"
        status:
          type: integer
          description: "HTTP 상태 코드"
        detail:
          type: string
          description: "문제에 대한 자세한 설명"
        instance:
          type: string
          format: uri
          description: "문제가 발생한 특정 URI"

    MemberDTO:
      type: object
      properties:
        memberId:
          type: string
          format: uuid
          description: "회원 고유 식별자"
        username:
          type: string
          description: "사용자 로그인 아이디"
        nickname:
          type: string
          description: "사용자 닉네임"
        favoriteBandId:
          type: integer
          format: int64
          description: "즐겨찾기 된 밴드 ID"
        profileImgUrl:
          type: string
          description: "프로필 이미지 URL"
        createdAt:
          type: string
          format: date-time
          description: "계정 생성 일시"
      required:
        - memberId
        - username
        - nickname
        - profileImgUrl
        - createdAt
      example:
        memberId: "123e4567-e89b-12d3-a456-426614174000"
        username: "user123"
        nickname: "기타리스트"
        favoriteBandId: 42
        profileImgUrl: "https://storage.example.com/profiles/image123.jpg"
        createdAt: "2023-01-15T09:30:00Z"

    FollowDTO:
      type: object
      properties:
        followId:
          type: integer
          format: int64
          description: "팔로우 고유 식별자"
        followingUserId:
          type: string
          format: uuid
          description: "팔로우하는 사용자 ID"
        followedUserId:
          type: string
          format: uuid
          description: "팔로우 받는 사용자 ID"
        followedEachother:
          type: boolean
          description: "상호 팔로우 여부"
      required:
        - followId
        - followingUserId
        - followedUserId
        - followedEachother
      example:
        followId: 123
        followingUserId: "123e4567-e89b-12d3-a456-426614174000"
        followedUserId: "123e4567-e89b-12d3-a456-426614174001"
        followedEachother: false

    NotificationDTO:
      type: object
      properties:
        notificationId:
          type: integer
          format: int64
          description: "알림 고유 식별자"
        senderId:
          type: string
          format: uuid
          description: "발신자 ID"
        receiverId:
          type: string
          format: uuid
          description: "수신자 ID"
        message:
          type: string
          description: "알림 메시지"
        readOrNot:
          type: boolean
          description: "알림 읽음 여부"
        type:
          type: string
          enum: [CHAT, FOLLOW, RECRUITMENT]
          description: "알림 타입"
        acceptUrl:
          type: string
          description: "수락 시 사용할 URL"
        rejectUrl:
          type: string
          description: "거절 시 사용할 URL"
        createdAt:
          type: string
          format: date-time
          description: "알림 생성 일시"
      required:
        - notificationId
        - receiverId
        - message
        - readOrNot
        - type
        - createdAt
      example:
        notificationId: 123
        senderId: "123e4567-e89b-12d3-a456-426614174000"
        receiverId: "123e4567-e89b-12d3-a456-426614174001"
        message: "밴드에 가입 요청이 있습니다."
        readOrNot: false
        type: "RECRUITMENT"
        acceptUrl: "/api/band-requests/123/accept"
        rejectUrl: "/api/band-requests/123/reject"
        createdAt: "2023-03-15T14:30:00Z"

    GoogleAuthRequest:
      type: object
      properties:
        idToken:
          type: string
          description: "구글 인증 ID 토큰"
      required:
        - idToken
      example:
        idToken: "eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ..."

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: "JWT 액세스 토큰"
        refreshToken:
          type: string
          description: "JWT 리프레시 토큰"
        expiresIn:
          type: integer
          description: "토큰 만료 시간(초)"
        tokenType:
          type: string
          description: "토큰 타입"
        memberId:
          type: string
          format: uuid
          description: "회원 ID"
      required:
        - accessToken
        - tokenType
        - memberId
      example:
        accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expiresIn: 3600
        tokenType: "Bearer"
        memberId: "123e4567-e89b-12d3-a456-426614174000"

    UpdateMemberRequest:
      type: object
      properties:
        nickname:
          type: string
          description: "변경할 닉네임"
        profileImgUrl:
          type: string
          description: "변경할 프로필 이미지 URL"
      example:
        nickname: "드러머"
        profileImgUrl: "https://storage.example.com/profiles/image456.jpg"

    FollowRequest:
      type: object
      properties:
        followedUserId:
          type: string
          format: uuid
          description: "팔로우할 사용자 ID"
      required:
        - followedUserId
      example:
        followedUserId: "123e4567-e89b-12d3-a456-426614174001"

  parameters:
    MemberId:
      name: memberId
      in: path
      description: "회원 ID"
      required: true
      schema:
        type: string
        format: uuid

    FollowId:
      name: followId
      in: path
      description: "팔로우 ID"
      required: true
      schema:
        type: integer
        format: int64

    NotificationId:
      name: notificationId
      in: path
      description: "알림 ID"
      required: true
      schema:
        type: integer
        format: int64

    BandId:
      name: bandId
      in: path
      description: "밴드 ID"
      required: true
      schema:
        type: integer
        format: int64

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT 인증 토큰을 사용합니다. 예: Bearer {token}"

  responses:
    MemberResponse:
      description: "회원 정보 응답"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MemberDTO'

    FollowResponse:
      description: "팔로우 정보 응답"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FollowDTO'

    NotificationResponse:
      description: "알림 정보 응답"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationDTO'

    AuthTokenResponse:
      description: "인증 토큰 응답"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthResponse'

    PageMemberResponse:
      description: "회원 목록 페이지 응답"
      content:
        application/json:
          schema:
            type: object
            properties:
              content:
                type: array
                items:
                  $ref: '#/components/schemas/MemberDTO'
              pageable:
                type: object
                properties:
                  page:
                    type: integer
                    description: 현재 페이지 번호
                  size:
                    type: integer
                    description: 페이지 크기
                  totalElements:
                    type: integer
                    description: 전체 요소 수
                  totalPages:
                    type: integer
                    description: 전체 페이지 수
                required:
                  - page
                  - size
                  - totalElements
                  - totalPages
            required:
              - content
              - pageable

    PageNotificationResponse:
      description: "알림 목록 페이지 응답"
      content:
        application/json:
          schema:
            type: object
            properties:
              content:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationDTO'
              pageable:
                type: object
                properties:
                  page:
                    type: integer
                    description: 현재 페이지 번호
                  size:
                    type: integer
                    description: 페이지 크기
                  totalElements:
                    type: integer
                    description: 전체 요소 수
                  totalPages:
                    type: integer
                    description: 전체 페이지 수
                required:
                  - page
                  - size
                  - totalElements
                  - totalPages
            required:
              - content
              - pageable

    NotFoundException:
      description: "요청한 리소스를 찾을 수 없습니다."
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemDetail'
              - type: object
                properties:
                  title:
                    type: string
                    example: "리소스를 찾을 수 없습니다."

    UnauthorizedError:
      description: "인증되지 않은 요청입니다."
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemDetail'
              - type: object
                properties:
                  title:
                    type: string
                    example: "인증되지 않은 요청입니다."

    ForbiddenError:
      description: "권한이 없는 요청입니다."
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemDetail'
              - type: object
                properties:
                  title:
                    type: string
                    example: "권한이 없는 요청입니다."

    BadRequestError:
      description: "잘못된 요청입니다."
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemDetail'
              - type: object
                properties:
                  title:
                    type: string
                    example: "잘못된 요청입니다."

  requestBodies:
    GoogleAuthRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GoogleAuthRequest'

    UpdateMemberRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateMemberRequest'

    FollowRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FollowRequest'

paths:
  /api/auth/google:
    post:
      tags:
        - Auth
      operationId: authenticateGoogle
      summary: "구글 OAuth2 인증"
      description: "구글 OAuth2 인증 후 사용자 등록 및 JWT 토큰을 발급합니다. 처음 로그인하는 사용자는 자동으로 회원 가입됩니다."
      requestBody:
        $ref: '#/components/requestBodies/GoogleAuthRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/AuthTokenResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /api/members/me:
    get:
      tags:
        - Member
      operationId: getCurrentMember
      summary: "현재 로그인한 사용자 정보 조회"
      description: "현재 로그인한 사용자의 상세 정보를 조회합니다."
      security:
        - BearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/MemberResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/members/{memberId}:
    get:
      tags:
        - Member
      operationId: getMember
      summary: "회원 정보 조회"
      description: "특정 회원의 상세 정보를 조회합니다."
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/MemberId'
      responses:
        '200':
          $ref: '#/components/responses/MemberResponse'
        '404':
          $ref: '#/components/responses/NotFoundException'

    put:
      tags:
        - Member
      operationId: updateMember
      summary: "회원 정보 수정"
      description: "회원의 프로필 정보(닉네임, 프로필 이미지 등)를 수정합니다."
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/MemberId'
      security:
        - BearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/UpdateMemberRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/MemberResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundException'

  /api/members/favorite-band/{bandId}:
    put:
      tags:
        - Member
      operationId: updateFavoriteBand
      summary: "즐겨찾기 밴드 설정"
      description: "사용자의 즐겨찾기 밴드를 설정합니다."
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/BandId'
      security:
        - BearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/MemberResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundException'

  /api/follows:
    post:
      tags:
        - Follow
      operationId: createFollow
      summary: "사용자 팔로우"
      description: "특정 사용자를 팔로우합니다. 이미 팔로우한 사용자의 경우 409 Conflict 응답이 반환됩니다."
      security:
        - BearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/FollowRequestBody'
      responses:
        '201':
          description: "팔로우 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowDTO'
              example:
                followId: 123
                followingUserId: "123e4567-e89b-12d3-a456-426614174000"
                followedUserId: "123e4567-e89b-12d3-a456-426614174001"
                followedEachother: false
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: "팔로우할 사용자를 찾을 수 없습니다."
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ProblemDetail'
                  - type: object
                    properties:
                      title:
                        type: string
                        example: "팔로우할 사용자를 찾을 수 없습니다."
        '409':
          description: "이미 팔로우한 사용자입니다."
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ProblemDetail'
                  - type: object
                    properties:
                      title:
                        type: string
                        example: "이미 팔로우한 사용자입니다."

  /api/follows/{followId}:
    delete:
      tags:
        - Follow
      operationId: deleteFollow
      summary: "팔로우 취소"
      description: "사용자 팔로우를 취소합니다."
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/FollowId'
      responses:
        '204':
          description: "팔로우 취소 성공"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: "팔로우 취소 권한이 없습니다."
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ProblemDetail'
                  - type: object
                    properties:
                      title:
                        type: string
                        example: "팔로우 취소 권한이 없습니다."
        '404':
          description: "팔로우 정보를 찾을 수 없습니다."
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ProblemDetail'
                  - type: object
                    properties:
                      title:
                        type: string
                        example: "팔로우 정보를 찾을 수 없습니다."

  /api/members/{memberId}/followers:
    get:
      tags:
        - Follow
      operationId: getMemberFollowers
      summary: "회원의 팔로워 목록 조회"
      description: "특정 회원을 팔로우하는 사용자 목록을 조회합니다. size, page를 쿼리 파라미터로 전달하여 페이징 처리가 가능합니다."
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/MemberId'
      x-spring-paginated: true
      responses:
        '200':
          $ref: '#/components/responses/PageMemberResponse'
        '404':
          $ref: '#/components/responses/NotFoundException'

  /api/members/{memberId}/followings:
    get:
      tags:
        - Follow
      operationId: getMemberFollowings
      summary: "회원이 팔로우하는 목록 조회"
      description: "특정 회원이 팔로우하는 사용자 목록을 조회합니다. size, page를 쿼리 파라미터로 전달하여 페이징 처리가 가능합니다."
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/MemberId'
      x-spring-paginated: true
      responses:
        '200':
          $ref: '#/components/responses/PageMemberResponse'
        '404':
          $ref: '#/components/responses/NotFoundException'

  /api/notifications:
    get:
      tags:
        - Notification
      operationId: getNotifications
      summary: "알림 목록 조회"
      description: "현재 로그인한 사용자의 알림 목록을 조회합니다. size, page를 쿼리 파라미터로 전달하여 페이징 처리가 가능하며, type 파라미터로 알림 유형을 필터링할 수 있습니다."
      security:
        - BearerAuth: []
      x-spring-paginated: true
      responses:
        '200':
          description: "알림 목록 응답"
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/NotificationDTO'
                  pageable:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 0
                      size:
                        type: integer
                        example: 10
                      totalElements:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 3
                    required:
                      - page
                      - size
                      - totalElements
                      - totalPages
                required:
                  - content
                  - pageable
              example:
                content:
                  - notificationId: 123
                    senderId: "123e4567-e89b-12d3-a456-426614174000"
                    receiverId: "123e4567-e89b-12d3-a456-426614174001"
                    message: "밴드에 가입 요청이 있습니다."
                    readOrNot: false
                    type: "RECRUITMENT"
                    acceptUrl: "/api/band-requests/123/accept"
                    rejectUrl: "/api/band-requests/123/reject"
                    createdAt: "2023-03-15T14:30:00Z"
                  - notificationId: 124
                    senderId: "123e4567-e89b-12d3-a456-426614174002"
                    receiverId: "123e4567-e89b-12d3-a456-426614174001"
                    message: "새로운 팔로워가 있습니다."
                    readOrNot: true
                    type: "FOLLOW"
                    createdAt: "2023-03-14T10:15:00Z"
                pageable:
                  page: 0
                  size: 10
                  totalElements: 25
                  totalPages: 3
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/notifications/{notificationId}/read:
    put:
      tags:
        - Notification
      operationId: markNotificationAsRead
      summary: "알림 읽음 처리"
      description: "특정 알림을 읽음 상태로 변경합니다."
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/NotificationId'
      responses:
        '200':
          description: "알림 읽음 처리 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationDTO'
              example:
                notificationId: 123
                senderId: "123e4567-e89b-12d3-a456-426614174000"
                receiverId: "123e4567-e89b-12d3-a456-426614174001"
                message: "밴드에 가입 요청이 있습니다."
                readOrNot: true
                type: "RECRUITMENT"
                acceptUrl: "/api/band-requests/123/accept"
                rejectUrl: "/api/band-requests/123/reject"
                createdAt: "2023-03-15T14:30:00Z"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: "알림 읽음 처리 권한이 없습니다."
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ProblemDetail'
                  - type: object
                    properties:
                      title:
                        type: string
                        example: "알림 읽음 처리 권한이 없습니다."
        '404':
          description: "알림을 찾을 수 없습니다."
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ProblemDetail'
                  - type: object
                    properties:
                      title:
                        type: string
                        example: "알림을 찾을 수 없습니다."

  /api/notifications/accept/{notificationId}:
    post:
      tags:
        - Notification
      operationId: acceptNotification
      summary: "알림 수락"
      description: "밴드 가입 요청 등의 알림을 수락합니다."
      deprecated: true
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/NotificationId'
      responses:
        '200':
          description: "알림 수락 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationDTO'
              example:
                notificationId: 123
                senderId: "123e4567-e89b-12d3-a456-426614174000"
                receiverId: "123e4567-e89b-12d3-a456-426614174001"
                message: "밴드 가입 요청이 수락되었습니다."
                readOrNot: true
                type: "RECRUITMENT"
                createdAt: "2023-03-15T14:30:00Z"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundException'

  /api/notifications/reject/{notificationId}:
    post:
      tags:
        - Notification
      operationId: rejectNotification
      summary: "알림 거절"
      description: "밴드 가입 요청 등의 알림을 거절합니다."
      deprecated: true
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/NotificationId'
      responses:
        '200':
          description: "알림 거절 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationDTO'
              example:
                notificationId: 123
                senderId: "123e4567-e89b-12d3-a456-426614174000"
                receiverId: "123e4567-e89b-12d3-a456-426614174001"
                message: "밴드 가입 요청이 거절되었습니다."
                readOrNot: true
                type: "RECRUITMENT"
                createdAt: "2023-03-15T14:30:00Z"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundException'

  /api/notifications/{notificationId}:
    delete:
      tags:
        - Notification
      operationId: deleteNotification
      summary: "알림 삭제"
      description: "특정 알림을 삭제합니다."
      deprecated: true
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/NotificationId'
      responses:
        '204':
          description: "알림 삭제 성공"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundException'

security:
  - BearerAuth: []