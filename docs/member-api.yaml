openapi: 3.0.3
info:
  title: 딩가딩 Member API
  version: 1.0.0
  description: "회원, 팔로우, 알림 관련 API 명세서"
  contact:
    email: qkrwnsgh71w@gmail.com

servers:
  - url: http://localhost:8080
    description: 스프링 서버
  - url: http://localhost:8081
    description: 목 서버

tags:
  - name: Auth
    description: 사용자 인증 관련 API - 개발 완료
  - name: Notification
    description: 알림 관리 관련 API - 개발 완료

components:
  schemas:
    ProblemDetail:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: "문제 유형을 식별하는 URI"
        title:
          type: string
          description: "문제에 대한 간단한 제목"
        status:
          type: integer
          description: "HTTP 상태 코드"
        detail:
          type: string
          description: "문제에 대한 자세한 설명"
        instance:
          type: string
          format: uri
          description: "문제가 발생한 특정 URI"

    MemberDTO:
      type: object
      properties:
        memberId:
          type: string
          format: uuid
          description: "회원 고유 식별자"
        username:
          type: string
          description: "사용자 로그인 아이디"
        nickname:
          type: string
          description: "사용자 닉네임"
        favoriteBandId:
          type: integer
          format: int64
          description: "즐겨찾기 된 밴드 ID"
        profileImgUrl:
          type: string
          description: "프로필 이미지 URL"
        createdAt:
          type: string
          format: date-time
          description: "계정 생성 일시"
      required:
        - memberId
        - username
        - nickname
        - profileImgUrl
        - createdAt
      example:
        memberId: "123e4567-e89b-12d3-a456-426614174000"
        username: "user123"
        nickname: "기타리스트"
        favoriteBandId: 42
        profileImgUrl: "https://storage.example.com/profiles/image123.jpg"
        createdAt: "2023-01-15T09:30:00Z"

    FollowDTO:
      type: object
      properties:
        followId:
          type: integer
          format: int64
          description: "팔로우 고유 식별자"
        followingUserId:
          type: string
          format: uuid
          description: "팔로우하는 사용자 ID"
        followedUserId:
          type: string
          format: uuid
          description: "팔로우 받는 사용자 ID"
        followedEachother:
          type: boolean
          description: "상호 팔로우 여부"
      required:
        - followId
        - followingUserId
        - followedUserId
        - followedEachother
      example:
        followId: 123
        followingUserId: "123e4567-e89b-12d3-a456-426614174000"
        followedUserId: "123e4567-e89b-12d3-a456-426614174001"
        followedEachother: false

    NotificationType:
      type: string
      enum: [CHAT, FOLLOW, RECRUITMENT, RANK]
      description: "알림 타입"

    NotificationDTO:
      type: object
      properties:
        notificationId:
          type: integer
          format: int64
          description: "알림 고유 식별자"
        attemptId:
          type: integer
          format: int64
        chatRoomId:
          type: string
          description: "채팅방 ID"
        messageId:
          type: string
          description: "채팅 메시지 ID"
        senderId:
          type: string
          format: uuid
          description: "발신자 ID"
        senderNickname:
          type: string
          description: "발신자 닉네임"
        senderProfileUrl:
          type: string
          description: "발신자 프로필 사진"
        receiverId:
          type: string
          format: uuid
          description: "수신자 ID"
        message:
          type: string
          description: "알림 메시지"
        readOrNot:
          type: boolean
          description: "알림 읽음 여부"
        type:
          $ref: "#/components/schemas/NotificationType"
          description: "알림 타입"
        acceptUrl:
          type: string
          description: "수락 시 사용할 URL"
        rejectUrl:
          type: string
          description: "거절 시 사용할 URL"
        createdAt:
          type: string
          format: date-time
          description: "생성 일시"
        isSuccess:
          type: boolean
        tierAndInstrument:
          type: string

      required:
        - notificationId
        - receiverId
        - message
        - readOrNot
        - type
      example:
        notificationId: 123
        senderId: "123e4567-e89b-12d3-a456-426614174000"
        receiverId: "123e4567-e89b-12d3-a456-426614174001"
        message: "밴드에 가입 요청이 있습니다."
        readOrNot: false
        type: "RECRUITMENT"
        acceptUrl: "/api/band-requests/123/accept"
        rejectUrl: "/api/band-requests/123/reject"

    GoogleAuthRequest:
      type: object
      properties:
        idToken:
          type: string
          description: "구글 인증 ID 토큰"
      required:
        - idToken
      example:
        idToken: "eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ..."

    AuthToken:
      type: object
      properties:
        accessToken:
          type: string
          description: "JWT 액세스 토큰"
        memberId:
          type: string
          format: uuid
          description: "회원 ID"
      required:
        - accessToken
        - memberId
      example:
        accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        memberId: "123e4567-e89b-12d3-a456-426614174000"

    UpdateMemberRequest:
      type: object
      properties:
        nickname:
          type: string
          description: "변경할 닉네임"
        profileImgUrl:
          type: string
          description: "변경할 프로필 이미지 URL"
      example:
        nickname: "드러머"
        profileImgUrl: "https://storage.example.com/profiles/image456.jpg"

    FollowRequest:
      type: object
      properties:
        followedUserId:
          type: string
          format: uuid
          description: "팔로우할 사용자 ID"
      required:
        - followedUserId
      example:
        followedUserId: "123e4567-e89b-12d3-a456-426614174001"

  parameters:
    MemberId:
      name: memberId
      in: path
      description: "회원 ID"
      required: true
      schema:
        type: string
        format: uuid

    FollowId:
      name: followId
      in: path
      description: "팔로우 ID"
      required: true
      schema:
        type: integer
        format: int64

    NotificationId:
      name: notificationId
      in: path
      description: "알림 ID"
      required: true
      schema:
        type: integer
        format: int64

    BandId:
      name: bandId
      in: path
      description: "밴드 ID"
      required: true
      schema:
        type: integer
        format: int64

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT 인증 토큰을 사용합니다. 예: Bearer {token}"

  responses:
    MemberResponse:
      description: "회원 정보 응답"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MemberDTO"

    FollowResponse:
      description: "팔로우 정보 응답"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FollowDTO"

    NotificationResponse:
      description: "알림 정보 응답"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotificationDTO"

    AuthTokenResponse:
      description: "인증 토큰 응답"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthToken"

    PageMemberResponse:
      description: "회원 목록 페이지 응답"
      content:
        application/json:
          schema:
            type: object
            properties:
              content:
                type: array
                items:
                  $ref: "#/components/schemas/MemberDTO"
              pageable:
                type: object
                properties:
                  page:
                    type: integer
                    description: 현재 페이지 번호
                  size:
                    type: integer
                    description: 페이지 크기
                  totalElements:
                    type: integer
                    description: 전체 요소 수
                  totalPages:
                    type: integer
                    description: 전체 페이지 수
                required:
                  - page
                  - size
                  - totalElements
                  - totalPages
            required:
              - content
              - pageable

    PageNotificationResponse:
      description: "알림 목록 페이지 응답"
      content:
        application/json:
          schema:
            type: object
            properties:
              content:
                type: array
                items:
                  $ref: "#/components/schemas/NotificationDTO"
              pageable:
                type: object
                properties:
                  page:
                    type: integer
                    description: 현재 페이지 번호
                  size:
                    type: integer
                    description: 페이지 크기
                  totalElements:
                    type: integer
                    description: 전체 요소 수
                  totalPages:
                    type: integer
                    description: 전체 페이지 수
                required:
                  - page
                  - size
                  - totalElements
                  - totalPages
            required:
              - content
              - pageable

    NotFoundException:
      description: "요청한 리소스를 찾을 수 없습니다."
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ProblemDetail"
              - type: object
                properties:
                  title:
                    type: string
                    example: "리소스를 찾을 수 없습니다."

    UnauthorizedError:
      description: "인증되지 않은 요청입니다."
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ProblemDetail"
              - type: object
                properties:
                  title:
                    type: string
                    example: "인증되지 않은 요청입니다."

    ForbiddenError:
      description: "권한이 없는 요청입니다."
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ProblemDetail"
              - type: object
                properties:
                  title:
                    type: string
                    example: "권한이 없는 요청입니다."

    BadRequestError:
      description: "잘못된 요청입니다."
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ProblemDetail"
              - type: object
                properties:
                  title:
                    type: string
                    example: "잘못된 요청입니다."

  requestBodies:
    GoogleAuthRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GoogleAuthRequest"

    UpdateMemberRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateMemberRequest"

    FollowRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FollowRequest"

paths:
  /api/auth/google:
    post:
      tags:
        - Auth
      operationId: authenticateGoogle
      summary: "구글 OAuth2 인증"
      description: "구글 OAuth2 인증 후 사용자 등록 및 JWT 토큰을 발급합니다. 처음 로그인하는 사용자는 자동으로 회원 가입됩니다."
      requestBody:
        $ref: "#/components/requestBodies/GoogleAuthRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/AuthTokenResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
  
  /api/users:
    post:
      tags:
        - Member
      operationId: testLogin
      summary: "테스트용 더미 사용자 데이터 생성"
      description: "더미 사용자 데이터를 생성합니다. 토큰 값이 반환됩니다."
      responses: 
        '200':
          $ref: "#/components/responses/AuthTokenResponse"
          
  
  /api/notifications:
    get:
      tags:
        - Notification
      operationId: getNotifications
      summary: "알림 목록 조회"
      description: "현재 로그인한 사용자의 알림 목록을 조회합니다. size, page를 쿼리 파라미터로 전달하여 페이징 처리가 가능하며, type 파라미터로 알림 유형을 필터링할 수 있습니다."
      parameters:
        - name: unreadOnly
          in: query
          description: "읽은 메세지만 조회할건지, 안 읽은 메세지도도 조회할건지"
          required: false
          schema:
            type: boolean
      security:
        - BearerAuth: []
      x-spring-paginated: true
      responses:
        "200":
          description: "알림 목록 응답"
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: "#/components/schemas/NotificationDTO"
                  pageable:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 0
                      size:
                        type: integer
                        example: 10
                      totalElements:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 3
                    required:
                      - page
                      - size
                      - totalElements
                      - totalPages
                required:
                  - content
                  - pageable
              example:
                content:
                  - notificationId: 123
                    senderId: "123e4567-e89b-12d3-a456-426614174000"
                    receiverId: "123e4567-e89b-12d3-a456-426614174001"
                    message: "밴드에 가입 요청이 있습니다."
                    readOrNot: false
                    type: "RECRUITMENT"
                    acceptUrl: "/api/band-requests/123/accept"
                    rejectUrl: "/api/band-requests/123/reject"
                    createdAt: "2023-03-15T14:30:00Z"
                  - notificationId: 124
                    senderId: "123e4567-e89b-12d3-a456-426614174002"
                    receiverId: "123e4567-e89b-12d3-a456-426614174001"
                    message: "새로운 팔로워가 있습니다."
                    readOrNot: true
                    type: "FOLLOW"
                    createdAt: "2023-03-14T10:15:00Z"
                pageable:
                  page: 0
                  size: 10
                  totalElements: 25
                  totalPages: 3
        "401":
          $ref: "#/components/responses/UnauthorizedError"

security:
  - BearerAuth: []
