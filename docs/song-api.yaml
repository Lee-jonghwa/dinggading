openapi: 3.0.0
info:
  title: 딩가딩 Song API
  version: 1.0.0
  description: "딩가딩 서비스의 Song Aggregate와 관련된 API를 정의합니다. 곡 정보, 악기별 음원, 티어 정보 등을 관리하는 API를 포함합니다."

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT 인증 토큰을 사용합니다. 예: Bearer {token}"

  schemas:
    SongDTO:
      type: object
      properties:
        songId:
          type: integer
          description: "곡 고유 식별자"
          example: 42
        title:
          type: string
          description: "곡 제목"
          example: "Bohemian Rhapsody"
        youtubeUrl:
          type: string
          description: "유튜브 동영상 URL"
          example: "https://www.youtube.com/watch?v=fJ9rUzIMcZQ"
        tier:
          type: string
          enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
          description: "곡 난이도 티어"
          example: "GOLD"
      required:
        - songId
        - title
        - youtubeUrl
        - tier

    SongByInstrumentDTO:
      type: object
      properties:
        songByInstrumentId:
          type: integer
          description: "악기별 곡 고유 식별자"
          example: 101
        songId:
          type: integer
          description: "곡 ID"
          example: 42
        instrument:
          type: string
          enum: [VOCAL, GUITAR, DRUM, BASS]
          description: "악기 유형"
          example: "GUITAR"
        mediaUrl:
          type: string
          description: "악기별 연주 음원 URL"
          example: "https://dingading.com/media/songs/42/guitar.mp3"
      required:
        - songByInstrumentId
        - songId
        - instrument

    SongStatisticsDTO:
      type: object
      properties:
        songId:
          type: integer
          description: "곡 ID"
          example: 42
        title:
          type: string
          description: "곡 제목"
          example: "Bohemian Rhapsody"
        totalAttempts:
          type: integer
          description: "총 도전 횟수"
          example: 1245
        successRate:
          type: number
          format: float
          description: "성공률 (%)"
          example: 67.8
        averageAttempts:
          type: number
          format: float
          description: "평균 도전 횟수"
          example: 3.2
      required:
        - songId
        - title
        - totalAttempts
        - successRate
        - averageAttempts

    InstrumentStatisticsDTO:
      type: object
      properties:
        songByInstrumentId:
          type: integer
          description: "악기별 곡 ID"
          example: 101
        instrument:
          type: string
          enum: [VOCAL, GUITAR, DRUM, BASS]
          description: "악기 유형"
          example: "GUITAR"
        totalAttempts:
          type: integer
          description: "총 도전 횟수"
          example: 328
        successRate:
          type: number
          format: float
          description: "성공률 (%)"
          example: 55.3
        beatAverage:
          type: number
          format: float
          description: "평균 박자 점수"
          example: 78.4
        tuneAverage:
          type: number
          format: float
          description: "평균 음정 점수"
          example: 82.1
        toneAverage:
          type: number
          format: float
          description: "평균 음색 점수"
          example: 75.9
      required:
        - songByInstrumentId
        - instrument
        - totalAttempts
        - successRate

    PageableDTO:
      type: object
      properties:
        page:
          type: integer
          description: "현재 페이지 번호"
          example: 0
        size:
          type: integer
          description: "페이지 크기"
          example: 10
        totalElements:
          type: integer
          description: "전체 요소 수"
          example: 42
        totalPages:
          type: integer
          description: "전체 페이지 수"
          example: 5
      required:
        - page
        - size
        - totalElements
        - totalPages

    ProblemDetail:
      title: Problem Detail
      description: 모든 에러 응답에 대한 스키마
      type: object
      properties:
        type:
          title: Type
          description: 에러 응답을 발생시킨 전체 URL
          type: string
          format: uri
          example: 'http://localhost:8080/api/songs/42'
        title:
          title: Title
          description: 짧은 에러 제목
          type: string
          example: 'ResourceNotFoundException'
        status:
          title: Status
          description: HTTP 상태 코드
          type: integer
          format: int32
          minimum: 400
          maximum: 600
          exclusiveMaximum: true
          example: 404
        detail:
          title: Detail
          description: 상세 에러 메시지
          type: string
          example: 'Song with ID 42 not found'
        timestamp:
          title: Timestamp
          description: 에러 발생 시간
          type: string
          format: date-time
          example: '2024-03-21T14:59:21.3820407Z'
      required:
        - type
        - title
        - status
        - detail
        - timestamp

  parameters:
    SongId:
      name: songId
      in: path
      description: "곡 ID"
      required: true
      schema:
        type: integer
        format: int64
      example: 42

    InstrumentParam:
      name: instrument
      in: path
      description: "악기 유형"
      required: true
      schema:
        type: string
        enum: [VOCAL, GUITAR, DRUM, BASS]
      example: "GUITAR"

    TierParam:
      name: tier
      in: query
      description: "티어 기준 필터링"
      required: false
      schema:
        type: string
        enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
      example: "SILVER"

    InstrumentQueryParam:
      name: instrument
      in: query
      description: "악기 유형 기준 필터링"
      required: false
      schema:
        type: string
        enum: [VOCAL, GUITAR, DRUM, BASS]
      example: "VOCAL"

  requestBodies:
    CreateSongRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                description: "곡 제목"
                example: "Bohemian Rhapsody"
              youtubeUrl:
                type: string
                description: "유튜브 동영상 URL"
                example: "https://www.youtube.com/watch?v=fJ9rUzIMcZQ"
              tier:
                type: string
                enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
                description: "곡 난이도 티어"
                example: "GOLD"
            required:
              - title
              - youtubeUrl
              - tier

    CreateSongByInstrumentRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              instrument:
                type: string
                enum: [VOCAL, GUITAR, DRUM, BASS]
                description: "악기 유형"
                example: "GUITAR"
              mediaUrl:
                type: string
                description: "악기별 연주 음원 URL"
                example: "https://dingading.com/media/songs/42/guitar.mp3"
            required:
              - instrument
              - mediaUrl

    UpdateSongRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                description: "곡 제목"
                example: "Bohemian Rhapsody (Remastered)"
              youtubeUrl:
                type: string
                description: "유튜브 동영상 URL"
                example: "https://www.youtube.com/watch?v=fJ9rUzIMcZQ"
              tier:
                type: string
                enum: [UNRANKED, IRON, BRONZE, SILVER, GOLD, PLATINUM, DIAMOND]
                description: "곡 난이도 티어"
                example: "PLATINUM"

    UpdateSongByInstrumentRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              mediaUrl:
                type: string
                description: "악기별 연주 음원 URL"
                example: "https://dingading.com/media/songs/42/guitar_updated.mp3"
            required:
              - mediaUrl

  responses:
    SongResponse:
      description: "곡 정보 응답"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SongDTO'

    SongListResponse:
      description: "곡 목록 응답"
      content:
        application/json:
          schema:
            type: object
            properties:
              content:
                type: array
                items:
                  $ref: '#/components/schemas/SongDTO'
              pageable:
                $ref: '#/components/schemas/PageableDTO'
            required:
              - content
              - pageable

    SongByInstrumentResponse:
      description: "악기별 곡 정보 응답"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SongByInstrumentDTO'

    SongByInstrumentsResponse:
      description: "악기별 곡 목록 응답"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/SongByInstrumentDTO'

    SongStatisticsResponse:
      description: "곡 통계 정보 응답"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SongStatisticsDTO'

    SongStatisticsListResponse:
      description: "곡 통계 목록 응답"
      content:
        application/json:
          schema:
            type: object
            properties:
              content:
                type: array
                items:
                  $ref: '#/components/schemas/SongStatisticsDTO'
              pageable:
                $ref: '#/components/schemas/PageableDTO'
            required:
              - content
              - pageable

    InstrumentStatisticsResponse:
      description: "악기별 통계 정보 응답"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InstrumentStatisticsDTO'

    BadRequestError:
      description: "잘못된 요청"
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemDetail'
              - type: object
                properties:
                  title:
                    type: string
                    example: "잘못된 요청"
                  status:
                    type: integer
                    example: 400
                  detail:
                    type: string
                    example: "요청 형식이 올바르지 않습니다."

    UnauthorizedError:
      description: "인증 실패"
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemDetail'
              - type: object
                properties:
                  title:
                    type: string
                    example: "인증 실패"
                  status:
                    type: integer
                    example: 401
                  detail:
                    type: string
                    example: "인증 정보가 유효하지 않습니다."

    ForbiddenError:
      description: "접근 권한 없음"
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemDetail'
              - type: object
                properties:
                  title:
                    type: string
                    example: "접근 권한 없음"
                  status:
                    type: integer
                    example: 403
                  detail:
                    type: string
                    example: "해당 리소스에 접근할 권한이 없습니다."

    NotFoundError:
      description: "리소스를 찾을 수 없음"
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProblemDetail'
              - type: object
                properties:
                  title:
                    type: string
                    example: "리소스를 찾을 수 없음"
                  status:
                    type: integer
                    example: 404
                  detail:
                    type: string
                    example: "요청한 리소스를 찾을 수 없습니다."


security:
  - BearerAuth: []

paths:
  # ==================== 중요도: 상 (핵심 기능) ====================

  /songs:
    get:
      tags:
        - Song
      operationId: getSongs
      summary: "곡 목록 조회"
      description: "곡 목록을 조회합니다. 티어, 악기 유형으로 필터링이 가능합니다. 페이지네이션을 지원합니다(page, size 쿼리 파라미터를 사용하여 페이지 번호와 크기를 지정할 수 있습니다)."
      security: []
      parameters:
        - $ref: '#/components/parameters/TierParam'
        - $ref: '#/components/parameters/InstrumentQueryParam'
      x-spring-paginated: true
      responses:
        '200':
          $ref: '#/components/responses/SongListResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

    post:
      tags:
        - Song
      operationId: createSong
      summary: "새로운 곡 등록"
      description: "새로운 곡을 등록합니다. 곡의 기본 정보(제목, 유튜브 URL, 티어)를 포함합니다."
      requestBody:
        $ref: '#/components/requestBodies/CreateSongRequest'
      responses:
        '201':
          $ref: '#/components/responses/SongResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /songs/{songId}:
    get:
      tags:
        - Song
      operationId: getSong
      summary: "특정 곡 조회"
      description: "특정 곡의 상세 정보를 조회합니다."
      security: []
      parameters:
        - $ref: '#/components/parameters/SongId'
      responses:
        '200':
          $ref: '#/components/responses/SongResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      tags:
        - Song
      operationId: updateSong
      summary: "특정 곡 정보 업데이트"
      description: "특정 곡의 정보를 업데이트합니다. 제목, 유튜브 URL, 티어 등을 수정할 수 있습니다."
      parameters:
        - $ref: '#/components/parameters/SongId'
      requestBody:
        $ref: '#/components/requestBodies/UpdateSongRequest'
      deprecated: true
      responses:
        '200':
          $ref: '#/components/responses/SongResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /songs/{songId}/instruments:
    get:
      tags:
        - Song
      operationId: getSongInstruments
      summary: "특정 곡의 악기별 연주 정보 조회"
      description: "특정 곡의 악기별 연주 정보를 조회합니다."
      security: []
      parameters:
        - $ref: '#/components/parameters/SongId'
      responses:
        '200':
          $ref: '#/components/responses/SongByInstrumentsResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

    post:
      tags:
        - Song
      operationId: addSongInstrument
      summary: "특정 곡에 악기별 연주 정보 추가"
      description: "기존 곡에 새로운 악기별 연주 정보를 추가합니다."
      parameters:
        - $ref: '#/components/parameters/SongId'
      requestBody:
        $ref: '#/components/requestBodies/CreateSongByInstrumentRequest'
      responses:
        '201':
          $ref: '#/components/responses/SongByInstrumentResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # ==================== 중요도: 중 (주요 기능) ====================

  /songs/search:
    get:
      tags:
        - Song
      operationId: searchSongs
      summary: "곡 검색"
      description: "제목, 아티스트 등으로 곡을 검색합니다. 부분 일치 검색을 지원합니다. 페이지네이션을 지원합니다(page, size 쿼리 파라미터를 사용하여 페이지 번호와 크기를 지정할 수 있습니다)."
      security: []
      parameters:
        - name: query
          in: query
          description: "검색어"
          required: true
          schema:
            type: string
          example: "Queen"
      x-spring-paginated: true
      deprecated: true
      responses:
        '200':
          $ref: '#/components/responses/SongListResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

  # ==================== 중요도: 하 (부가 기능) ====================

  /songs/statistics:
    get:
      tags:
        - Song
      operationId: getSongStatistics
      summary: "곡별 도전 통계 조회"
      description: "곡별 도전 통계를 조회합니다. 성공률, 평균 도전 횟수 등의 정보를 제공합니다."
      security: []
      x-spring-paginated: true
      deprecated: true
      responses:
        '200':
          $ref: '#/components/responses/SongStatisticsListResponse'

  /songs/{songId}/instruments/{instrument}/statistics:
    get:
      tags:
        - Song
      operationId: getSongInstrumentStatistics
      summary: "특정 곡의 특정 악기에 대한 도전 통계 조회"
      description: "특정 곡의 특정 악기에 대한 도전 통계를 조회합니다."
      security: []
      parameters:
        - $ref: '#/components/parameters/SongId'
        - $ref: '#/components/parameters/InstrumentParam'
      deprecated: true
      responses:
        '200':
          $ref: '#/components/responses/InstrumentStatisticsResponse'

  /songs/{songId}/instruments/{instrument}:
    patch:
      tags:
        - Song
      operationId: updateSongInstrument
      summary: "특정 곡의 특정 악기 정보 부분 업데이트"
      description: "특정 곡의 특정 악기 정보를 부분 업데이트합니다."
      parameters:
        - $ref: '#/components/parameters/SongId'
        - $ref: '#/components/parameters/InstrumentParam'
      requestBody:
        $ref: '#/components/requestBodies/UpdateSongByInstrumentRequest'
      deprecated: true
      responses:
        '200':
          $ref: '#/components/responses/SongByInstrumentResponse'