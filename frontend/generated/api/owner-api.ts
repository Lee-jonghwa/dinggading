/* tslint:disable */
/* eslint-disable */
/**
 * Spring PetClinic
 * Spring PetClinic Sample Application.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Owner } from '../model';
// @ts-ignore
import type { OwnerFields } from '../model';
// @ts-ignore
import type { ProblemDetail } from '../model';
/**
 * OwnerApi - axios parameter creator
 * @export
 */
export const OwnerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Records the details of a new pet owner.
         * @summary Adds a pet owner
         * @param {OwnerFields} ownerFields The pet owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOwner: async (ownerFields: OwnerFields, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ownerFields' is not null or undefined
            assertParamExists('addOwner', 'ownerFields', ownerFields)
            const localVarPath = `/owners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ownerFields, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the owner or a 404 error.
         * @summary Delete an owner by ID
         * @param {number} ownerId The ID of the owner.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOwner: async (ownerId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ownerId' is not null or undefined
            assertParamExists('deleteOwner', 'ownerId', ownerId)
            const localVarPath = `/owners/{ownerId}`
                .replace(`{${"ownerId"}}`, encodeURIComponent(String(ownerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the pet owner or a 404 error.
         * @summary Get a pet owner by ID
         * @param {number} ownerId The ID of the pet owner.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwner: async (ownerId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ownerId' is not null or undefined
            assertParamExists('getOwner', 'ownerId', ownerId)
            const localVarPath = `/owners/{ownerId}`
                .replace(`{${"ownerId"}}`, encodeURIComponent(String(ownerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of pet owners.
         * @summary Lists pet owners
         * @param {string} [lastName] Last name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOwners: async (lastName?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/owners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lastName !== undefined) {
                localVarQueryParameter['lastName'] = lastName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the pet owner record with the specified details.
         * @summary Update a pet owner\'s details
         * @param {number} ownerId The ID of the pet owner.
         * @param {OwnerFields} ownerFields The pet owner details to use for the update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOwner: async (ownerId: number, ownerFields: OwnerFields, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ownerId' is not null or undefined
            assertParamExists('updateOwner', 'ownerId', ownerId)
            // verify required parameter 'ownerFields' is not null or undefined
            assertParamExists('updateOwner', 'ownerFields', ownerFields)
            const localVarPath = `/owners/{ownerId}`
                .replace(`{${"ownerId"}}`, encodeURIComponent(String(ownerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ownerFields, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OwnerApi - functional programming interface
 * @export
 */
export const OwnerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OwnerApiAxiosParamCreator(configuration)
    return {
        /**
         * Records the details of a new pet owner.
         * @summary Adds a pet owner
         * @param {OwnerFields} ownerFields The pet owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addOwner(ownerFields: OwnerFields, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Owner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOwner(ownerFields, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OwnerApi.addOwner']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the owner or a 404 error.
         * @summary Delete an owner by ID
         * @param {number} ownerId The ID of the owner.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOwner(ownerId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Owner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOwner(ownerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OwnerApi.deleteOwner']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the pet owner or a 404 error.
         * @summary Get a pet owner by ID
         * @param {number} ownerId The ID of the pet owner.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOwner(ownerId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Owner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOwner(ownerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OwnerApi.getOwner']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns an array of pet owners.
         * @summary Lists pet owners
         * @param {string} [lastName] Last name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOwners(lastName?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Owner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOwners(lastName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OwnerApi.listOwners']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the pet owner record with the specified details.
         * @summary Update a pet owner\'s details
         * @param {number} ownerId The ID of the pet owner.
         * @param {OwnerFields} ownerFields The pet owner details to use for the update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOwner(ownerId: number, ownerFields: OwnerFields, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Owner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOwner(ownerId, ownerFields, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OwnerApi.updateOwner']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OwnerApi - factory interface
 * @export
 */
export const OwnerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OwnerApiFp(configuration)
    return {
        /**
         * Records the details of a new pet owner.
         * @summary Adds a pet owner
         * @param {OwnerApiAddOwnerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOwner(requestParameters: OwnerApiAddOwnerRequest, options?: RawAxiosRequestConfig): AxiosPromise<Owner> {
            return localVarFp.addOwner(requestParameters.ownerFields, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the owner or a 404 error.
         * @summary Delete an owner by ID
         * @param {OwnerApiDeleteOwnerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOwner(requestParameters: OwnerApiDeleteOwnerRequest, options?: RawAxiosRequestConfig): AxiosPromise<Owner> {
            return localVarFp.deleteOwner(requestParameters.ownerId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the pet owner or a 404 error.
         * @summary Get a pet owner by ID
         * @param {OwnerApiGetOwnerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwner(requestParameters: OwnerApiGetOwnerRequest, options?: RawAxiosRequestConfig): AxiosPromise<Owner> {
            return localVarFp.getOwner(requestParameters.ownerId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an array of pet owners.
         * @summary Lists pet owners
         * @param {OwnerApiListOwnersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOwners(requestParameters: OwnerApiListOwnersRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<Owner>> {
            return localVarFp.listOwners(requestParameters.lastName, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the pet owner record with the specified details.
         * @summary Update a pet owner\'s details
         * @param {OwnerApiUpdateOwnerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOwner(requestParameters: OwnerApiUpdateOwnerRequest, options?: RawAxiosRequestConfig): AxiosPromise<Owner> {
            return localVarFp.updateOwner(requestParameters.ownerId, requestParameters.ownerFields, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OwnerApi - interface
 * @export
 * @interface OwnerApi
 */
export interface OwnerApiInterface {
    /**
     * Records the details of a new pet owner.
     * @summary Adds a pet owner
     * @param {OwnerApiAddOwnerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OwnerApiInterface
     */
    addOwner(requestParameters: OwnerApiAddOwnerRequest, options?: RawAxiosRequestConfig): AxiosPromise<Owner>;

    /**
     * Returns the owner or a 404 error.
     * @summary Delete an owner by ID
     * @param {OwnerApiDeleteOwnerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OwnerApiInterface
     */
    deleteOwner(requestParameters: OwnerApiDeleteOwnerRequest, options?: RawAxiosRequestConfig): AxiosPromise<Owner>;

    /**
     * Returns the pet owner or a 404 error.
     * @summary Get a pet owner by ID
     * @param {OwnerApiGetOwnerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OwnerApiInterface
     */
    getOwner(requestParameters: OwnerApiGetOwnerRequest, options?: RawAxiosRequestConfig): AxiosPromise<Owner>;

    /**
     * Returns an array of pet owners.
     * @summary Lists pet owners
     * @param {OwnerApiListOwnersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OwnerApiInterface
     */
    listOwners(requestParameters?: OwnerApiListOwnersRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Owner>>;

    /**
     * Updates the pet owner record with the specified details.
     * @summary Update a pet owner\'s details
     * @param {OwnerApiUpdateOwnerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OwnerApiInterface
     */
    updateOwner(requestParameters: OwnerApiUpdateOwnerRequest, options?: RawAxiosRequestConfig): AxiosPromise<Owner>;

}

/**
 * Request parameters for addOwner operation in OwnerApi.
 * @export
 * @interface OwnerApiAddOwnerRequest
 */
export interface OwnerApiAddOwnerRequest {
    /**
     * The pet owner
     * @type {OwnerFields}
     * @memberof OwnerApiAddOwner
     */
    readonly ownerFields: OwnerFields
}

/**
 * Request parameters for deleteOwner operation in OwnerApi.
 * @export
 * @interface OwnerApiDeleteOwnerRequest
 */
export interface OwnerApiDeleteOwnerRequest {
    /**
     * The ID of the owner.
     * @type {number}
     * @memberof OwnerApiDeleteOwner
     */
    readonly ownerId: number
}

/**
 * Request parameters for getOwner operation in OwnerApi.
 * @export
 * @interface OwnerApiGetOwnerRequest
 */
export interface OwnerApiGetOwnerRequest {
    /**
     * The ID of the pet owner.
     * @type {number}
     * @memberof OwnerApiGetOwner
     */
    readonly ownerId: number
}

/**
 * Request parameters for listOwners operation in OwnerApi.
 * @export
 * @interface OwnerApiListOwnersRequest
 */
export interface OwnerApiListOwnersRequest {
    /**
     * Last name.
     * @type {string}
     * @memberof OwnerApiListOwners
     */
    readonly lastName?: string
}

/**
 * Request parameters for updateOwner operation in OwnerApi.
 * @export
 * @interface OwnerApiUpdateOwnerRequest
 */
export interface OwnerApiUpdateOwnerRequest {
    /**
     * The ID of the pet owner.
     * @type {number}
     * @memberof OwnerApiUpdateOwner
     */
    readonly ownerId: number

    /**
     * The pet owner details to use for the update.
     * @type {OwnerFields}
     * @memberof OwnerApiUpdateOwner
     */
    readonly ownerFields: OwnerFields
}

/**
 * OwnerApi - object-oriented interface
 * @export
 * @class OwnerApi
 * @extends {BaseAPI}
 */
export class OwnerApi extends BaseAPI implements OwnerApiInterface {
    /**
     * Records the details of a new pet owner.
     * @summary Adds a pet owner
     * @param {OwnerApiAddOwnerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OwnerApi
     */
    public addOwner(requestParameters: OwnerApiAddOwnerRequest, options?: RawAxiosRequestConfig) {
        return OwnerApiFp(this.configuration).addOwner(requestParameters.ownerFields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the owner or a 404 error.
     * @summary Delete an owner by ID
     * @param {OwnerApiDeleteOwnerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OwnerApi
     */
    public deleteOwner(requestParameters: OwnerApiDeleteOwnerRequest, options?: RawAxiosRequestConfig) {
        return OwnerApiFp(this.configuration).deleteOwner(requestParameters.ownerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the pet owner or a 404 error.
     * @summary Get a pet owner by ID
     * @param {OwnerApiGetOwnerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OwnerApi
     */
    public getOwner(requestParameters: OwnerApiGetOwnerRequest, options?: RawAxiosRequestConfig) {
        return OwnerApiFp(this.configuration).getOwner(requestParameters.ownerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an array of pet owners.
     * @summary Lists pet owners
     * @param {OwnerApiListOwnersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OwnerApi
     */
    public listOwners(requestParameters: OwnerApiListOwnersRequest = {}, options?: RawAxiosRequestConfig) {
        return OwnerApiFp(this.configuration).listOwners(requestParameters.lastName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the pet owner record with the specified details.
     * @summary Update a pet owner\'s details
     * @param {OwnerApiUpdateOwnerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OwnerApi
     */
    public updateOwner(requestParameters: OwnerApiUpdateOwnerRequest, options?: RawAxiosRequestConfig) {
        return OwnerApiFp(this.configuration).updateOwner(requestParameters.ownerId, requestParameters.ownerFields, options).then((request) => request(this.axios, this.basePath));
    }
}

