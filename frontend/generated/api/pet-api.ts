/* tslint:disable */
/* eslint-disable */
/**
 * Spring PetClinic
 * Spring PetClinic Sample Application.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Pet } from '../model';
// @ts-ignore
import type { PetFields } from '../model';
// @ts-ignore
import type { ProblemDetail } from '../model';
/**
 * PetApi - axios parameter creator
 * @export
 */
export const PetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a pet .
         * @summary Create a pet
         * @param {Pet} pet The pet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPet: async (pet: Pet, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pet' is not null or undefined
            assertParamExists('addPet', 'pet', pet)
            const localVarPath = `/pets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pet, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Records the details of a new pet.
         * @summary Adds a pet to an owner
         * @param {number} ownerId The ID of the pet owner.
         * @param {PetFields} petFields The details of the new pet.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPetToOwner: async (ownerId: number, petFields: PetFields, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ownerId' is not null or undefined
            assertParamExists('addPetToOwner', 'ownerId', ownerId)
            // verify required parameter 'petFields' is not null or undefined
            assertParamExists('addPetToOwner', 'petFields', petFields)
            const localVarPath = `/owners/{ownerId}/pets`
                .replace(`{${"ownerId"}}`, encodeURIComponent(String(ownerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(petFields, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the pet or a 404 error.
         * @summary Delete a pet by ID
         * @param {number} petId The ID of the pet.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePet: async (petId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'petId' is not null or undefined
            assertParamExists('deletePet', 'petId', petId)
            const localVarPath = `/pets/{petId}`
                .replace(`{${"petId"}}`, encodeURIComponent(String(petId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the pet or a 404 error.
         * @summary Get a pet by ID
         * @param {number} ownerId The ID of the pet owner.
         * @param {number} petId The ID of the pet.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwnersPet: async (ownerId: number, petId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ownerId' is not null or undefined
            assertParamExists('getOwnersPet', 'ownerId', ownerId)
            // verify required parameter 'petId' is not null or undefined
            assertParamExists('getOwnersPet', 'petId', petId)
            const localVarPath = `/owners/{ownerId}/pets/{petId}`
                .replace(`{${"ownerId"}}`, encodeURIComponent(String(ownerId)))
                .replace(`{${"petId"}}`, encodeURIComponent(String(petId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the pet  or a 404 error.
         * @summary Get a pet by ID
         * @param {number} petId The ID of the pet.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPet: async (petId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'petId' is not null or undefined
            assertParamExists('getPet', 'petId', petId)
            const localVarPath = `/pets/{petId}`
                .replace(`{${"petId"}}`, encodeURIComponent(String(petId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of pet .
         * @summary Lists pet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the pet record with the specified details.
         * @summary Update a pet\'s details
         * @param {number} ownerId The ID of the pet owner.
         * @param {number} petId The ID of the pet.
         * @param {PetFields} petFields The pet details to use for the update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOwnersPet: async (ownerId: number, petId: number, petFields: PetFields, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ownerId' is not null or undefined
            assertParamExists('updateOwnersPet', 'ownerId', ownerId)
            // verify required parameter 'petId' is not null or undefined
            assertParamExists('updateOwnersPet', 'petId', petId)
            // verify required parameter 'petFields' is not null or undefined
            assertParamExists('updateOwnersPet', 'petFields', petFields)
            const localVarPath = `/owners/{ownerId}/pets/{petId}`
                .replace(`{${"ownerId"}}`, encodeURIComponent(String(ownerId)))
                .replace(`{${"petId"}}`, encodeURIComponent(String(petId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(petFields, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the pet or a 404 error.
         * @summary Update a pet by ID
         * @param {number} petId The ID of the pet.
         * @param {Pet} pet The pet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePet: async (petId: number, pet: Pet, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'petId' is not null or undefined
            assertParamExists('updatePet', 'petId', petId)
            // verify required parameter 'pet' is not null or undefined
            assertParamExists('updatePet', 'pet', pet)
            const localVarPath = `/pets/{petId}`
                .replace(`{${"petId"}}`, encodeURIComponent(String(petId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pet, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PetApi - functional programming interface
 * @export
 */
export const PetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PetApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a pet .
         * @summary Create a pet
         * @param {Pet} pet The pet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPet(pet: Pet, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPet(pet, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PetApi.addPet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Records the details of a new pet.
         * @summary Adds a pet to an owner
         * @param {number} ownerId The ID of the pet owner.
         * @param {PetFields} petFields The details of the new pet.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPetToOwner(ownerId: number, petFields: PetFields, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPetToOwner(ownerId, petFields, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PetApi.addPetToOwner']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the pet or a 404 error.
         * @summary Delete a pet by ID
         * @param {number} petId The ID of the pet.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePet(petId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePet(petId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PetApi.deletePet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the pet or a 404 error.
         * @summary Get a pet by ID
         * @param {number} ownerId The ID of the pet owner.
         * @param {number} petId The ID of the pet.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOwnersPet(ownerId: number, petId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOwnersPet(ownerId, petId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PetApi.getOwnersPet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the pet  or a 404 error.
         * @summary Get a pet by ID
         * @param {number} petId The ID of the pet.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPet(petId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPet(petId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PetApi.getPet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns an array of pet .
         * @summary Lists pet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPets(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PetApi.listPets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the pet record with the specified details.
         * @summary Update a pet\'s details
         * @param {number} ownerId The ID of the pet owner.
         * @param {number} petId The ID of the pet.
         * @param {PetFields} petFields The pet details to use for the update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOwnersPet(ownerId: number, petId: number, petFields: PetFields, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOwnersPet(ownerId, petId, petFields, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PetApi.updateOwnersPet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the pet or a 404 error.
         * @summary Update a pet by ID
         * @param {number} petId The ID of the pet.
         * @param {Pet} pet The pet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePet(petId: number, pet: Pet, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePet(petId, pet, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PetApi.updatePet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PetApi - factory interface
 * @export
 */
export const PetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PetApiFp(configuration)
    return {
        /**
         * Creates a pet .
         * @summary Create a pet
         * @param {PetApiAddPetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPet(requestParameters: PetApiAddPetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Pet> {
            return localVarFp.addPet(requestParameters.pet, options).then((request) => request(axios, basePath));
        },
        /**
         * Records the details of a new pet.
         * @summary Adds a pet to an owner
         * @param {PetApiAddPetToOwnerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPetToOwner(requestParameters: PetApiAddPetToOwnerRequest, options?: RawAxiosRequestConfig): AxiosPromise<Pet> {
            return localVarFp.addPetToOwner(requestParameters.ownerId, requestParameters.petFields, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the pet or a 404 error.
         * @summary Delete a pet by ID
         * @param {PetApiDeletePetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePet(requestParameters: PetApiDeletePetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Pet> {
            return localVarFp.deletePet(requestParameters.petId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the pet or a 404 error.
         * @summary Get a pet by ID
         * @param {PetApiGetOwnersPetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwnersPet(requestParameters: PetApiGetOwnersPetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Pet> {
            return localVarFp.getOwnersPet(requestParameters.ownerId, requestParameters.petId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the pet  or a 404 error.
         * @summary Get a pet by ID
         * @param {PetApiGetPetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPet(requestParameters: PetApiGetPetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Pet> {
            return localVarFp.getPet(requestParameters.petId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an array of pet .
         * @summary Lists pet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets(options?: RawAxiosRequestConfig): AxiosPromise<Array<Pet>> {
            return localVarFp.listPets(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the pet record with the specified details.
         * @summary Update a pet\'s details
         * @param {PetApiUpdateOwnersPetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOwnersPet(requestParameters: PetApiUpdateOwnersPetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateOwnersPet(requestParameters.ownerId, requestParameters.petId, requestParameters.petFields, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the pet or a 404 error.
         * @summary Update a pet by ID
         * @param {PetApiUpdatePetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePet(requestParameters: PetApiUpdatePetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Pet> {
            return localVarFp.updatePet(requestParameters.petId, requestParameters.pet, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PetApi - interface
 * @export
 * @interface PetApi
 */
export interface PetApiInterface {
    /**
     * Creates a pet .
     * @summary Create a pet
     * @param {PetApiAddPetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApiInterface
     */
    addPet(requestParameters: PetApiAddPetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Pet>;

    /**
     * Records the details of a new pet.
     * @summary Adds a pet to an owner
     * @param {PetApiAddPetToOwnerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApiInterface
     */
    addPetToOwner(requestParameters: PetApiAddPetToOwnerRequest, options?: RawAxiosRequestConfig): AxiosPromise<Pet>;

    /**
     * Returns the pet or a 404 error.
     * @summary Delete a pet by ID
     * @param {PetApiDeletePetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApiInterface
     */
    deletePet(requestParameters: PetApiDeletePetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Pet>;

    /**
     * Returns the pet or a 404 error.
     * @summary Get a pet by ID
     * @param {PetApiGetOwnersPetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApiInterface
     */
    getOwnersPet(requestParameters: PetApiGetOwnersPetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Pet>;

    /**
     * Returns the pet  or a 404 error.
     * @summary Get a pet by ID
     * @param {PetApiGetPetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApiInterface
     */
    getPet(requestParameters: PetApiGetPetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Pet>;

    /**
     * Returns an array of pet .
     * @summary Lists pet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApiInterface
     */
    listPets(options?: RawAxiosRequestConfig): AxiosPromise<Array<Pet>>;

    /**
     * Updates the pet record with the specified details.
     * @summary Update a pet\'s details
     * @param {PetApiUpdateOwnersPetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApiInterface
     */
    updateOwnersPet(requestParameters: PetApiUpdateOwnersPetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Returns the pet or a 404 error.
     * @summary Update a pet by ID
     * @param {PetApiUpdatePetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApiInterface
     */
    updatePet(requestParameters: PetApiUpdatePetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Pet>;

}

/**
 * Request parameters for addPet operation in PetApi.
 * @export
 * @interface PetApiAddPetRequest
 */
export interface PetApiAddPetRequest {
    /**
     * The pet
     * @type {Pet}
     * @memberof PetApiAddPet
     */
    readonly pet: Pet
}

/**
 * Request parameters for addPetToOwner operation in PetApi.
 * @export
 * @interface PetApiAddPetToOwnerRequest
 */
export interface PetApiAddPetToOwnerRequest {
    /**
     * The ID of the pet owner.
     * @type {number}
     * @memberof PetApiAddPetToOwner
     */
    readonly ownerId: number

    /**
     * The details of the new pet.
     * @type {PetFields}
     * @memberof PetApiAddPetToOwner
     */
    readonly petFields: PetFields
}

/**
 * Request parameters for deletePet operation in PetApi.
 * @export
 * @interface PetApiDeletePetRequest
 */
export interface PetApiDeletePetRequest {
    /**
     * The ID of the pet.
     * @type {number}
     * @memberof PetApiDeletePet
     */
    readonly petId: number
}

/**
 * Request parameters for getOwnersPet operation in PetApi.
 * @export
 * @interface PetApiGetOwnersPetRequest
 */
export interface PetApiGetOwnersPetRequest {
    /**
     * The ID of the pet owner.
     * @type {number}
     * @memberof PetApiGetOwnersPet
     */
    readonly ownerId: number

    /**
     * The ID of the pet.
     * @type {number}
     * @memberof PetApiGetOwnersPet
     */
    readonly petId: number
}

/**
 * Request parameters for getPet operation in PetApi.
 * @export
 * @interface PetApiGetPetRequest
 */
export interface PetApiGetPetRequest {
    /**
     * The ID of the pet.
     * @type {number}
     * @memberof PetApiGetPet
     */
    readonly petId: number
}

/**
 * Request parameters for updateOwnersPet operation in PetApi.
 * @export
 * @interface PetApiUpdateOwnersPetRequest
 */
export interface PetApiUpdateOwnersPetRequest {
    /**
     * The ID of the pet owner.
     * @type {number}
     * @memberof PetApiUpdateOwnersPet
     */
    readonly ownerId: number

    /**
     * The ID of the pet.
     * @type {number}
     * @memberof PetApiUpdateOwnersPet
     */
    readonly petId: number

    /**
     * The pet details to use for the update.
     * @type {PetFields}
     * @memberof PetApiUpdateOwnersPet
     */
    readonly petFields: PetFields
}

/**
 * Request parameters for updatePet operation in PetApi.
 * @export
 * @interface PetApiUpdatePetRequest
 */
export interface PetApiUpdatePetRequest {
    /**
     * The ID of the pet.
     * @type {number}
     * @memberof PetApiUpdatePet
     */
    readonly petId: number

    /**
     * The pet
     * @type {Pet}
     * @memberof PetApiUpdatePet
     */
    readonly pet: Pet
}

/**
 * PetApi - object-oriented interface
 * @export
 * @class PetApi
 * @extends {BaseAPI}
 */
export class PetApi extends BaseAPI implements PetApiInterface {
    /**
     * Creates a pet .
     * @summary Create a pet
     * @param {PetApiAddPetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApi
     */
    public addPet(requestParameters: PetApiAddPetRequest, options?: RawAxiosRequestConfig) {
        return PetApiFp(this.configuration).addPet(requestParameters.pet, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Records the details of a new pet.
     * @summary Adds a pet to an owner
     * @param {PetApiAddPetToOwnerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApi
     */
    public addPetToOwner(requestParameters: PetApiAddPetToOwnerRequest, options?: RawAxiosRequestConfig) {
        return PetApiFp(this.configuration).addPetToOwner(requestParameters.ownerId, requestParameters.petFields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the pet or a 404 error.
     * @summary Delete a pet by ID
     * @param {PetApiDeletePetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApi
     */
    public deletePet(requestParameters: PetApiDeletePetRequest, options?: RawAxiosRequestConfig) {
        return PetApiFp(this.configuration).deletePet(requestParameters.petId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the pet or a 404 error.
     * @summary Get a pet by ID
     * @param {PetApiGetOwnersPetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApi
     */
    public getOwnersPet(requestParameters: PetApiGetOwnersPetRequest, options?: RawAxiosRequestConfig) {
        return PetApiFp(this.configuration).getOwnersPet(requestParameters.ownerId, requestParameters.petId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the pet  or a 404 error.
     * @summary Get a pet by ID
     * @param {PetApiGetPetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApi
     */
    public getPet(requestParameters: PetApiGetPetRequest, options?: RawAxiosRequestConfig) {
        return PetApiFp(this.configuration).getPet(requestParameters.petId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an array of pet .
     * @summary Lists pet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApi
     */
    public listPets(options?: RawAxiosRequestConfig) {
        return PetApiFp(this.configuration).listPets(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the pet record with the specified details.
     * @summary Update a pet\'s details
     * @param {PetApiUpdateOwnersPetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApi
     */
    public updateOwnersPet(requestParameters: PetApiUpdateOwnersPetRequest, options?: RawAxiosRequestConfig) {
        return PetApiFp(this.configuration).updateOwnersPet(requestParameters.ownerId, requestParameters.petId, requestParameters.petFields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the pet or a 404 error.
     * @summary Update a pet by ID
     * @param {PetApiUpdatePetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetApi
     */
    public updatePet(requestParameters: PetApiUpdatePetRequest, options?: RawAxiosRequestConfig) {
        return PetApiFp(this.configuration).updatePet(requestParameters.petId, requestParameters.pet, options).then((request) => request(this.axios, this.basePath));
    }
}

