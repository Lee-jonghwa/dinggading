/* tslint:disable */
/* eslint-disable */
/**
 * Spring PetClinic
 * Spring PetClinic Sample Application.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { PetType } from '../model';
// @ts-ignore
import type { PetTypeFields } from '../model';
// @ts-ignore
import type { ProblemDetail } from '../model';
/**
 * PettypesApi - axios parameter creator
 * @export
 */
export const PettypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a pet type .
         * @summary Create a pet type
         * @param {PetTypeFields} petTypeFields The pet type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPetType: async (petTypeFields: PetTypeFields, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'petTypeFields' is not null or undefined
            assertParamExists('addPetType', 'petTypeFields', petTypeFields)
            const localVarPath = `/pettypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(petTypeFields, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the pet type or a 404 error.
         * @summary Delete a pet type by ID
         * @param {number} petTypeId The ID of the pet type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePetType: async (petTypeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'petTypeId' is not null or undefined
            assertParamExists('deletePetType', 'petTypeId', petTypeId)
            const localVarPath = `/pettypes/{petTypeId}`
                .replace(`{${"petTypeId"}}`, encodeURIComponent(String(petTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the pet type or a 404 error.
         * @summary Get a pet type by ID
         * @param {number} petTypeId The ID of the pet type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPetType: async (petTypeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'petTypeId' is not null or undefined
            assertParamExists('getPetType', 'petTypeId', petTypeId)
            const localVarPath = `/pettypes/{petTypeId}`
                .replace(`{${"petTypeId"}}`, encodeURIComponent(String(petTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of pet types.
         * @summary Lists pet types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPetTypes: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pettypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the pet type or a 404 error.
         * @summary Update a pet type by ID
         * @param {number} petTypeId The ID of the pet type.
         * @param {PetType} petType The pet type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePetType: async (petTypeId: number, petType: PetType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'petTypeId' is not null or undefined
            assertParamExists('updatePetType', 'petTypeId', petTypeId)
            // verify required parameter 'petType' is not null or undefined
            assertParamExists('updatePetType', 'petType', petType)
            const localVarPath = `/pettypes/{petTypeId}`
                .replace(`{${"petTypeId"}}`, encodeURIComponent(String(petTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(petType, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PettypesApi - functional programming interface
 * @export
 */
export const PettypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PettypesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a pet type .
         * @summary Create a pet type
         * @param {PetTypeFields} petTypeFields The pet type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPetType(petTypeFields: PetTypeFields, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PetType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPetType(petTypeFields, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PettypesApi.addPetType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the pet type or a 404 error.
         * @summary Delete a pet type by ID
         * @param {number} petTypeId The ID of the pet type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePetType(petTypeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PetType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePetType(petTypeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PettypesApi.deletePetType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the pet type or a 404 error.
         * @summary Get a pet type by ID
         * @param {number} petTypeId The ID of the pet type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPetType(petTypeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PetType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPetType(petTypeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PettypesApi.getPetType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns an array of pet types.
         * @summary Lists pet types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPetTypes(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PetType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPetTypes(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PettypesApi.listPetTypes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the pet type or a 404 error.
         * @summary Update a pet type by ID
         * @param {number} petTypeId The ID of the pet type.
         * @param {PetType} petType The pet type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePetType(petTypeId: number, petType: PetType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PetType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePetType(petTypeId, petType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PettypesApi.updatePetType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PettypesApi - factory interface
 * @export
 */
export const PettypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PettypesApiFp(configuration)
    return {
        /**
         * Creates a pet type .
         * @summary Create a pet type
         * @param {PettypesApiAddPetTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPetType(requestParameters: PettypesApiAddPetTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<PetType> {
            return localVarFp.addPetType(requestParameters.petTypeFields, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the pet type or a 404 error.
         * @summary Delete a pet type by ID
         * @param {PettypesApiDeletePetTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePetType(requestParameters: PettypesApiDeletePetTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<PetType> {
            return localVarFp.deletePetType(requestParameters.petTypeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the pet type or a 404 error.
         * @summary Get a pet type by ID
         * @param {PettypesApiGetPetTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPetType(requestParameters: PettypesApiGetPetTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<PetType> {
            return localVarFp.getPetType(requestParameters.petTypeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an array of pet types.
         * @summary Lists pet types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPetTypes(options?: RawAxiosRequestConfig): AxiosPromise<Array<PetType>> {
            return localVarFp.listPetTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the pet type or a 404 error.
         * @summary Update a pet type by ID
         * @param {PettypesApiUpdatePetTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePetType(requestParameters: PettypesApiUpdatePetTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<PetType> {
            return localVarFp.updatePetType(requestParameters.petTypeId, requestParameters.petType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PettypesApi - interface
 * @export
 * @interface PettypesApi
 */
export interface PettypesApiInterface {
    /**
     * Creates a pet type .
     * @summary Create a pet type
     * @param {PettypesApiAddPetTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PettypesApiInterface
     */
    addPetType(requestParameters: PettypesApiAddPetTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<PetType>;

    /**
     * Returns the pet type or a 404 error.
     * @summary Delete a pet type by ID
     * @param {PettypesApiDeletePetTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PettypesApiInterface
     */
    deletePetType(requestParameters: PettypesApiDeletePetTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<PetType>;

    /**
     * Returns the pet type or a 404 error.
     * @summary Get a pet type by ID
     * @param {PettypesApiGetPetTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PettypesApiInterface
     */
    getPetType(requestParameters: PettypesApiGetPetTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<PetType>;

    /**
     * Returns an array of pet types.
     * @summary Lists pet types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PettypesApiInterface
     */
    listPetTypes(options?: RawAxiosRequestConfig): AxiosPromise<Array<PetType>>;

    /**
     * Returns the pet type or a 404 error.
     * @summary Update a pet type by ID
     * @param {PettypesApiUpdatePetTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PettypesApiInterface
     */
    updatePetType(requestParameters: PettypesApiUpdatePetTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<PetType>;

}

/**
 * Request parameters for addPetType operation in PettypesApi.
 * @export
 * @interface PettypesApiAddPetTypeRequest
 */
export interface PettypesApiAddPetTypeRequest {
    /**
     * The pet type
     * @type {PetTypeFields}
     * @memberof PettypesApiAddPetType
     */
    readonly petTypeFields: PetTypeFields
}

/**
 * Request parameters for deletePetType operation in PettypesApi.
 * @export
 * @interface PettypesApiDeletePetTypeRequest
 */
export interface PettypesApiDeletePetTypeRequest {
    /**
     * The ID of the pet type.
     * @type {number}
     * @memberof PettypesApiDeletePetType
     */
    readonly petTypeId: number
}

/**
 * Request parameters for getPetType operation in PettypesApi.
 * @export
 * @interface PettypesApiGetPetTypeRequest
 */
export interface PettypesApiGetPetTypeRequest {
    /**
     * The ID of the pet type.
     * @type {number}
     * @memberof PettypesApiGetPetType
     */
    readonly petTypeId: number
}

/**
 * Request parameters for updatePetType operation in PettypesApi.
 * @export
 * @interface PettypesApiUpdatePetTypeRequest
 */
export interface PettypesApiUpdatePetTypeRequest {
    /**
     * The ID of the pet type.
     * @type {number}
     * @memberof PettypesApiUpdatePetType
     */
    readonly petTypeId: number

    /**
     * The pet type
     * @type {PetType}
     * @memberof PettypesApiUpdatePetType
     */
    readonly petType: PetType
}

/**
 * PettypesApi - object-oriented interface
 * @export
 * @class PettypesApi
 * @extends {BaseAPI}
 */
export class PettypesApi extends BaseAPI implements PettypesApiInterface {
    /**
     * Creates a pet type .
     * @summary Create a pet type
     * @param {PettypesApiAddPetTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PettypesApi
     */
    public addPetType(requestParameters: PettypesApiAddPetTypeRequest, options?: RawAxiosRequestConfig) {
        return PettypesApiFp(this.configuration).addPetType(requestParameters.petTypeFields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the pet type or a 404 error.
     * @summary Delete a pet type by ID
     * @param {PettypesApiDeletePetTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PettypesApi
     */
    public deletePetType(requestParameters: PettypesApiDeletePetTypeRequest, options?: RawAxiosRequestConfig) {
        return PettypesApiFp(this.configuration).deletePetType(requestParameters.petTypeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the pet type or a 404 error.
     * @summary Get a pet type by ID
     * @param {PettypesApiGetPetTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PettypesApi
     */
    public getPetType(requestParameters: PettypesApiGetPetTypeRequest, options?: RawAxiosRequestConfig) {
        return PettypesApiFp(this.configuration).getPetType(requestParameters.petTypeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an array of pet types.
     * @summary Lists pet types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PettypesApi
     */
    public listPetTypes(options?: RawAxiosRequestConfig) {
        return PettypesApiFp(this.configuration).listPetTypes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the pet type or a 404 error.
     * @summary Update a pet type by ID
     * @param {PettypesApiUpdatePetTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PettypesApi
     */
    public updatePetType(requestParameters: PettypesApiUpdatePetTypeRequest, options?: RawAxiosRequestConfig) {
        return PettypesApiFp(this.configuration).updatePetType(requestParameters.petTypeId, requestParameters.petType, options).then((request) => request(this.axios, this.basePath));
    }
}

