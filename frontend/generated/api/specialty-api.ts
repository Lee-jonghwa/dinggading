/* tslint:disable */
/* eslint-disable */
/**
 * Spring PetClinic
 * Spring PetClinic Sample Application.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ProblemDetail } from '../model';
// @ts-ignore
import type { Specialty } from '../model';
/**
 * SpecialtyApi - axios parameter creator
 * @export
 */
export const SpecialtyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a specialty .
         * @summary Create a specialty
         * @param {Specialty} specialty The specialty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSpecialty: async (specialty: Specialty, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'specialty' is not null or undefined
            assertParamExists('addSpecialty', 'specialty', specialty)
            const localVarPath = `/specialties`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(specialty, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the specialty or a 404 error.
         * @summary Delete a specialty by ID
         * @param {number} specialtyId The ID of the specialty.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpecialty: async (specialtyId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'specialtyId' is not null or undefined
            assertParamExists('deleteSpecialty', 'specialtyId', specialtyId)
            const localVarPath = `/specialties/{specialtyId}`
                .replace(`{${"specialtyId"}}`, encodeURIComponent(String(specialtyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the specialty or a 404 error.
         * @summary Get a specialty by ID
         * @param {number} specialtyId The ID of the speciality.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecialty: async (specialtyId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'specialtyId' is not null or undefined
            assertParamExists('getSpecialty', 'specialtyId', specialtyId)
            const localVarPath = `/specialties/{specialtyId}`
                .replace(`{${"specialtyId"}}`, encodeURIComponent(String(specialtyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of specialty .
         * @summary Lists specialties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSpecialties: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/specialties`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the specialty or a 404 error.
         * @summary Update a specialty by ID
         * @param {number} specialtyId The ID of the specialty.
         * @param {Specialty} specialty The pet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSpecialty: async (specialtyId: number, specialty: Specialty, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'specialtyId' is not null or undefined
            assertParamExists('updateSpecialty', 'specialtyId', specialtyId)
            // verify required parameter 'specialty' is not null or undefined
            assertParamExists('updateSpecialty', 'specialty', specialty)
            const localVarPath = `/specialties/{specialtyId}`
                .replace(`{${"specialtyId"}}`, encodeURIComponent(String(specialtyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(specialty, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpecialtyApi - functional programming interface
 * @export
 */
export const SpecialtyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SpecialtyApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a specialty .
         * @summary Create a specialty
         * @param {Specialty} specialty The specialty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSpecialty(specialty: Specialty, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Specialty>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSpecialty(specialty, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpecialtyApi.addSpecialty']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the specialty or a 404 error.
         * @summary Delete a specialty by ID
         * @param {number} specialtyId The ID of the specialty.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSpecialty(specialtyId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Specialty>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSpecialty(specialtyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpecialtyApi.deleteSpecialty']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the specialty or a 404 error.
         * @summary Get a specialty by ID
         * @param {number} specialtyId The ID of the speciality.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecialty(specialtyId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Specialty>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecialty(specialtyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpecialtyApi.getSpecialty']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns an array of specialty .
         * @summary Lists specialties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSpecialties(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Specialty>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSpecialties(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpecialtyApi.listSpecialties']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the specialty or a 404 error.
         * @summary Update a specialty by ID
         * @param {number} specialtyId The ID of the specialty.
         * @param {Specialty} specialty The pet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSpecialty(specialtyId: number, specialty: Specialty, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Specialty>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSpecialty(specialtyId, specialty, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpecialtyApi.updateSpecialty']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SpecialtyApi - factory interface
 * @export
 */
export const SpecialtyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SpecialtyApiFp(configuration)
    return {
        /**
         * Creates a specialty .
         * @summary Create a specialty
         * @param {SpecialtyApiAddSpecialtyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSpecialty(requestParameters: SpecialtyApiAddSpecialtyRequest, options?: RawAxiosRequestConfig): AxiosPromise<Specialty> {
            return localVarFp.addSpecialty(requestParameters.specialty, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the specialty or a 404 error.
         * @summary Delete a specialty by ID
         * @param {SpecialtyApiDeleteSpecialtyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpecialty(requestParameters: SpecialtyApiDeleteSpecialtyRequest, options?: RawAxiosRequestConfig): AxiosPromise<Specialty> {
            return localVarFp.deleteSpecialty(requestParameters.specialtyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the specialty or a 404 error.
         * @summary Get a specialty by ID
         * @param {SpecialtyApiGetSpecialtyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecialty(requestParameters: SpecialtyApiGetSpecialtyRequest, options?: RawAxiosRequestConfig): AxiosPromise<Specialty> {
            return localVarFp.getSpecialty(requestParameters.specialtyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an array of specialty .
         * @summary Lists specialties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSpecialties(options?: RawAxiosRequestConfig): AxiosPromise<Array<Specialty>> {
            return localVarFp.listSpecialties(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the specialty or a 404 error.
         * @summary Update a specialty by ID
         * @param {SpecialtyApiUpdateSpecialtyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSpecialty(requestParameters: SpecialtyApiUpdateSpecialtyRequest, options?: RawAxiosRequestConfig): AxiosPromise<Specialty> {
            return localVarFp.updateSpecialty(requestParameters.specialtyId, requestParameters.specialty, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SpecialtyApi - interface
 * @export
 * @interface SpecialtyApi
 */
export interface SpecialtyApiInterface {
    /**
     * Creates a specialty .
     * @summary Create a specialty
     * @param {SpecialtyApiAddSpecialtyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyApiInterface
     */
    addSpecialty(requestParameters: SpecialtyApiAddSpecialtyRequest, options?: RawAxiosRequestConfig): AxiosPromise<Specialty>;

    /**
     * Returns the specialty or a 404 error.
     * @summary Delete a specialty by ID
     * @param {SpecialtyApiDeleteSpecialtyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyApiInterface
     */
    deleteSpecialty(requestParameters: SpecialtyApiDeleteSpecialtyRequest, options?: RawAxiosRequestConfig): AxiosPromise<Specialty>;

    /**
     * Returns the specialty or a 404 error.
     * @summary Get a specialty by ID
     * @param {SpecialtyApiGetSpecialtyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyApiInterface
     */
    getSpecialty(requestParameters: SpecialtyApiGetSpecialtyRequest, options?: RawAxiosRequestConfig): AxiosPromise<Specialty>;

    /**
     * Returns an array of specialty .
     * @summary Lists specialties
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyApiInterface
     */
    listSpecialties(options?: RawAxiosRequestConfig): AxiosPromise<Array<Specialty>>;

    /**
     * Returns the specialty or a 404 error.
     * @summary Update a specialty by ID
     * @param {SpecialtyApiUpdateSpecialtyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyApiInterface
     */
    updateSpecialty(requestParameters: SpecialtyApiUpdateSpecialtyRequest, options?: RawAxiosRequestConfig): AxiosPromise<Specialty>;

}

/**
 * Request parameters for addSpecialty operation in SpecialtyApi.
 * @export
 * @interface SpecialtyApiAddSpecialtyRequest
 */
export interface SpecialtyApiAddSpecialtyRequest {
    /**
     * The specialty
     * @type {Specialty}
     * @memberof SpecialtyApiAddSpecialty
     */
    readonly specialty: Specialty
}

/**
 * Request parameters for deleteSpecialty operation in SpecialtyApi.
 * @export
 * @interface SpecialtyApiDeleteSpecialtyRequest
 */
export interface SpecialtyApiDeleteSpecialtyRequest {
    /**
     * The ID of the specialty.
     * @type {number}
     * @memberof SpecialtyApiDeleteSpecialty
     */
    readonly specialtyId: number
}

/**
 * Request parameters for getSpecialty operation in SpecialtyApi.
 * @export
 * @interface SpecialtyApiGetSpecialtyRequest
 */
export interface SpecialtyApiGetSpecialtyRequest {
    /**
     * The ID of the speciality.
     * @type {number}
     * @memberof SpecialtyApiGetSpecialty
     */
    readonly specialtyId: number
}

/**
 * Request parameters for updateSpecialty operation in SpecialtyApi.
 * @export
 * @interface SpecialtyApiUpdateSpecialtyRequest
 */
export interface SpecialtyApiUpdateSpecialtyRequest {
    /**
     * The ID of the specialty.
     * @type {number}
     * @memberof SpecialtyApiUpdateSpecialty
     */
    readonly specialtyId: number

    /**
     * The pet
     * @type {Specialty}
     * @memberof SpecialtyApiUpdateSpecialty
     */
    readonly specialty: Specialty
}

/**
 * SpecialtyApi - object-oriented interface
 * @export
 * @class SpecialtyApi
 * @extends {BaseAPI}
 */
export class SpecialtyApi extends BaseAPI implements SpecialtyApiInterface {
    /**
     * Creates a specialty .
     * @summary Create a specialty
     * @param {SpecialtyApiAddSpecialtyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyApi
     */
    public addSpecialty(requestParameters: SpecialtyApiAddSpecialtyRequest, options?: RawAxiosRequestConfig) {
        return SpecialtyApiFp(this.configuration).addSpecialty(requestParameters.specialty, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the specialty or a 404 error.
     * @summary Delete a specialty by ID
     * @param {SpecialtyApiDeleteSpecialtyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyApi
     */
    public deleteSpecialty(requestParameters: SpecialtyApiDeleteSpecialtyRequest, options?: RawAxiosRequestConfig) {
        return SpecialtyApiFp(this.configuration).deleteSpecialty(requestParameters.specialtyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the specialty or a 404 error.
     * @summary Get a specialty by ID
     * @param {SpecialtyApiGetSpecialtyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyApi
     */
    public getSpecialty(requestParameters: SpecialtyApiGetSpecialtyRequest, options?: RawAxiosRequestConfig) {
        return SpecialtyApiFp(this.configuration).getSpecialty(requestParameters.specialtyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an array of specialty .
     * @summary Lists specialties
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyApi
     */
    public listSpecialties(options?: RawAxiosRequestConfig) {
        return SpecialtyApiFp(this.configuration).listSpecialties(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the specialty or a 404 error.
     * @summary Update a specialty by ID
     * @param {SpecialtyApiUpdateSpecialtyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyApi
     */
    public updateSpecialty(requestParameters: SpecialtyApiUpdateSpecialtyRequest, options?: RawAxiosRequestConfig) {
        return SpecialtyApiFp(this.configuration).updateSpecialty(requestParameters.specialtyId, requestParameters.specialty, options).then((request) => request(this.axios, this.basePath));
    }
}

