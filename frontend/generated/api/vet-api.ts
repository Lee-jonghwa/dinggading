/* tslint:disable */
/* eslint-disable */
/**
 * Spring PetClinic
 * Spring PetClinic Sample Application.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ProblemDetail } from '../model';
// @ts-ignore
import type { Vet } from '../model';
/**
 * VetApi - axios parameter creator
 * @export
 */
export const VetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a vet .
         * @summary Create a Vet
         * @param {Vet} vet The vet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVet: async (vet: Vet, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vet' is not null or undefined
            assertParamExists('addVet', 'vet', vet)
            const localVarPath = `/vets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vet, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the vet or a 404 error.
         * @summary Delete a vet by ID
         * @param {number} vetId The ID of the vet.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVet: async (vetId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vetId' is not null or undefined
            assertParamExists('deleteVet', 'vetId', vetId)
            const localVarPath = `/vets/{vetId}`
                .replace(`{${"vetId"}}`, encodeURIComponent(String(vetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the vet or a 404 error.
         * @summary Get a vet by ID
         * @param {number} vetId The ID of the vet.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVet: async (vetId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vetId' is not null or undefined
            assertParamExists('getVet', 'vetId', vetId)
            const localVarPath = `/vets/{vetId}`
                .replace(`{${"vetId"}}`, encodeURIComponent(String(vetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of vets.
         * @summary Lists vets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the vet or a 404 error.
         * @summary Update a vet  by ID
         * @param {number} vetId The ID of the vet.
         * @param {Vet} vet The vet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVet: async (vetId: number, vet: Vet, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vetId' is not null or undefined
            assertParamExists('updateVet', 'vetId', vetId)
            // verify required parameter 'vet' is not null or undefined
            assertParamExists('updateVet', 'vet', vet)
            const localVarPath = `/vets/{vetId}`
                .replace(`{${"vetId"}}`, encodeURIComponent(String(vetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vet, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VetApi - functional programming interface
 * @export
 */
export const VetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VetApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a vet .
         * @summary Create a Vet
         * @param {Vet} vet The vet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addVet(vet: Vet, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addVet(vet, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VetApi.addVet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the vet or a 404 error.
         * @summary Delete a vet by ID
         * @param {number} vetId The ID of the vet.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVet(vetId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVet(vetId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VetApi.deleteVet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the vet or a 404 error.
         * @summary Get a vet by ID
         * @param {number} vetId The ID of the vet.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVet(vetId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVet(vetId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VetApi.getVet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns an array of vets.
         * @summary Lists vets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Vet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVets(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VetApi.listVets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the vet or a 404 error.
         * @summary Update a vet  by ID
         * @param {number} vetId The ID of the vet.
         * @param {Vet} vet The vet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVet(vetId: number, vet: Vet, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVet(vetId, vet, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VetApi.updateVet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VetApi - factory interface
 * @export
 */
export const VetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VetApiFp(configuration)
    return {
        /**
         * Creates a vet .
         * @summary Create a Vet
         * @param {VetApiAddVetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVet(requestParameters: VetApiAddVetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Vet> {
            return localVarFp.addVet(requestParameters.vet, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the vet or a 404 error.
         * @summary Delete a vet by ID
         * @param {VetApiDeleteVetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVet(requestParameters: VetApiDeleteVetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Vet> {
            return localVarFp.deleteVet(requestParameters.vetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the vet or a 404 error.
         * @summary Get a vet by ID
         * @param {VetApiGetVetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVet(requestParameters: VetApiGetVetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Vet> {
            return localVarFp.getVet(requestParameters.vetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an array of vets.
         * @summary Lists vets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVets(options?: RawAxiosRequestConfig): AxiosPromise<Array<Vet>> {
            return localVarFp.listVets(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the vet or a 404 error.
         * @summary Update a vet  by ID
         * @param {VetApiUpdateVetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVet(requestParameters: VetApiUpdateVetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Vet> {
            return localVarFp.updateVet(requestParameters.vetId, requestParameters.vet, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VetApi - interface
 * @export
 * @interface VetApi
 */
export interface VetApiInterface {
    /**
     * Creates a vet .
     * @summary Create a Vet
     * @param {VetApiAddVetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VetApiInterface
     */
    addVet(requestParameters: VetApiAddVetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Vet>;

    /**
     * Returns the vet or a 404 error.
     * @summary Delete a vet by ID
     * @param {VetApiDeleteVetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VetApiInterface
     */
    deleteVet(requestParameters: VetApiDeleteVetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Vet>;

    /**
     * Returns the vet or a 404 error.
     * @summary Get a vet by ID
     * @param {VetApiGetVetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VetApiInterface
     */
    getVet(requestParameters: VetApiGetVetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Vet>;

    /**
     * Returns an array of vets.
     * @summary Lists vets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VetApiInterface
     */
    listVets(options?: RawAxiosRequestConfig): AxiosPromise<Array<Vet>>;

    /**
     * Returns the vet or a 404 error.
     * @summary Update a vet  by ID
     * @param {VetApiUpdateVetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VetApiInterface
     */
    updateVet(requestParameters: VetApiUpdateVetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Vet>;

}

/**
 * Request parameters for addVet operation in VetApi.
 * @export
 * @interface VetApiAddVetRequest
 */
export interface VetApiAddVetRequest {
    /**
     * The vet
     * @type {Vet}
     * @memberof VetApiAddVet
     */
    readonly vet: Vet
}

/**
 * Request parameters for deleteVet operation in VetApi.
 * @export
 * @interface VetApiDeleteVetRequest
 */
export interface VetApiDeleteVetRequest {
    /**
     * The ID of the vet.
     * @type {number}
     * @memberof VetApiDeleteVet
     */
    readonly vetId: number
}

/**
 * Request parameters for getVet operation in VetApi.
 * @export
 * @interface VetApiGetVetRequest
 */
export interface VetApiGetVetRequest {
    /**
     * The ID of the vet.
     * @type {number}
     * @memberof VetApiGetVet
     */
    readonly vetId: number
}

/**
 * Request parameters for updateVet operation in VetApi.
 * @export
 * @interface VetApiUpdateVetRequest
 */
export interface VetApiUpdateVetRequest {
    /**
     * The ID of the vet.
     * @type {number}
     * @memberof VetApiUpdateVet
     */
    readonly vetId: number

    /**
     * The vet
     * @type {Vet}
     * @memberof VetApiUpdateVet
     */
    readonly vet: Vet
}

/**
 * VetApi - object-oriented interface
 * @export
 * @class VetApi
 * @extends {BaseAPI}
 */
export class VetApi extends BaseAPI implements VetApiInterface {
    /**
     * Creates a vet .
     * @summary Create a Vet
     * @param {VetApiAddVetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VetApi
     */
    public addVet(requestParameters: VetApiAddVetRequest, options?: RawAxiosRequestConfig) {
        return VetApiFp(this.configuration).addVet(requestParameters.vet, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the vet or a 404 error.
     * @summary Delete a vet by ID
     * @param {VetApiDeleteVetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VetApi
     */
    public deleteVet(requestParameters: VetApiDeleteVetRequest, options?: RawAxiosRequestConfig) {
        return VetApiFp(this.configuration).deleteVet(requestParameters.vetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the vet or a 404 error.
     * @summary Get a vet by ID
     * @param {VetApiGetVetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VetApi
     */
    public getVet(requestParameters: VetApiGetVetRequest, options?: RawAxiosRequestConfig) {
        return VetApiFp(this.configuration).getVet(requestParameters.vetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an array of vets.
     * @summary Lists vets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VetApi
     */
    public listVets(options?: RawAxiosRequestConfig) {
        return VetApiFp(this.configuration).listVets(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the vet or a 404 error.
     * @summary Update a vet  by ID
     * @param {VetApiUpdateVetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VetApi
     */
    public updateVet(requestParameters: VetApiUpdateVetRequest, options?: RawAxiosRequestConfig) {
        return VetApiFp(this.configuration).updateVet(requestParameters.vetId, requestParameters.vet, options).then((request) => request(this.axios, this.basePath));
    }
}

