/* tslint:disable */
/* eslint-disable */
/**
 * Spring PetClinic
 * Spring PetClinic Sample Application.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ProblemDetail } from '../model';
// @ts-ignore
import type { Visit } from '../model';
// @ts-ignore
import type { VisitFields } from '../model';
/**
 * VisitApi - axios parameter creator
 * @export
 */
export const VisitApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a visit.
         * @summary Create a visit
         * @param {Visit} visit The visit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVisit: async (visit: Visit, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'visit' is not null or undefined
            assertParamExists('addVisit', 'visit', visit)
            const localVarPath = `/visits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(visit, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Records the details of a new vet visit.
         * @summary Adds a vet visit
         * @param {number} ownerId The ID of the pet owner.
         * @param {number} petId The ID of the pet.
         * @param {VisitFields} visitFields The details of the new vet visit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVisitToOwner: async (ownerId: number, petId: number, visitFields: VisitFields, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ownerId' is not null or undefined
            assertParamExists('addVisitToOwner', 'ownerId', ownerId)
            // verify required parameter 'petId' is not null or undefined
            assertParamExists('addVisitToOwner', 'petId', petId)
            // verify required parameter 'visitFields' is not null or undefined
            assertParamExists('addVisitToOwner', 'visitFields', visitFields)
            const localVarPath = `/owners/{ownerId}/pets/{petId}/visits`
                .replace(`{${"ownerId"}}`, encodeURIComponent(String(ownerId)))
                .replace(`{${"petId"}}`, encodeURIComponent(String(petId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(visitFields, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the visit or a 404 error.
         * @summary Delete a visit by ID
         * @param {number} visitId The ID of the visit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVisit: async (visitId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'visitId' is not null or undefined
            assertParamExists('deleteVisit', 'visitId', visitId)
            const localVarPath = `/visits/{visitId}`
                .replace(`{${"visitId"}}`, encodeURIComponent(String(visitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the visit or a 404 error.
         * @summary Get a visit by ID
         * @param {number} visitId The ID of the visit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVisit: async (visitId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'visitId' is not null or undefined
            assertParamExists('getVisit', 'visitId', visitId)
            const localVarPath = `/visits/{visitId}`
                .replace(`{${"visitId"}}`, encodeURIComponent(String(visitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of visit .
         * @summary Lists visits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVisits: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/visits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the visit or a 404 error.
         * @summary Update a visit by ID
         * @param {number} visitId The ID of the visit.
         * @param {Visit} visit The visit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVisit: async (visitId: number, visit: Visit, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'visitId' is not null or undefined
            assertParamExists('updateVisit', 'visitId', visitId)
            // verify required parameter 'visit' is not null or undefined
            assertParamExists('updateVisit', 'visit', visit)
            const localVarPath = `/visits/{visitId}`
                .replace(`{${"visitId"}}`, encodeURIComponent(String(visitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(visit, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VisitApi - functional programming interface
 * @export
 */
export const VisitApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VisitApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a visit.
         * @summary Create a visit
         * @param {Visit} visit The visit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addVisit(visit: Visit, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Visit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addVisit(visit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VisitApi.addVisit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Records the details of a new vet visit.
         * @summary Adds a vet visit
         * @param {number} ownerId The ID of the pet owner.
         * @param {number} petId The ID of the pet.
         * @param {VisitFields} visitFields The details of the new vet visit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addVisitToOwner(ownerId: number, petId: number, visitFields: VisitFields, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Visit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addVisitToOwner(ownerId, petId, visitFields, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VisitApi.addVisitToOwner']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the visit or a 404 error.
         * @summary Delete a visit by ID
         * @param {number} visitId The ID of the visit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVisit(visitId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Visit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVisit(visitId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VisitApi.deleteVisit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the visit or a 404 error.
         * @summary Get a visit by ID
         * @param {number} visitId The ID of the visit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVisit(visitId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Visit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVisit(visitId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VisitApi.getVisit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns an array of visit .
         * @summary Lists visits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVisits(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Visit>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVisits(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VisitApi.listVisits']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the visit or a 404 error.
         * @summary Update a visit by ID
         * @param {number} visitId The ID of the visit.
         * @param {Visit} visit The visit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVisit(visitId: number, visit: Visit, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Visit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVisit(visitId, visit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VisitApi.updateVisit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VisitApi - factory interface
 * @export
 */
export const VisitApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VisitApiFp(configuration)
    return {
        /**
         * Creates a visit.
         * @summary Create a visit
         * @param {VisitApiAddVisitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVisit(requestParameters: VisitApiAddVisitRequest, options?: RawAxiosRequestConfig): AxiosPromise<Visit> {
            return localVarFp.addVisit(requestParameters.visit, options).then((request) => request(axios, basePath));
        },
        /**
         * Records the details of a new vet visit.
         * @summary Adds a vet visit
         * @param {VisitApiAddVisitToOwnerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVisitToOwner(requestParameters: VisitApiAddVisitToOwnerRequest, options?: RawAxiosRequestConfig): AxiosPromise<Visit> {
            return localVarFp.addVisitToOwner(requestParameters.ownerId, requestParameters.petId, requestParameters.visitFields, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the visit or a 404 error.
         * @summary Delete a visit by ID
         * @param {VisitApiDeleteVisitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVisit(requestParameters: VisitApiDeleteVisitRequest, options?: RawAxiosRequestConfig): AxiosPromise<Visit> {
            return localVarFp.deleteVisit(requestParameters.visitId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the visit or a 404 error.
         * @summary Get a visit by ID
         * @param {VisitApiGetVisitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVisit(requestParameters: VisitApiGetVisitRequest, options?: RawAxiosRequestConfig): AxiosPromise<Visit> {
            return localVarFp.getVisit(requestParameters.visitId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an array of visit .
         * @summary Lists visits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVisits(options?: RawAxiosRequestConfig): AxiosPromise<Array<Visit>> {
            return localVarFp.listVisits(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the visit or a 404 error.
         * @summary Update a visit by ID
         * @param {VisitApiUpdateVisitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVisit(requestParameters: VisitApiUpdateVisitRequest, options?: RawAxiosRequestConfig): AxiosPromise<Visit> {
            return localVarFp.updateVisit(requestParameters.visitId, requestParameters.visit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VisitApi - interface
 * @export
 * @interface VisitApi
 */
export interface VisitApiInterface {
    /**
     * Creates a visit.
     * @summary Create a visit
     * @param {VisitApiAddVisitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisitApiInterface
     */
    addVisit(requestParameters: VisitApiAddVisitRequest, options?: RawAxiosRequestConfig): AxiosPromise<Visit>;

    /**
     * Records the details of a new vet visit.
     * @summary Adds a vet visit
     * @param {VisitApiAddVisitToOwnerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisitApiInterface
     */
    addVisitToOwner(requestParameters: VisitApiAddVisitToOwnerRequest, options?: RawAxiosRequestConfig): AxiosPromise<Visit>;

    /**
     * Returns the visit or a 404 error.
     * @summary Delete a visit by ID
     * @param {VisitApiDeleteVisitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisitApiInterface
     */
    deleteVisit(requestParameters: VisitApiDeleteVisitRequest, options?: RawAxiosRequestConfig): AxiosPromise<Visit>;

    /**
     * Returns the visit or a 404 error.
     * @summary Get a visit by ID
     * @param {VisitApiGetVisitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisitApiInterface
     */
    getVisit(requestParameters: VisitApiGetVisitRequest, options?: RawAxiosRequestConfig): AxiosPromise<Visit>;

    /**
     * Returns an array of visit .
     * @summary Lists visits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisitApiInterface
     */
    listVisits(options?: RawAxiosRequestConfig): AxiosPromise<Array<Visit>>;

    /**
     * Returns the visit or a 404 error.
     * @summary Update a visit by ID
     * @param {VisitApiUpdateVisitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisitApiInterface
     */
    updateVisit(requestParameters: VisitApiUpdateVisitRequest, options?: RawAxiosRequestConfig): AxiosPromise<Visit>;

}

/**
 * Request parameters for addVisit operation in VisitApi.
 * @export
 * @interface VisitApiAddVisitRequest
 */
export interface VisitApiAddVisitRequest {
    /**
     * The visit
     * @type {Visit}
     * @memberof VisitApiAddVisit
     */
    readonly visit: Visit
}

/**
 * Request parameters for addVisitToOwner operation in VisitApi.
 * @export
 * @interface VisitApiAddVisitToOwnerRequest
 */
export interface VisitApiAddVisitToOwnerRequest {
    /**
     * The ID of the pet owner.
     * @type {number}
     * @memberof VisitApiAddVisitToOwner
     */
    readonly ownerId: number

    /**
     * The ID of the pet.
     * @type {number}
     * @memberof VisitApiAddVisitToOwner
     */
    readonly petId: number

    /**
     * The details of the new vet visit.
     * @type {VisitFields}
     * @memberof VisitApiAddVisitToOwner
     */
    readonly visitFields: VisitFields
}

/**
 * Request parameters for deleteVisit operation in VisitApi.
 * @export
 * @interface VisitApiDeleteVisitRequest
 */
export interface VisitApiDeleteVisitRequest {
    /**
     * The ID of the visit.
     * @type {number}
     * @memberof VisitApiDeleteVisit
     */
    readonly visitId: number
}

/**
 * Request parameters for getVisit operation in VisitApi.
 * @export
 * @interface VisitApiGetVisitRequest
 */
export interface VisitApiGetVisitRequest {
    /**
     * The ID of the visit.
     * @type {number}
     * @memberof VisitApiGetVisit
     */
    readonly visitId: number
}

/**
 * Request parameters for updateVisit operation in VisitApi.
 * @export
 * @interface VisitApiUpdateVisitRequest
 */
export interface VisitApiUpdateVisitRequest {
    /**
     * The ID of the visit.
     * @type {number}
     * @memberof VisitApiUpdateVisit
     */
    readonly visitId: number

    /**
     * The visit
     * @type {Visit}
     * @memberof VisitApiUpdateVisit
     */
    readonly visit: Visit
}

/**
 * VisitApi - object-oriented interface
 * @export
 * @class VisitApi
 * @extends {BaseAPI}
 */
export class VisitApi extends BaseAPI implements VisitApiInterface {
    /**
     * Creates a visit.
     * @summary Create a visit
     * @param {VisitApiAddVisitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisitApi
     */
    public addVisit(requestParameters: VisitApiAddVisitRequest, options?: RawAxiosRequestConfig) {
        return VisitApiFp(this.configuration).addVisit(requestParameters.visit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Records the details of a new vet visit.
     * @summary Adds a vet visit
     * @param {VisitApiAddVisitToOwnerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisitApi
     */
    public addVisitToOwner(requestParameters: VisitApiAddVisitToOwnerRequest, options?: RawAxiosRequestConfig) {
        return VisitApiFp(this.configuration).addVisitToOwner(requestParameters.ownerId, requestParameters.petId, requestParameters.visitFields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the visit or a 404 error.
     * @summary Delete a visit by ID
     * @param {VisitApiDeleteVisitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisitApi
     */
    public deleteVisit(requestParameters: VisitApiDeleteVisitRequest, options?: RawAxiosRequestConfig) {
        return VisitApiFp(this.configuration).deleteVisit(requestParameters.visitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the visit or a 404 error.
     * @summary Get a visit by ID
     * @param {VisitApiGetVisitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisitApi
     */
    public getVisit(requestParameters: VisitApiGetVisitRequest, options?: RawAxiosRequestConfig) {
        return VisitApiFp(this.configuration).getVisit(requestParameters.visitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an array of visit .
     * @summary Lists visits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisitApi
     */
    public listVisits(options?: RawAxiosRequestConfig) {
        return VisitApiFp(this.configuration).listVisits(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the visit or a 404 error.
     * @summary Update a visit by ID
     * @param {VisitApiUpdateVisitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisitApi
     */
    public updateVisit(requestParameters: VisitApiUpdateVisitRequest, options?: RawAxiosRequestConfig) {
        return VisitApiFp(this.configuration).updateVisit(requestParameters.visitId, requestParameters.visit, options).then((request) => request(this.axios, this.basePath));
    }
}

